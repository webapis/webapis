import { c as useAuthContext, u as useAppRoute, b as useMediaQuery, p, h, v as valueChanged } from './index-4e980601.js';
import { T as TextInput } from './index-ccfb22a4.js';
import { A as AsyncButton } from './index-5b14cc3a.js';
import { P as Paper, G as Grid } from './Grid-9197e26f.js';
import './style-9fd40498.js';

function Signup({
  signup
}) {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    username,
    password,
    email,
    loading,
    error
  } = state;
  p(() => {
    if (state.user && state.user.token) {
      onAppRoute({
        featureRoute: '/',
        route: '/'
      });
    }
  }, [state.user]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, null, h(Paper, null, h(TextInput, {
    value: username,
    onChange: handleChange,
    type: "text",
    "data-testid": "username",
    name: "username",
    placeholder: "username" // validationTypes={[
    //   validationTypes.USERNAME_FORMAT_VALIDATION,
    //   validationTypes.USERNAME_TAKEN,
    //   validationTypes.EMPTY_STRING_VALIDATION,
    // ]}

  }), h(TextInput, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    "data-testid": "email",
    name: "email" // validationTypes={[
    //   validationTypes.EMAIL_FORMAT_VALIDATION,
    //   validationTypes.REGISTERED_EMAIL,
    // ]}

  }), h(TextInput, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    "data-testid": "password",
    name: "password" // validationTypes={[validationTypes.PASSWORD_FORMAT_VALIDATION]}

  }), h(AsyncButton, {
    className: "btn",
    type: "button",
    onClick: signup,
    id: "signup-btn",
    "data-testid": "signup-btn",
    loading: loading
  }, "SIGNUP")));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLWYwNzUyOWY3LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvZmVhdHVyZXMvYXV0aGVudGljYXRpb24vdWktY29tcG9uZW50cy9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuXHJcbmltcG9ydCBBc3luY0J1dHRvbiBmcm9tICdjb250cm9scy9hc3luYy1idXR0b24nXHJcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi4vc3RhdGUvYXV0aC1jb250ZXh0JztcclxuXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vc3RhdGUvYWN0aW9ucyc7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICdjb21wb25lbnRzL2xheW91dC9HcmlkJztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICdjb21wb25lbnRzL2xheW91dC9QYXBlcic7XHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICdjb21wb25lbnRzL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHt1c2VBcHBSb3V0ZX0gZnJvbSAnY29tcG9uZW50cy9hcHAtcm91dGUnXHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnY29udHJvbHMvdGV4dC1pbnB1dCdcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lnbnVwKHtzaWdudXB9KSB7XHJcbiAgY29uc3Qge3N0YXRlLGRpc3BhdGNofT11c2VBdXRoQ29udGV4dCgpXHJcbiAgY29uc3Qge29uQXBwUm91dGV9ID0gdXNlQXBwUm91dGUoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbCxsb2FkaW5nLGVycm9yIH0gPSBzdGF0ZTtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLnVzZXIgJiYgc3RhdGUudXNlci50b2tlbikge1xyXG4gICAgICBvbkFwcFJvdXRlKHtmZWF0dXJlUm91dGU6ICcvJyxyb3V0ZTonLyd9KTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUudXNlcl0pO1xyXG5cclxuIFxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPEdyaWQgPlxyXG4gICAgICA8UGFwZXI+XHJcblxyXG4gICAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17dXNlcm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHR5cGU9J3RleHQnXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSd1c2VybmFtZSdcclxuICAgICAgICAgICAgbmFtZT0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSd1c2VybmFtZSdcclxuICAgICAgICAgICAgLy8gdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAvLyAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9UQUtFTixcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIC8vIF19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAvLyAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuUkVHSVNURVJFRF9FTUFJTCxcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG5hbWU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxBc3luY0J1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2J0bidcclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtzaWdudXB9XHJcbiAgICAgICAgICAgIGlkPSdzaWdudXAtYnRuJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cInNpZ251cC1idG5cIlxyXG4gICAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBTSUdOVVBcclxuICAgICAgICAgIDwvQXN5bmNCdXR0b24+XHJcbiAgXHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiU2lnbnVwIiwic2lnbnVwIiwic3RhdGUiLCJkaXNwYXRjaCIsInVzZUF1dGhDb250ZXh0Iiwib25BcHBSb3V0ZSIsInVzZUFwcFJvdXRlIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsImxvYWRpbmciLCJlcnJvciIsInVzZUVmZmVjdCIsInVzZXIiLCJ0b2tlbiIsImZlYXR1cmVSb3V0ZSIsInJvdXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsImFjdGlvbnMiLCJwcm9wTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBYWUsU0FBU0EsTUFBVCxDQUFnQjtBQUFDQyxFQUFBQTtBQUFELENBQWhCLEVBQTBCO0FBQ3ZDLFFBQU07QUFBQ0MsSUFBQUEsS0FBRDtBQUFPQyxJQUFBQTtBQUFQLE1BQWlCQyxjQUFjLEVBQXJDO0FBQ0EsUUFBTTtBQUFDQyxJQUFBQTtBQUFELE1BQWVDLFdBQVcsRUFBaEM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxRQUFaO0FBQXNCQyxJQUFBQSxLQUF0QjtBQUE0QkMsSUFBQUEsT0FBNUI7QUFBb0NDLElBQUFBO0FBQXBDLE1BQThDWCxLQUFwRDtBQUNBWSxFQUFBQSxDQUFTLENBQUMsTUFBTTtBQUNkLFFBQUlaLEtBQUssQ0FBQ2EsSUFBTixJQUFjYixLQUFLLENBQUNhLElBQU4sQ0FBV0MsS0FBN0IsRUFBb0M7QUFDbENYLE1BQUFBLFVBQVUsQ0FBQztBQUFDWSxRQUFBQSxZQUFZLEVBQUUsR0FBZjtBQUFtQkMsUUFBQUEsS0FBSyxFQUFDO0FBQXpCLE9BQUQsQ0FBVjtBQUNEO0FBQ0YsR0FKUSxFQUlOLENBQUNoQixLQUFLLENBQUNhLElBQVAsQ0FKTSxDQUFUOztBQU9BLFdBQVNJLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FwQixJQUFBQSxRQUFRLENBQ05xQixZQUFBLENBQXFCO0FBQ25CQyxNQUFBQSxRQUFRLEVBQUVKLElBRFM7QUFFbkJDLE1BQUFBLEtBRm1CO0FBR25CbkIsTUFBQUEsUUFIbUI7QUFJbkJELE1BQUFBO0FBSm1CLEtBQXJCLENBRE0sQ0FBUjtBQVFEOztBQUNELFNBQ0UsRUFBQyxJQUFELFFBQ0UsRUFBQyxLQUFELFFBRUksRUFBQyxTQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVPLFFBRFQ7QUFFRSxJQUFBLFFBQVEsRUFBRVUsWUFGWjtBQUdFLElBQUEsSUFBSSxFQUFDLE1BSFA7QUFJRSxtQkFBWSxVQUpkO0FBS0UsSUFBQSxJQUFJLEVBQUMsVUFMUDtBQU1FLElBQUEsV0FBVyxFQUFDLFVBTmQ7QUFRRTtBQUNBO0FBQ0E7QUFDQTs7QUFYRixJQUZKLEVBZUksRUFBQyxTQUFEO0FBQ0UsSUFBQSxRQUFRLEVBQUVBLFlBRFo7QUFFRSxJQUFBLEtBQUssRUFBRVIsS0FGVDtBQUdFLElBQUEsV0FBVyxFQUFDLE9BSGQ7QUFJRSxJQUFBLElBQUksRUFBQyxPQUpQO0FBS0UsbUJBQVksT0FMZDtBQU1FLElBQUEsSUFBSSxFQUFDLE9BTlA7QUFRRTtBQUNBO0FBRUE7O0FBWEYsSUFmSixFQTRCSSxFQUFDLFNBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRVEsWUFEWjtBQUVFLElBQUEsS0FBSyxFQUFFVCxRQUZUO0FBR0UsSUFBQSxXQUFXLEVBQUMsVUFIZDtBQUlFLElBQUEsSUFBSSxFQUFDLFVBSlA7QUFLRSxtQkFBWSxVQUxkO0FBTUUsSUFBQSxJQUFJLEVBQUMsVUFOUDs7QUFBQSxJQTVCSixFQXFDSSxFQUFDLFdBQUQ7QUFDRSxJQUFBLFNBQVMsRUFBQyxLQURaO0FBRUUsSUFBQSxJQUFJLEVBQUMsUUFGUDtBQUdFLElBQUEsT0FBTyxFQUFFVCxNQUhYO0FBSUUsSUFBQSxFQUFFLEVBQUMsWUFKTDtBQUtFLG1CQUFZLFlBTGQ7QUFNRSxJQUFBLE9BQU8sRUFBRVc7QUFOWCxjQXJDSixDQURGLENBREY7QUFxREQ7Ozs7In0=
