import { b as useAuthContext, u as useAppRoute, d as useMediaQuery, p, h, e as valueChanged } from './index-6eb738dc.js';
import { T as TextInput } from './index-a36249ca.js';
import { A as AsyncButton } from './index-bb149304.js';
import { P as Paper } from './Paper-ca71e768.js';
import { G as Grid } from './Grid-c7d5d6e7.js';

function Signup({
  signup
}) {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    username,
    password,
    email,
    loading,
    error
  } = state;
  p(() => {
    if (state.user && state.user.token) {
      onAppRoute({
        featureRoute: '/',
        route: '/'
      });
    }
  }, [state.user]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, null, h(Paper, null, h(TextInput, {
    value: username,
    onChange: handleChange,
    type: "text",
    "data-testid": "username",
    name: "username",
    placeholder: "username" // validationTypes={[
    //   validationTypes.USERNAME_FORMAT_VALIDATION,
    //   validationTypes.USERNAME_TAKEN,
    //   validationTypes.EMPTY_STRING_VALIDATION,
    // ]}

  }), h(TextInput, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    "data-testid": "email",
    name: "email" // validationTypes={[
    //   validationTypes.EMAIL_FORMAT_VALIDATION,
    //   validationTypes.REGISTERED_EMAIL,
    // ]}

  }), h(TextInput, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    "data-testid": "password",
    name: "password" // validationTypes={[validationTypes.PASSWORD_FORMAT_VALIDATION]}

  }), h(AsyncButton, {
    className: "btn",
    type: "button",
    onClick: signup,
    id: "signup-btn",
    "data-testid": "signup-btn",
    loading: loading
  }, "SIGNUP")));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTRjODRjM2JhLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvZmVhdHVyZXMvYXV0aGVudGljYXRpb24vdWktY29tcG9uZW50cy9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbi8vaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5cclxuaW1wb3J0IEFzeW5jQnV0dG9uIGZyb20gJ2NvbnRyb2xzL2FzeW5jLWJ1dHRvbidcclxuaW1wb3J0IHsgdXNlQXV0aENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9hdXRoLWNvbnRleHQnO1xyXG5cclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9zdGF0ZS9hY3Rpb25zJztcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJ2NvbXBvbmVudHMvbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgeyBQYXBlciB9IGZyb20gJ2NvbXBvbmVudHMvbGF5b3V0L1BhcGVyJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJ2NvbXBvbmVudHMvbGF5b3V0L3VzZU1lZGlhUXVlcnknO1xyXG5pbXBvcnQge3VzZUFwcFJvdXRlfSBmcm9tICdjb21wb25lbnRzL2FwcC1yb3V0ZSdcclxuaW1wb3J0IFRleHRJbnB1dCBmcm9tICdjb250cm9scy90ZXh0LWlucHV0J1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWdudXAoe3NpZ251cH0pIHtcclxuICBjb25zdCB7c3RhdGUsZGlzcGF0Y2h9PXVzZUF1dGhDb250ZXh0KClcclxuICBjb25zdCB7b25BcHBSb3V0ZX0gPSB1c2VBcHBSb3V0ZSgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIGVtYWlsLGxvYWRpbmcsZXJyb3IgfSA9IHN0YXRlO1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoc3RhdGUudXNlciAmJiBzdGF0ZS51c2VyLnRva2VuKSB7XHJcbiAgICAgIG9uQXBwUm91dGUoe2ZlYXR1cmVSb3V0ZTogJy8nLHJvdXRlOicvJ30pO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS51c2VyXSk7XHJcblxyXG4gXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMudmFsdWVDaGFuZ2VkKHtcclxuICAgICAgICBwcm9wTmFtZTogbmFtZSxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCA+XHJcbiAgICAgIDxQYXBlcj5cclxuXHJcbiAgICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdHlwZT0ndGV4dCdcclxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICBuYW1lPSd1c2VybmFtZSdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX1RBS0VOLFxyXG4gICAgICAgICAgICAvLyAgIHZhbGlkYXRpb25UeXBlcy5FTVBUWV9TVFJJTkdfVkFMSURBVElPTixcclxuICAgICAgICAgICAgLy8gXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J2VtYWlsJ1xyXG4gICAgICAgICAgICB0eXBlPSdlbWFpbCdcclxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9J2VtYWlsJ1xyXG4gICAgICAgICAgICBuYW1lPSdlbWFpbCdcclxuICAgICAgICAgICAgLy8gdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAvLyAgIHZhbGlkYXRpb25UeXBlcy5SRUdJU1RFUkVEX0VNQUlMLFxyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIF19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEFzeW5jQnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3NpZ251cH1cclxuICAgICAgICAgICAgaWQ9J3NpZ251cC1idG4nXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic2lnbnVwLWJ0blwiXHJcbiAgICAgICAgICAgIGxvYWRpbmc9e2xvYWRpbmd9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFNJR05VUFxyXG4gICAgICAgICAgPC9Bc3luY0J1dHRvbj5cclxuICBcclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJTaWdudXAiLCJzaWdudXAiLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlQXV0aENvbnRleHQiLCJvbkFwcFJvdXRlIiwidXNlQXBwUm91dGUiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImVtYWlsIiwibG9hZGluZyIsImVycm9yIiwidXNlRWZmZWN0IiwidXNlciIsInRva2VuIiwiZmVhdHVyZVJvdXRlIiwicm91dGUiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwiYWN0aW9ucyIsInByb3BOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFhZSxTQUFTQSxNQUFULENBQWdCO0FBQUNDLEVBQUFBO0FBQUQsQ0FBaEIsRUFBMEI7QUFDdkMsUUFBTTtBQUFDQyxJQUFBQSxLQUFEO0FBQU9DLElBQUFBO0FBQVAsTUFBaUJDLGNBQWMsRUFBckM7QUFDQSxRQUFNO0FBQUNDLElBQUFBO0FBQUQsTUFBZUMsV0FBVyxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBLFFBQVo7QUFBc0JDLElBQUFBLEtBQXRCO0FBQTRCQyxJQUFBQSxPQUE1QjtBQUFvQ0MsSUFBQUE7QUFBcEMsTUFBOENYLEtBQXBEO0FBQ0FZLEVBQUFBLENBQVMsQ0FBQyxNQUFNO0FBQ2QsUUFBSVosS0FBSyxDQUFDYSxJQUFOLElBQWNiLEtBQUssQ0FBQ2EsSUFBTixDQUFXQyxLQUE3QixFQUFvQztBQUNsQ1gsTUFBQUEsVUFBVSxDQUFDO0FBQUNZLFFBQUFBLFlBQVksRUFBRSxHQUFmO0FBQW1CQyxRQUFBQSxLQUFLLEVBQUM7QUFBekIsT0FBRCxDQUFWO0FBQ0Q7QUFDRixHQUpRLEVBSU4sQ0FBQ2hCLEtBQUssQ0FBQ2EsSUFBUCxDQUpNLENBQVQ7O0FBT0EsV0FBU0ksWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQXBCLElBQUFBLFFBQVEsQ0FDTnFCLFlBQUEsQ0FBcUI7QUFDbkJDLE1BQUFBLFFBQVEsRUFBRUosSUFEUztBQUVuQkMsTUFBQUEsS0FGbUI7QUFHbkJuQixNQUFBQSxRQUhtQjtBQUluQkQsTUFBQUE7QUFKbUIsS0FBckIsQ0FETSxDQUFSO0FBUUQ7O0FBQ0QsU0FDRSxFQUFDLElBQUQsUUFDRSxFQUFDLEtBQUQsUUFFSSxFQUFDLFNBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRU8sUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFVSxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsTUFIUDtBQUlFLG1CQUFZLFVBSmQ7QUFLRSxJQUFBLElBQUksRUFBQyxVQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMsVUFOZDtBQVFFO0FBQ0E7QUFDQTtBQUNBOztBQVhGLElBRkosRUFlSSxFQUFDLFNBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRUEsWUFEWjtBQUVFLElBQUEsS0FBSyxFQUFFUixLQUZUO0FBR0UsSUFBQSxXQUFXLEVBQUMsT0FIZDtBQUlFLElBQUEsSUFBSSxFQUFDLE9BSlA7QUFLRSxtQkFBWSxPQUxkO0FBTUUsSUFBQSxJQUFJLEVBQUMsT0FOUDtBQVFFO0FBQ0E7QUFFQTs7QUFYRixJQWZKLEVBNEJJLEVBQUMsU0FBRDtBQUNFLElBQUEsUUFBUSxFQUFFUSxZQURaO0FBRUUsSUFBQSxLQUFLLEVBQUVULFFBRlQ7QUFHRSxJQUFBLFdBQVcsRUFBQyxVQUhkO0FBSUUsSUFBQSxJQUFJLEVBQUMsVUFKUDtBQUtFLG1CQUFZLFVBTGQ7QUFNRSxJQUFBLElBQUksRUFBQyxVQU5QOztBQUFBLElBNUJKLEVBcUNJLEVBQUMsV0FBRDtBQUNFLElBQUEsU0FBUyxFQUFDLEtBRFo7QUFFRSxJQUFBLElBQUksRUFBQyxRQUZQO0FBR0UsSUFBQSxPQUFPLEVBQUVULE1BSFg7QUFJRSxJQUFBLEVBQUUsRUFBQyxZQUpMO0FBS0UsbUJBQVksWUFMZDtBQU1FLElBQUEsT0FBTyxFQUFFVztBQU5YLGNBckNKLENBREYsQ0FERjtBQXFERDs7OzsifQ==
