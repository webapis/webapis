import { h, y, p } from "./index-c4021a67.js";
import { L as Layout } from "./Layout-65d0d414.js";
import { u as useMediaQuery, M as Message } from "./Message-90b7db8c.js";

function MessageEditor({
  loading,
  messageText,
  onMessageText,
  onMessage,
  hangout,
}) {
  return h(
    "div",
    null,
    h(
      "div",
      {
        className: "input-group mb-3",
      },
      h("input", {
        disabled: hangout && hangout.state === "BLOCKED",
        type: "text",
        class: "form-control",
        "aria-label": "Recipient's username",
        "aria-describedby": "button-addon2",
        onChange: onMessageText,
        "data-testid": "message-input",
        value: messageText,
      }),
      h(
        "div",
        {
          className: "input-group-append",
        },
        h(
          "button",
          {
            className: "btn btn-outline-secondary",
            type: "button",
            loading: loading,
            disabled: hangout && hangout.state === "BLOCKED",
            id: "MESSAGE",
            onClick: onMessage,
            "data-testid": "send-btn",
          },
          "Send"
        )
      )
    )
  );
}

const style = {
  color: "red",
  float: "right",
  width: "100%",
  fontSize: 16,
  textAlign: "end",
};
function BlockerMessage({ message }) {
  return h(
    "div",
    {
      style: style,
      "data-testid": "blocker-message",
    },
    message.text
  );
}

const style$1 = {
  color: "red",
  float: "right",
  width: "100%",
  fontSize: 16,
  textAlign: "end",
};
function BlockedMessage({ message, onNavigation }) {
  function handleNavigation(e) {
    e.preventDefault();
    onNavigation(e);
  }

  return h(
    "div",
    {
      style: style$1,
      "data-testid": "blocked-message",
    },
    message.text,
    h(
      "a",
      {
        id: "UNBLOCK",
        "data-testid": "seemore-btn",
        href: "/",
        onClick: handleNavigation,
      },
      "see more"
    )
  );
}

const styles = {
  messageContainer: {
    // width: '100%',
    boxSizing: "border-box",
    padding: 3,
    //  backgroundColor: 'orange',
    flex: 3,
    overflowY: "auto",
    overflowX: "hidden",
  },
};
function Messages({
  messages,
  onMessage,
  onMessageText,
  messageText,
  username,
  hangout,
  onNavigation,
  loading,
}) {
  const scrollerRef = y(null);
  const { device } = useMediaQuery();
  p(() => {
    if (messages) {
      scrollerRef.current.scrollTop = scrollerRef.current.scrollHeight;
    }
  }, [messages]);

  function onSend(e) {
    onMessage(e);
    scrollerRef.current.scrollTop = scrollerRef.current.scrollHeight;
  }

  return h(
    "div",
    {
      style: {
        boxSizing: "border-box",
        width: "100%",
        height: "100%",
        display: "flex",
        flexDirection: "column",
      },
    },
    h(
      "div",
      {
        style: { ...styles.messageContainer, flex: device === "phone" ? 4 : 2 },
        ref: scrollerRef,
      },
      messages &&
        messages.length > 0 &&
        floatMessages &&
        floatMessages.length > 0 &&
        floatMessages({
          messages: sortMessages({
            messages,
          }),
          username,
        }).map((m) =>
          h(
            "div",
            {
              style: {
                display: "flex",
              },
            },
            " ",
            !m.type &&
              h(Message, {
                message: m,
              }),
            m.type &&
              m.type === "blocker" &&
              h(BlockerMessage, {
                message: m,
              }),
            m.type &&
              m.type === "blocked" &&
              h(BlockedMessage, {
                message: m,
                onNavigation: onNavigation,
              })
          )
        )
    ),
    h(MessageEditor, {
      loading: loading,
      hangout: hangout,
      onMessage: onSend,
      messageText: messageText,
      onMessageText: onMessageText,
    })
  );
}

function floatMessages({ messages, username }) {
  if (messages && messages.length > 0 && username) {
    return messages.map((msg) => {
      if (msg.username === username) {
        return { ...msg, float: "right", username: "me" };
      } else {
        return { ...msg, float: "left" };
      }
    });
  } else {
    return [];
  }
}

function sortMessages({ messages }) {
  if (messages) {
    return messages.sort();
  } else {
    return [];
  }
}

function Hangchat({
  loading,
  messages = [],
  onMessageText,
  onMessage,
  messageText,
  username,
  hangout,
  onNavigation,
}) {
  p(() => {
    if (hangout) {
      document.title = hangout.username;
    }
  }, [hangout]);
  return h(
    Layout,
    {
      id: "hangchat-ui",
      onNavigation: onNavigation,
    },
    h(Messages, {
      loading: loading,
      onNavigation: onNavigation,
      hangout: hangout,
      messages: messages,
      onMessage: onMessage,
      onMessageText: onMessageText,
      messageText: messageText,
      username: username,
    })
  );
}

export default Hangchat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
