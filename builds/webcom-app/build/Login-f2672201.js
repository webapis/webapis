import { h } from './index-e818a723.js';
import { B as Button, T as TextInput } from './index-6be3ba0e.js';

function Login(props) {
  const {
    emailorusername,
    password,
    loading,
    onLogin,
    onChange,
    validation,
    onForgotPassword
  } = props;
  return h("div", {
    className: "col-md-4 border mx-auto rounded",
    style: {
      margin: 15,
      padding: 16
    }
  }, loading && h("div", {
    className: "progress",
    style: "height: 5px;"
  }, h("div", {
    className: "progress-bar progress-bar-striped progress-bar-animated",
    role: "progressbar",
    "aria-valuenow": "100",
    "aria-valuemin": "0",
    "aria-valuemax": "100",
    style: "width: 100%"
  })), h(TextInput, {
    value: emailorusername,
    onChange: onChange,
    label: "Email or username",
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    message: validation && validation['emailorusername'].message,
    isValid: validation && validation['emailorusername'].isValid // validationTypes={[
    //   validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION,
    //   validationTypes.INVALID_CREDENTIALS,
    //   validationTypes.EMAIL_NOT_REGISTERED,
    //   validationTypes.USERNAME_NOT_REGISTERED,
    // ]}

  }), h(TextInput, {
    label: "Password",
    value: password,
    onChange: onChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    message: validation && validation['password'].message,
    isValid: validation && validation['password'].isValid // validationTypes={[
    //   validationTypes.EMPTY_STRING_VALIDATION,
    //   validationTypes.INVALID_CREDENTIALS,
    // ]}

  }), h("div", {
    style: {
      display: 'flex',
      justifyContent: 'space-between'
    }
  }, h(Button, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: onLogin,
    loading: loading,
    title: "Login",
    bg: "primary"
  }), h(Button, {
    onClick: onForgotPassword,
    id: "forgotpassword",
    "data-testid": "forgotpassword",
    outline: true,
    bg: "primary",
    title: "Forgot Password!"
  })));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tZjI2NzIyMDEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9mZWF0dXJlcy9hdXRoZW50aWNhdGlvbi91aS1jb21wb25lbnRzL0xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQge3VzZUVmZmVjdH0gZnJvbSAncHJlYWN0L2hvb2tzJ1xyXG5pbXBvcnQgVGV4dElucHV0IGZyb20gJ2NvbnRyb2xzL3RleHQtaW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJ2NvbnRyb2xzL2J1dHRvbidcclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9naW4ocHJvcHMpIHtcclxuICBjb25zdCB7IGVtYWlsb3J1c2VybmFtZSwgcGFzc3dvcmQsbG9hZGluZyxvbkxvZ2luLG9uQ2hhbmdlLHZhbGlkYXRpb24sIG9uRm9yZ290UGFzc3dvcmQgfSA9cHJvcHM7XHJcblxyXG5cclxuICByZXR1cm4gKFxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtNCBib3JkZXIgbXgtYXV0byByb3VuZGVkXCIgc3R5bGU9e3ttYXJnaW46MTUsIHBhZGRpbmc6MTZ9fT5cclxuICAgICAge2xvYWRpbmcgJiYgIDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3NcIiBzdHlsZT1cImhlaWdodDogNXB4O1wiPlxyXG4gIDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1zdHJpcGVkIHByb2dyZXNzLWJhci1hbmltYXRlZFwiIHJvbGU9XCJwcm9ncmVzc2JhclwiIGFyaWEtdmFsdWVub3c9XCIxMDBcIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+PC9kaXY+XHJcbjwvZGl2Pn1cclxuICAgICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsb3J1c2VybmFtZX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxyXG4gICAgICAgICAgICBsYWJlbD1cIkVtYWlsIG9yIHVzZXJuYW1lXCJcclxuICAgICAgICAgICAgbmFtZT0nZW1haWxvcnVzZXJuYW1lJ1xyXG4gICAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgZW1haWwgb3IgdXNlcm5hbWUnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbE9yVXNlcm5hbWUnXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdlbWFpbE9yVXNlcm5hbWUnXHJcbiAgICAgICAgICAgIG1lc3NhZ2U9e3ZhbGlkYXRpb24gJiYgdmFsaWRhdGlvblsnZW1haWxvcnVzZXJuYW1lJ10ubWVzc2FnZX1cclxuICAgICAgICAgICAgaXNWYWxpZD17dmFsaWRhdGlvbiYmIHZhbGlkYXRpb25bJ2VtYWlsb3J1c2VybmFtZSddLmlzVmFsaWR9XHJcbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAvLyAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuSU5WQUxJRF9DUkVERU5USUFMUyxcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfTk9UX1JFR0lTVEVSRUQsXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX05PVF9SRUdJU1RFUkVELFxyXG4gICAgICAgICAgICAvLyBdfVxyXG4gICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICAgIGxhYmVsPVwiUGFzc3dvcmRcIlxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nZW50ZXIgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBtZXNzYWdlPXt2YWxpZGF0aW9uICYmICB2YWxpZGF0aW9uWydwYXNzd29yZCddLm1lc3NhZ2V9XHJcbiAgICAgICAgICAgIGlzVmFsaWQ9e3ZhbGlkYXRpb24gJiYgdmFsaWRhdGlvblsncGFzc3dvcmQnXS5pc1ZhbGlkfVxyXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXHJcbiAgICAgICAgICAgIC8vIF19XHJcbiAgICAgICAgICAvPlxyXG4gIDxkaXYgc3R5bGU9e3tkaXNwbGF5OidmbGV4JyxqdXN0aWZ5Q29udGVudDonc3BhY2UtYmV0d2Vlbid9fT5cclxuXHJcbiBcclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBpZD0nbG9naW4tYnRuJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nbG9naW4tYnRuJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkxvZ2lufVxyXG4gICAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICAgICAgICB0aXRsZT1cIkxvZ2luXCJcclxuICAgICAgICAgICAgYmc9XCJwcmltYXJ5XCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtvbkZvcmdvdFBhc3N3b3JkfSBpZD0nZm9yZ290cGFzc3dvcmQnIGRhdGEtdGVzdGlkPSdmb3Jnb3RwYXNzd29yZCcgb3V0bGluZSAgIGJnPVwicHJpbWFyeVwiIHRpdGxlPVwiRm9yZ290IFBhc3N3b3JkIVwiLz5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkxvZ2luIiwicHJvcHMiLCJlbWFpbG9ydXNlcm5hbWUiLCJwYXNzd29yZCIsImxvYWRpbmciLCJvbkxvZ2luIiwib25DaGFuZ2UiLCJ2YWxpZGF0aW9uIiwib25Gb3Jnb3RQYXNzd29yZCIsIm1hcmdpbiIsInBhZGRpbmciLCJtZXNzYWdlIiwiaXNWYWxpZCIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCJdLCJtYXBwaW5ncyI6Ijs7O0FBT2UsU0FBU0EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ25DLFFBQU07QUFBRUMsSUFBQUEsZUFBRjtBQUFtQkMsSUFBQUEsUUFBbkI7QUFBNEJDLElBQUFBLE9BQTVCO0FBQW9DQyxJQUFBQSxPQUFwQztBQUE0Q0MsSUFBQUEsUUFBNUM7QUFBcURDLElBQUFBLFVBQXJEO0FBQWlFQyxJQUFBQTtBQUFqRSxNQUFxRlAsS0FBM0Y7QUFHQSxTQUVJO0FBQUssSUFBQSxTQUFTLEVBQUMsaUNBQWY7QUFBaUQsSUFBQSxLQUFLLEVBQUU7QUFBQ1EsTUFBQUEsTUFBTSxFQUFDLEVBQVI7QUFBWUMsTUFBQUEsT0FBTyxFQUFDO0FBQXBCO0FBQXhELEtBQ0NOLE9BQU8sSUFBSztBQUFLLElBQUEsU0FBUyxFQUFDLFVBQWY7QUFBMEIsSUFBQSxLQUFLLEVBQUM7QUFBaEMsS0FDakI7QUFBSyxJQUFBLFNBQVMsRUFBQyx5REFBZjtBQUF5RSxJQUFBLElBQUksRUFBQyxhQUE5RTtBQUE0RixxQkFBYyxLQUExRztBQUFnSCxxQkFBYyxHQUE5SDtBQUFrSSxxQkFBYyxLQUFoSjtBQUFzSixJQUFBLEtBQUssRUFBQztBQUE1SixJQURpQixDQURiLEVBSUksRUFBQyxTQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVGLGVBRFQ7QUFFRSxJQUFBLFFBQVEsRUFBRUksUUFGWjtBQUdFLElBQUEsS0FBSyxFQUFDLG1CQUhSO0FBSUUsSUFBQSxJQUFJLEVBQUMsaUJBSlA7QUFLRSxJQUFBLElBQUksRUFBQyxNQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMseUJBTmQ7QUFPRSxJQUFBLEVBQUUsRUFBQyxpQkFQTDtBQVFFLG1CQUFZLGlCQVJkO0FBU0UsSUFBQSxPQUFPLEVBQUVDLFVBQVUsSUFBSUEsVUFBVSxDQUFDLGlCQUFELENBQVYsQ0FBOEJJLE9BVHZEO0FBVUUsSUFBQSxPQUFPLEVBQUVKLFVBQVUsSUFBR0EsVUFBVSxDQUFDLGlCQUFELENBQVYsQ0FBOEJLLE9BVnREO0FBWUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFoQkYsSUFKSixFQXVCSSxFQUFDLFNBQUQ7QUFDRSxJQUFBLEtBQUssRUFBQyxVQURSO0FBRUUsSUFBQSxLQUFLLEVBQUVULFFBRlQ7QUFHRSxJQUFBLFFBQVEsRUFBRUcsUUFIWjtBQUlFLElBQUEsSUFBSSxFQUFDLFVBSlA7QUFLRSxJQUFBLElBQUksRUFBQyxVQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMsZ0JBTmQ7QUFPRSxJQUFBLEVBQUUsRUFBQyxVQVBMO0FBUUUsbUJBQVksVUFSZDtBQVNFLElBQUEsT0FBTyxFQUFFQyxVQUFVLElBQUtBLFVBQVUsQ0FBQyxVQUFELENBQVYsQ0FBdUJJLE9BVGpEO0FBVUUsSUFBQSxPQUFPLEVBQUVKLFVBQVUsSUFBSUEsVUFBVSxDQUFDLFVBQUQsQ0FBVixDQUF1QkssT0FWaEQ7QUFZRTtBQUNBO0FBQ0E7O0FBZEYsSUF2QkosRUF1Q0o7QUFBSyxJQUFBLEtBQUssRUFBRTtBQUFDQyxNQUFBQSxPQUFPLEVBQUMsTUFBVDtBQUFnQkMsTUFBQUEsY0FBYyxFQUFDO0FBQS9CO0FBQVosS0FHUSxFQUFDLE1BQUQ7QUFDRSxJQUFBLElBQUksRUFBQyxRQURQO0FBRUUsSUFBQSxFQUFFLEVBQUMsV0FGTDtBQUdFLG1CQUFZLFdBSGQ7QUFJRSxJQUFBLE9BQU8sRUFBRVQsT0FKWDtBQUtFLElBQUEsT0FBTyxFQUFFRCxPQUxYO0FBTUUsSUFBQSxLQUFLLEVBQUMsT0FOUjtBQU9FLElBQUEsRUFBRSxFQUFDO0FBUEwsSUFIUixFQWFRLEVBQUMsTUFBRDtBQUFRLElBQUEsT0FBTyxFQUFFSSxnQkFBakI7QUFBbUMsSUFBQSxFQUFFLEVBQUMsZ0JBQXRDO0FBQXVELG1CQUFZLGdCQUFuRTtBQUFvRixJQUFBLE9BQU8sTUFBM0Y7QUFBOEYsSUFBQSxFQUFFLEVBQUMsU0FBakc7QUFBMkcsSUFBQSxLQUFLLEVBQUM7QUFBakgsSUFiUixDQXZDSSxDQUZKO0FBNkREOzs7OyJ9
