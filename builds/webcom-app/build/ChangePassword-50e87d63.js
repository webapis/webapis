import { c as useAuthContext, e as useUserName, u as useAppRoute, b as useMediaQuery, p, g as getTokenFromUrl, h, v as valueChanged } from './index-50d7d53d.js';
import { T as TextInput } from './index-e73746c1.js';
import { P as Paper, G as Grid } from './Grid-5a5b9b75.js';
import './style-29ff44a5.js';
import { B as Button } from './index-8cea4d38.js';

function ChangePassword({
  changePassword
}) {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    token
  } = useUserName();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    password,
    confirm,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var urltoken = url.searchParams.get('token');

    if (urltoken) {
      dispatch(getTokenFromUrl({
        token: urltoken
      }));
    }
  }, []);
  p(() => {
    if (state.authFeedback) {
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(TextInput, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange //  validationTypes={[validationTypes.PASSWORD_FORMAT_VALIDATION]}

  }), h(TextInput, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange //   validationTypes={[validationTypes.PASSWORDS_MATCH_VALIDATION]}

  }), h(Button, {
    type: "button",
    "data-testid": "change-pass-btn",
    onClick: changePassword
  }, "CHANGE")));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtNTBlODdkNjMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9mZWF0dXJlcy9hdXRoZW50aWNhdGlvbi91aS1jb21wb25lbnRzL0NoYW5nZVBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnY29udHJvbHMvdGV4dC1pbnB1dCc7XHJcblxyXG5pbXBvcnQgQnV0dG9uIGZyb20gJ2NvbnRyb2xzL2J1dHRvbic7XHJcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi4vc3RhdGUvYXV0aC1jb250ZXh0JztcclxuXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vc3RhdGUvYWN0aW9ucyc7XHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICdjb21wb25lbnRzL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICdjb21wb25lbnRzL2xheW91dC9QYXBlcic7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICdjb21wb25lbnRzL2xheW91dC9HcmlkJztcclxuaW1wb3J0IHt1c2VBcHBSb3V0ZX0gZnJvbSAnY29tcG9uZW50cy9hcHAtcm91dGUnXHJcbmltcG9ydCB7IHVzZVVzZXJOYW1lIH0gZnJvbSAnLi4vc3RhdGUvdXNlVXNlck5hbWUnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDaGFuZ2VQYXNzd29yZCh7Y2hhbmdlUGFzc3dvcmR9KSB7XHJcbiAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgdG9rZW4gfSA9IHVzZVVzZXJOYW1lKCk7XHJcbiAgY29uc3Qge29uQXBwUm91dGV9ID0gdXNlQXBwUm91dGUoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG5cclxuICBjb25zdCB7IHBhc3N3b3JkLCBjb25maXJtLCBlcnJvciB9ID0gc3RhdGU7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsZXQgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB2YXIgdXJsdG9rZW4gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndG9rZW4nKTtcclxuXHJcbiAgICBpZiAodXJsdG9rZW4pIHtcclxuICAgICAgZGlzcGF0Y2goYWN0aW9ucy5nZXRUb2tlbkZyb21VcmwoeyB0b2tlbjogdXJsdG9rZW4gfSkpO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS5hdXRoRmVlZGJhY2spIHtcclxuICAgICAgb25BcHBSb3V0ZSh7ZmVhdHVyZVJvdXRlOiAnL2F1dGhmZWVkYmFjaycscm91dGU6Jy9hdXRoJ30pO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5hdXRoRmVlZGJhY2tdKTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMudmFsdWVDaGFuZ2VkKHtcclxuICAgICAgICBwcm9wTmFtZTogbmFtZSxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gXHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgIFxyXG4gICAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG5hbWU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgLy8gIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17Y29uZmlybX1cclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdjb25maXJtJ1xyXG4gICAgICAgICAgICBuYW1lPSdjb25maXJtJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nQ29uZmlybSBuZXcgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzPXtbdmFsaWRhdGlvblR5cGVzLlBBU1NXT1JEU19NQVRDSF9WQUxJREFUSU9OXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICBcclxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9J2NoYW5nZS1wYXNzLWJ0bidcclxuICAgICAgICAgICAgb25DbGljaz17Y2hhbmdlUGFzc3dvcmR9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgID5DSEFOR0U8L0J1dHRvbj5cclxuICAgXHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiQ2hhbmdlUGFzc3dvcmQiLCJjaGFuZ2VQYXNzd29yZCIsInN0YXRlIiwiZGlzcGF0Y2giLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwidG9rZW4iLCJ1c2VVc2VyTmFtZSIsIm9uQXBwUm91dGUiLCJ1c2VBcHBSb3V0ZSIsImRldmljZSIsInVzZU1lZGlhUXVlcnkiLCJwYXNzd29yZCIsImNvbmZpcm0iLCJlcnJvciIsInVzZUVmZmVjdCIsInVybCIsIlVSTCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInVybHRva2VuIiwic2VhcmNoUGFyYW1zIiwiZ2V0IiwiYWN0aW9ucyIsImF1dGhGZWVkYmFjayIsImZlYXR1cmVSb3V0ZSIsInJvdXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsInByb3BOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFjZSxTQUFTQSxjQUFULENBQXdCO0FBQUNDLEVBQUFBO0FBQUQsQ0FBeEIsRUFBMEM7QUFDdkQsUUFBTTtBQUFFQyxJQUFBQSxLQUFGO0FBQVNDLElBQUFBO0FBQVQsTUFBc0JDLGNBQWMsRUFBMUM7QUFDQSxRQUFNO0FBQUVELElBQUFBLFFBQVEsRUFBRUU7QUFBWixNQUE2QkMsY0FBYyxFQUFqRDtBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFZQyxXQUFXLEVBQTdCO0FBQ0EsUUFBTTtBQUFDQyxJQUFBQTtBQUFELE1BQWVDLFdBQVcsRUFBaEM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUVBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxPQUFaO0FBQXFCQyxJQUFBQTtBQUFyQixNQUErQmIsS0FBckM7QUFFQWMsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJQyxHQUFHLEdBQUcsSUFBSUMsR0FBSixDQUFRQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLElBQXhCLENBQVY7QUFDQSxRQUFJQyxRQUFRLEdBQUdMLEdBQUcsQ0FBQ00sWUFBSixDQUFpQkMsR0FBakIsQ0FBcUIsT0FBckIsQ0FBZjs7QUFFQSxRQUFJRixRQUFKLEVBQWM7QUFDWm5CLE1BQUFBLFFBQVEsQ0FBQ3NCLGVBQUEsQ0FBd0I7QUFBRWxCLFFBQUFBLEtBQUssRUFBRWU7QUFBVCxPQUF4QixDQUFELENBQVI7QUFDRDtBQUNGLEdBUFEsRUFPTixFQVBNLENBQVQ7QUFTQU4sRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJZCxLQUFLLENBQUN3QixZQUFWLEVBQXdCO0FBQ3RCakIsTUFBQUEsVUFBVSxDQUFDO0FBQUNrQixRQUFBQSxZQUFZLEVBQUUsZUFBZjtBQUErQkMsUUFBQUEsS0FBSyxFQUFDO0FBQXJDLE9BQUQsQ0FBVjtBQUNEO0FBQ0YsR0FKUSxFQUlOLENBQUMxQixLQUFLLENBQUN3QixZQUFQLENBSk0sQ0FBVDs7QUFNQSxXQUFTRyxZQUFULENBQXNCQyxDQUF0QixFQUF5QjtBQUN2QixVQUFNO0FBQUVDLE1BQUFBLElBQUY7QUFBUUMsTUFBQUE7QUFBUixRQUFrQkYsQ0FBQyxDQUFDRyxNQUExQjtBQUNBOUIsSUFBQUEsUUFBUSxDQUNOc0IsWUFBQSxDQUFxQjtBQUNuQlMsTUFBQUEsUUFBUSxFQUFFSCxJQURTO0FBRW5CQyxNQUFBQSxLQUZtQjtBQUduQjdCLE1BQUFBLFFBSG1CO0FBSW5CRCxNQUFBQTtBQUptQixLQUFyQixDQURNLENBQVI7QUFRRDs7QUFFRCxTQUNFLEVBQUMsSUFBRDtBQUFNLElBQUEsS0FBSyxFQUFFUyxNQUFNLEtBQUssT0FBWCxHQUFxQixHQUFyQixHQUEyQjtBQUF4QyxLQUNFLEVBQUMsS0FBRCxRQUVJLEVBQUMsU0FBRDtBQUNFLElBQUEsS0FBSyxFQUFFRSxRQURUO0FBRUUsSUFBQSxJQUFJLEVBQUMsVUFGUDtBQUdFLElBQUEsRUFBRSxFQUFDLFVBSEw7QUFJRSxJQUFBLElBQUksRUFBQyxVQUpQO0FBS0UsSUFBQSxXQUFXLEVBQUMsb0JBTGQ7QUFNRSxJQUFBLFFBQVEsRUFBRWdCLFlBTlo7O0FBQUEsSUFGSixFQVdJLEVBQUMsU0FBRDtBQUNFLElBQUEsS0FBSyxFQUFFZixPQURUO0FBRUUsSUFBQSxJQUFJLEVBQUMsVUFGUDtBQUdFLElBQUEsRUFBRSxFQUFDLFNBSEw7QUFJRSxJQUFBLElBQUksRUFBQyxTQUpQO0FBS0UsSUFBQSxXQUFXLEVBQUMsc0JBTGQ7QUFNRSxJQUFBLFFBQVEsRUFBRWUsWUFOWjs7QUFBQSxJQVhKLEVBb0JJLEVBQUMsTUFBRDtBQUNFLElBQUEsSUFBSSxFQUFDLFFBRFA7QUFHRSxtQkFBWSxpQkFIZDtBQUlFLElBQUEsT0FBTyxFQUFFNUI7QUFKWCxjQXBCSixDQURGLENBREY7QUFpQ0Q7Ozs7In0=
