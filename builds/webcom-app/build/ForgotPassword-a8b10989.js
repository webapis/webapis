import { u as useAppRoute, b as useMediaQuery, c as useAuthContext, p, h, v as valueChanged } from './index-50d7d53d.js';
import { T as TextInput } from './index-e73746c1.js';
import { P as Paper, G as Grid } from './Grid-5a5b9b75.js';
import './style-29ff44a5.js';
import { B as Button } from './index-8cea4d38.js';

function RequestPassChange({
  forgotPassword
}) {
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    email
  } = state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  p(() => {
    if (state.authFeedback) {
      debugger;
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);
  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(TextInput, {
    value: email,
    placeholder: "email",
    name: "email",
    onChange: handleChange,
    type: "email",
    id: "email" // validationTypes={[
    //   validationTypes.EMAIL_FORMAT_VALIDATION,
    //   validationTypes.EMAIL_NOT_REGISTERED,
    // ]}

  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: forgotPassword,
    "data-testid": "requestpasschange-btn"
  }, "SEND")));
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtYThiMTA5ODkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9mZWF0dXJlcy9hdXRoZW50aWNhdGlvbi91aS1jb21wb25lbnRzL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgVGV4dElucHV0IGZyb20gJ2NvbnRyb2xzL3RleHQtaW5wdXQnO1xyXG5cclxuaW1wb3J0IEJ1dHRvbiBmcm9tICdjb250cm9scy9idXR0b24nO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi4vc3RhdGUvYXV0aC1jb250ZXh0JztcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9zdGF0ZS9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJ2NvbXBvbmVudHMvbGF5b3V0L3VzZU1lZGlhUXVlcnknO1xyXG5pbXBvcnQgeyBQYXBlciB9IGZyb20gJ2NvbXBvbmVudHMvbGF5b3V0L1BhcGVyJztcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJ2NvbXBvbmVudHMvbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQge3VzZUFwcFJvdXRlfSBmcm9tICdjb21wb25lbnRzL2FwcC1yb3V0ZSdcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVxdWVzdFBhc3NDaGFuZ2Uoe2ZvcmdvdFBhc3N3b3JkfSkge1xyXG4gIGNvbnN0IHtvbkFwcFJvdXRlfT0gdXNlQXBwUm91dGUoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIGNvbnN0IHsgZGlzcGF0Y2gsIHN0YXRlIH0gPSB1c2VBdXRoQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZW1haWwgfSA9IHN0YXRlO1xyXG5cclxuIFxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMudmFsdWVDaGFuZ2VkKHsgcHJvcE5hbWU6IG5hbWUsIHZhbHVlLCBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS5hdXRoRmVlZGJhY2spIHtcclxuICAgICAgZGVidWdnZXI7XHJcbiAgICAgIG9uQXBwUm91dGUoe2ZlYXR1cmVSb3V0ZTogJy9hdXRoZmVlZGJhY2snLHJvdXRlOicvYXV0aCd9KTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUuYXV0aEZlZWRiYWNrXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgXHJcbiAgICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J2VtYWlsJ1xyXG4gICAgICAgICAgICBuYW1lPSdlbWFpbCdcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgLy8gdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAvLyAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgICAgLy8gXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2ZvcmdvdFBhc3N3b3JkfVxyXG4gIFxyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cInJlcXVlc3RwYXNzY2hhbmdlLWJ0blwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFNFTkRcclxuICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgXHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiUmVxdWVzdFBhc3NDaGFuZ2UiLCJmb3Jnb3RQYXNzd29yZCIsIm9uQXBwUm91dGUiLCJ1c2VBcHBSb3V0ZSIsImRldmljZSIsInVzZU1lZGlhUXVlcnkiLCJkaXNwYXRjaCIsInN0YXRlIiwidXNlQXV0aENvbnRleHQiLCJlbWFpbCIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJhY3Rpb25zIiwicHJvcE5hbWUiLCJ1c2VFZmZlY3QiLCJhdXRoRmVlZGJhY2siLCJmZWF0dXJlUm91dGUiLCJyb3V0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBWWUsU0FBU0EsaUJBQVQsQ0FBMkI7QUFBQ0MsRUFBQUE7QUFBRCxDQUEzQixFQUE2QztBQUMxRCxRQUFNO0FBQUNDLElBQUFBO0FBQUQsTUFBY0MsV0FBVyxFQUEvQjtBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBO0FBQVosTUFBc0JDLGNBQWMsRUFBMUM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBWUYsS0FBbEI7O0FBR0EsV0FBU0csWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQVIsSUFBQUEsUUFBUSxDQUFDUyxZQUFBLENBQXFCO0FBQUVDLE1BQUFBLFFBQVEsRUFBRUosSUFBWjtBQUFrQkMsTUFBQUEsS0FBbEI7QUFBeUJQLE1BQUFBLFFBQXpCO0FBQW1DQyxNQUFBQTtBQUFuQyxLQUFyQixDQUFELENBQVI7QUFDRDs7QUFFRFUsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJVixLQUFLLENBQUNXLFlBQVYsRUFBd0I7QUFDdEI7QUFDQWhCLE1BQUFBLFVBQVUsQ0FBQztBQUFDaUIsUUFBQUEsWUFBWSxFQUFFLGVBQWY7QUFBK0JDLFFBQUFBLEtBQUssRUFBQztBQUFyQyxPQUFELENBQVY7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDYixLQUFLLENBQUNXLFlBQVAsQ0FMTSxDQUFUO0FBT0EsU0FDRSxFQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRWQsTUFBTSxLQUFLLE9BQVgsR0FBcUIsR0FBckIsR0FBMkI7QUFBeEMsS0FDRSxFQUFDLEtBQUQsUUFFSSxFQUFDLFNBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUssS0FEVDtBQUVFLElBQUEsV0FBVyxFQUFDLE9BRmQ7QUFHRSxJQUFBLElBQUksRUFBQyxPQUhQO0FBSUUsSUFBQSxRQUFRLEVBQUVDLFlBSlo7QUFLRSxJQUFBLElBQUksRUFBQyxPQUxQO0FBTUUsSUFBQSxFQUFFLEVBQUMsT0FOTDtBQVFFO0FBQ0E7QUFDQTs7QUFWRixJQUZKLEVBY0ksRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRVQsY0FIWDtBQUtFLG1CQUFZO0FBTGQsWUFkSixDQURGLENBREY7QUE2QkQ7Ozs7In0=
