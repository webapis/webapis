import { h } from './index-5361741e.js';
import { B as Button, T as TextInput } from './index-0ee26d97.js';
import { A as Alert } from './index-bcd4f557.js';

function Signup(props) {
  const {
    username,
    password,
    email,
    loading,
    onSignup,
    onChange,
    validation,
    onBlur,
    onFocus,
    error
  } = props;
  return h("div", {
    className: "col-md-4 border mx-auto rounded",
    style: {
      margin: 15,
      padding: 16
    }
  }, loading && h("div", {
    className: "progress",
    style: "height: 5px;"
  }, h("div", {
    className: "progress-bar progress-bar-striped progress-bar-animated",
    role: "progressbar",
    "aria-valuenow": "100",
    "aria-valuemin": "0",
    "aria-valuemax": "100",
    style: "width: 100%"
  })), error && h(Alert, {
    alert: "danger",
    message: error.message
  }), h(TextInput, {
    onBlur: onBlur,
    onFocus: onFocus,
    label: "Username",
    value: username,
    onChange: onChange,
    type: "text",
    "data-testid": "username",
    name: "username",
    isValid: validation && validation['username'].isValid,
    message: validation && validation['username'].message
  }), h(TextInput, {
    onBlur: onBlur,
    onFocus: onFocus,
    label: "Email",
    onChange: onChange,
    value: email,
    type: "email",
    "data-testid": "email",
    name: "email",
    isValid: validation && validation['email'].isValid,
    message: validation && validation['email'].message
  }), h(TextInput, {
    onBlur: onBlur,
    onFocus: onFocus,
    label: "Password",
    onChange: onChange,
    value: password,
    type: "password",
    "data-testid": "password",
    name: "password",
    isValid: validation && validation['password'].isValid,
    message: validation && validation['password'].message
  }), h(Button, {
    type: "button",
    onClick: onSignup,
    id: "signup-btn",
    "data-testid": "signup-btn",
    loading: loading,
    title: "Signup",
    bg: "primary"
  }));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTQ4Y2E3Y2M1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvZmVhdHVyZXMvYXV0aGVudGljYXRpb24vdWktY29tcG9uZW50cy9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcblxyXG5pbXBvcnQgQnV0dG9uIGZyb20gJ2NvbnRyb2xzL2J1dHRvbidcclxuaW1wb3J0IFRleHRJbnB1dCBmcm9tICdjb250cm9scy90ZXh0LWlucHV0J1xyXG5pbXBvcnQgQWxlcnQgZnJvbSAnY29udHJvbHMvYWxlcnQnXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpZ251cChwcm9wcykge1xyXG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbCwgbG9hZGluZywgb25TaWdudXAsIG9uQ2hhbmdlLCB2YWxpZGF0aW9uLCBvbkJsdXIsIG9uRm9jdXMsIGVycm9yIH0gPSBwcm9wcztcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtNCBib3JkZXIgbXgtYXV0byByb3VuZGVkXCIgc3R5bGU9e3sgbWFyZ2luOiAxNSwgcGFkZGluZzogMTYgfX0+XHJcbiAgICAgIHtsb2FkaW5nICYmIDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3NcIiBzdHlsZT1cImhlaWdodDogNXB4O1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1zdHJpcGVkIHByb2dyZXNzLWJhci1hbmltYXRlZFwiIHJvbGU9XCJwcm9ncmVzc2JhclwiIGFyaWEtdmFsdWVub3c9XCIxMDBcIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2Pn1cclxuICAgICAge2Vycm9yICYmIDxBbGVydCBhbGVydD1cImRhbmdlclwiIG1lc3NhZ2U9e2Vycm9yLm1lc3NhZ2V9IC8+fVxyXG4gICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XHJcbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cclxuICAgICAgICBsYWJlbD1cIlVzZXJuYW1lXCJcclxuICAgICAgICB2YWx1ZT17dXNlcm5hbWV9XHJcbiAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxyXG4gICAgICAgIHR5cGU9J3RleHQnXHJcbiAgICAgICAgZGF0YS10ZXN0aWQ9J3VzZXJuYW1lJ1xyXG4gICAgICAgIG5hbWU9J3VzZXJuYW1lJ1xyXG4gIFxyXG4gICAgICAgIGlzVmFsaWQ9e3ZhbGlkYXRpb24gJiYgdmFsaWRhdGlvblsndXNlcm5hbWUnXS5pc1ZhbGlkfVxyXG4gICAgICAgIG1lc3NhZ2U9e3ZhbGlkYXRpb24gJiYgdmFsaWRhdGlvblsndXNlcm5hbWUnXS5tZXNzYWdlfVxyXG5cclxuICAgICAgLz5cclxuICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgIG9uQmx1cj17b25CbHVyfVxyXG4gICAgICAgIG9uRm9jdXM9e29uRm9jdXN9XHJcbiAgICAgICAgbGFiZWw9XCJFbWFpbFwiXHJcbiAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxyXG4gICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICBcclxuICAgICAgICB0eXBlPSdlbWFpbCdcclxuICAgICAgICBkYXRhLXRlc3RpZD0nZW1haWwnXHJcbiAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgaXNWYWxpZD17dmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uWydlbWFpbCddLmlzVmFsaWR9XHJcbiAgICAgICAgbWVzc2FnZT17dmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uWydlbWFpbCddLm1lc3NhZ2V9XHJcblxyXG4gICAgICAvPlxyXG4gICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgb25CbHVyPXtvbkJsdXJ9XHJcbiAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cclxuICAgICAgICBsYWJlbD1cIlBhc3N3b3JkXCJcclxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XHJcbiAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgIFxyXG4gICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgIGRhdGEtdGVzdGlkPSdwYXNzd29yZCdcclxuICAgICAgICBuYW1lPSdwYXNzd29yZCdcclxuICAgICAgICBpc1ZhbGlkPXt2YWxpZGF0aW9uICYmIHZhbGlkYXRpb25bJ3Bhc3N3b3JkJ10uaXNWYWxpZH1cclxuICAgICAgICBtZXNzYWdlPXt2YWxpZGF0aW9uICYmIHZhbGlkYXRpb25bJ3Bhc3N3b3JkJ10ubWVzc2FnZX1cclxuXHJcbiAgICAgIC8+XHJcbiAgICAgIDxCdXR0b25cclxuXHJcbiAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgIG9uQ2xpY2s9e29uU2lnbnVwfVxyXG4gICAgICAgIGlkPSdzaWdudXAtYnRuJ1xyXG4gICAgICAgIGRhdGEtdGVzdGlkPVwic2lnbnVwLWJ0blwiXHJcbiAgICAgICAgbG9hZGluZz17bG9hZGluZ31cclxuICAgICAgICB0aXRsZT1cIlNpZ251cFwiXHJcbiAgICAgICAgYmc9XCJwcmltYXJ5XCJcclxuICAgICAgLz5cclxuXHJcblxyXG5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlNpZ251cCIsInByb3BzIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImVtYWlsIiwibG9hZGluZyIsIm9uU2lnbnVwIiwib25DaGFuZ2UiLCJ2YWxpZGF0aW9uIiwib25CbHVyIiwib25Gb2N1cyIsImVycm9yIiwibWFyZ2luIiwicGFkZGluZyIsIm1lc3NhZ2UiLCJpc1ZhbGlkIl0sIm1hcHBpbmdzIjoiOzs7O0FBS2UsU0FBU0EsTUFBVCxDQUFnQkMsS0FBaEIsRUFBdUI7QUFDcEMsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBLFFBQVo7QUFBc0JDLElBQUFBLEtBQXRCO0FBQTZCQyxJQUFB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
