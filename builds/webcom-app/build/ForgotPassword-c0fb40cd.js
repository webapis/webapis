import { u as useAppRoute, b as useMediaQuery, c as useAuthContext, p, h, v as valueChanged } from './index-3889c51c.js';
import { T as TextInput } from './index-263f83bd.js';
import { P as Paper, G as Grid } from './Grid-dbb3ce9a.js';
import { B as Button } from './index-21204080.js';

function RequestPassChange({
  forgotPassword
}) {
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    email
  } = state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  p(() => {
    if (state.authFeedback) {
      debugger;
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);
  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(TextInput, {
    value: email,
    placeholder: "email",
    name: "email",
    onChange: handleChange,
    type: "email",
    id: "email" // validationTypes={[
    //   validationTypes.EMAIL_FORMAT_VALIDATION,
    //   validationTypes.EMAIL_NOT_REGISTERED,
    // ]}

  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: forgotPassword,
    "data-testid": "requestpasschange-btn"
  }, "SEND")));
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtYzBmYjQwY2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9mZWF0dXJlcy9hdXRoZW50aWNhdGlvbi91aS1jb21wb25lbnRzL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgVGV4dElucHV0IGZyb20gJ2NvbnRyb2xzL3RleHQtaW5wdXQnO1xyXG5cclxuaW1wb3J0IEJ1dHRvbiBmcm9tICdjb250cm9scy9idXR0b24nO1xyXG4vL2ltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IHsgdXNlQXV0aENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9hdXRoLWNvbnRleHQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL3N0YXRlL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyB1c2VNZWRpYVF1ZXJ5IH0gZnJvbSAnY29tcG9uZW50cy9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSAnY29tcG9uZW50cy9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnY29tcG9uZW50cy9sYXlvdXQvR3JpZCc7XHJcbmltcG9ydCB7dXNlQXBwUm91dGV9IGZyb20gJ2NvbXBvbmVudHMvYXBwLXJvdXRlJ1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZXF1ZXN0UGFzc0NoYW5nZSh7Zm9yZ290UGFzc3dvcmR9KSB7XHJcbiAgY29uc3Qge29uQXBwUm91dGV9PSB1c2VBcHBSb3V0ZSgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBlbWFpbCB9ID0gc3RhdGU7XHJcblxyXG4gXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgZGlzcGF0Y2goYWN0aW9ucy52YWx1ZUNoYW5nZWQoeyBwcm9wTmFtZTogbmFtZSwgdmFsdWUsIGRpc3BhdGNoLCBzdGF0ZSB9KSk7XHJcbiAgfVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLmF1dGhGZWVkYmFjaykge1xyXG4gICAgICBkZWJ1Z2dlcjtcclxuICAgICAgb25BcHBSb3V0ZSh7ZmVhdHVyZVJvdXRlOiAnL2F1dGhmZWVkYmFjaycscm91dGU6Jy9hdXRoJ30pO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5hdXRoRmVlZGJhY2tdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICBcclxuICAgICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsfVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nZW1haWwnXHJcbiAgICAgICAgICAgIG5hbWU9J2VtYWlsJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB0eXBlPSdlbWFpbCdcclxuICAgICAgICAgICAgaWQ9J2VtYWlsJ1xyXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgLy8gICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIC8vICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX05PVF9SRUdJU1RFUkVELFxyXG4gICAgICAgICAgICAvLyBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgY2xhc3NOYW1lPSdidG4nXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17Zm9yZ290UGFzc3dvcmR9XHJcbiAgXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwicmVxdWVzdHBhc3NjaGFuZ2UtYnRuXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgU0VORFxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICBcclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJSZXF1ZXN0UGFzc0NoYW5nZSIsImZvcmdvdFBhc3N3b3JkIiwib25BcHBSb3V0ZSIsInVzZUFwcFJvdXRlIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsImRpc3BhdGNoIiwic3RhdGUiLCJ1c2VBdXRoQ29udGV4dCIsImVtYWlsIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsImFjdGlvbnMiLCJwcm9wTmFtZSIsInVzZUVmZmVjdCIsImF1dGhGZWVkYmFjayIsImZlYXR1cmVSb3V0ZSIsInJvdXRlIl0sIm1hcHBpbmdzIjoiOzs7OztBQVllLFNBQVNBLGlCQUFULENBQTJCO0FBQUNDLEVBQUFBO0FBQUQsQ0FBM0IsRUFBNkM7QUFDMUQsUUFBTTtBQUFDQyxJQUFBQTtBQUFELE1BQWNDLFdBQVcsRUFBL0I7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQTtBQUFaLE1BQXNCQyxjQUFjLEVBQTFDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVlGLEtBQWxCOztBQUdBLFdBQVNHLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FSLElBQUFBLFFBQVEsQ0FBQ1MsWUFBQSxDQUFxQjtBQUFFQyxNQUFBQSxRQUFRLEVBQUVKLElBQVo7QUFBa0JDLE1BQUFBLEtBQWxCO0FBQXlCUCxNQUFBQSxRQUF6QjtBQUFtQ0MsTUFBQUE7QUFBbkMsS0FBckIsQ0FBRCxDQUFSO0FBQ0Q7O0FBRURVLEVBQUFBLENBQVMsQ0FBQyxNQUFNO0FBQ2QsUUFBSVYsS0FBSyxDQUFDVyxZQUFWLEVBQXdCO0FBQ3RCO0FBQ0FoQixNQUFBQSxVQUFVLENBQUM7QUFBQ2lCLFFBQUFBLFlBQVksRUFBRSxlQUFmO0FBQStCQyxRQUFBQSxLQUFLLEVBQUM7QUFBckMsT0FBRCxDQUFWO0FBQ0Q7QUFDRixHQUxRLEVBS04sQ0FBQ2IsS0FBSyxDQUFDVyxZQUFQLENBTE0sQ0FBVDtBQU9BLFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVkLE1BQU0sS0FBSyxPQUFYLEdBQXFCLEdBQXJCLEdBQTJCO0FBQXhDLEtBQ0UsRUFBQyxLQUFELFFBRUksRUFBQyxTQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVLLEtBRFQ7QUFFRSxJQUFBLFdBQVcsRUFBQyxPQUZkO0FBR0UsSUFBQSxJQUFJLEVBQUMsT0FIUDtBQUlFLElBQUEsUUFBUSxFQUFFQyxZQUpaO0FBS0UsSUFBQSxJQUFJLEVBQUMsT0FMUDtBQU1FLElBQUEsRUFBRSxFQUFDLE9BTkw7QUFRRTtBQUNBO0FBQ0E7O0FBVkYsSUFGSixFQWNJLEVBQUMsTUFBRDtBQUNFLElBQUEsU0FBUyxFQUFDLEtBRFo7QUFFRSxJQUFBLElBQUksRUFBQyxRQUZQO0FBR0UsSUFBQSxPQUFPLEVBQUVULGNBSFg7QUFLRSxtQkFBWTtBQUxkLFlBZEosQ0FERixDQURGO0FBNkJEOzs7OyJ9
