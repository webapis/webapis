import { u as useAuthContext, p, h } from './index-bed87f77.js';
import { B as Button, v as validationTypes, I as Input, F as Form, c as changePassword } from './actions-9e603fc8.js';

function ChangePassword() {
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    password,
    confirm,
    current,
    emailorusername,
    token,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var token = url.searchParams.get('token');
  }, []);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
  }

  function handleChangePass() {
    changePassword({
      dispatch,
      state
    });
  }

  return h("div", {
    "data-testid": "signupform",
    className: "auth-form"
  }, h(Form, {
    formTitle: "Change Password",
    error: error
  }, !token && h(Input, {
    value: emailorusername,
    type: "text",
    id: "emailorusername",
    name: "emailorusername",
    placeholder: "Enter email or username",
    onChange: handleChange,
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), !token && h(Input, {
    value: current,
    type: "password",
    id: "current",
    name: "current",
    onChange: handleChange,
    placeholder: "Enter current password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: handleChangePass,
    title: "Change"
  })));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtMTIyNzkzY2IuanMiLCJzb3VyY2VzIjpbIi4uL2F1dGgvQ2hhbmdlUGFzc3dvcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgRm9ybSBmcm9tICcuLi9mb3JtL0Zvcm0nO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XHJcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi9hdXRoLWNvbnRleHQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IGdldFRva2VuRnJvbVVybCB9IGZyb20gJy4vYWN0aW9ucyc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENoYW5nZVBhc3N3b3JkKCkge1xyXG4gIGNvbnN0IHsgZGlzcGF0Y2gsIHN0YXRlIH0gPSB1c2VBdXRoQ29udGV4dCgpO1xyXG5cclxuICBjb25zdCB7IHBhc3N3b3JkLCBjb25maXJtLCBjdXJyZW50LCBlbWFpbG9ydXNlcm5hbWUsIHRva2VuLCBlcnJvciB9ID0gc3RhdGU7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsZXQgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB2YXIgdG9rZW4gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndG9rZW4nKTtcclxuICAgIGlmICh0b2tlbikge1xyXG4gICAgICBhY3Rpb25zLmdldFRva2VuRnJvbVVybCh7IHRva2VuLCBkaXNwYXRjaCwgc3RhdGUgfSk7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7IHByb3BOYW1lOiBuYW1lLCB2YWx1ZSwgZGlzcGF0Y2gsIHN0YXRlIH0pO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VQYXNzKCkge1xyXG4gICAgYWN0aW9ucy5jaGFuZ2VQYXNzd29yZCh7IGRpc3BhdGNoLCBzdGF0ZSB9KTtcclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJzaWdudXBmb3JtXCIgY2xhc3NOYW1lPVwiYXV0aC1mb3JtXCI+XHJcbiAgICAgIDxGb3JtIGZvcm1UaXRsZT1cIkNoYW5nZSBQYXNzd29yZFwiIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgeyF0b2tlbiAmJiAoXHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsb3J1c2VybmFtZX1cclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICBpZD1cImVtYWlsb3J1c2VybmFtZVwiXHJcbiAgICAgICAgICAgIG5hbWU9XCJlbWFpbG9ydXNlcm5hbWVcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGVtYWlsIG9yIHVzZXJuYW1lXCJcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX09SX0VNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5JTlZBTElEX0NSRURFTlRJQUxTLFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICApfVxyXG4gICAgICAgIHshdG9rZW4gJiYgKFxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtjdXJyZW50fVxyXG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICBpZD1cImN1cnJlbnRcIlxyXG4gICAgICAgICAgICBuYW1lPVwiY3VycmVudFwiXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgY3VycmVudCBwYXNzd29yZFwiXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTVBUWV9TVFJJTkdfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuSU5WQUxJRF9DUkVERU5USUFMUyxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgKX1cclxuXHJcbiAgICAgICAgPElucHV0XHJcbiAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBuZXcgcGFzc3dvcmRcIlxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8SW5wdXRcclxuICAgICAgICAgIHZhbHVlPXtjb25maXJtfVxyXG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIGlkPVwiY29uZmlybVwiXHJcbiAgICAgICAgICBuYW1lPVwiY29uZmlybVwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbmZpcm0gbmV3IHBhc3N3b3JkXCJcclxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT05dfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICBpZD1cImNoYW5nZS1wYXNzLWJ0blwiXHJcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cImNoYW5nZS1wYXNzLWJ0blwiXHJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDaGFuZ2VQYXNzfVxyXG4gICAgICAgICAgdGl0bGU9XCJDaGFuZ2VcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvRm9ybT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNoYW5nZVBhc3N3b3JkIiwiZGlzcGF0Y2giLCJzdGF0ZSIsInVzZUF1dGhDb250ZXh0IiwicGFzc3dvcmQiLCJjb25maXJtIiwiY3VycmVudCIsImVtYWlsb3J1c2VybmFtZSIsInRva2VuIiwiZXJyb3IiLCJ1c2VFZmZlY3QiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJzZWFyY2hQYXJhbXMiLCJnZXQiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwiaGFuZGxlQ2hhbmdlUGFzcyIsImFjdGlvbnMiLCJ2YWxpZGF0aW9uVHlwZXMiLCJVU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIklOVkFMSURfQ1JFREVOVElBTFMiLCJFTVBUWV9TVFJJTkdfVkFMSURBVElPTiIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIiwiUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT04iXSwi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
