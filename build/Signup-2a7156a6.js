import { u as useAuthContext, h } from './index-bed87f77.js';
import { B as Button, v as validationTypes, I as Input, F as Form, s as signup, a as valueChanged } from './actions-9e603fc8.js';

function Signup() {
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    username,
    password,
    email
  } = state;

  function handleSignup() {
    dispatch(signup({
      dispatch,
      state
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h("div", {
    "data-testid": "signupform",
    className: "auth-form"
  }, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleSignup,
    id: "signup-btn",
    title: "Signup"
  })));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTJhNzE1NmE2LmpzIiwic291cmNlcyI6WyIuLi9hdXRoL1NpZ251cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgRm9ybSBmcm9tICcuLi9mb3JtL0Zvcm0nO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0IHsgdXNlQXV0aENvbnRleHQgfSBmcm9tICcuL2F1dGgtY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lnbnVwKCkge1xyXG4gIGNvbnN0IHsgZGlzcGF0Y2gsIHN0YXRlIH0gPSB1c2VBdXRoQ29udGV4dCgpO1xyXG5cclxuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwgfSA9IHN0YXRlO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVTaWdudXAoKSB7XHJcbiAgICBkaXNwYXRjaChhY3Rpb25zLnNpZ251cCh7IGRpc3BhdGNoLCBzdGF0ZSB9KSk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMudmFsdWVDaGFuZ2VkKHsgcHJvcE5hbWU6IG5hbWUsIHZhbHVlLCBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBkYXRhLXRlc3RpZD1cInNpZ251cGZvcm1cIiBjbGFzc05hbWU9XCJhdXRoLWZvcm1cIj5cclxuICAgICAgPEZvcm0gZm9ybVRpdGxlPVwiU2lnbiB1cFwiPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIGlkPVwidXNlcm5hbWVcIlxyXG4gICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwidXNlcm5hbWVcIlxyXG4gICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX1RBS0VOLFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZW1haWxcIlxyXG4gICAgICAgICAgdHlwZT1cImVtYWlsXCJcclxuICAgICAgICAgIGlkPVwiZW1haWxcIlxyXG4gICAgICAgICAgbmFtZT1cImVtYWlsXCJcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5SRUdJU1RFUkVEX0VNQUlMLFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTaWdudXB9XHJcbiAgICAgICAgICBpZD1cInNpZ251cC1idG5cIlxyXG4gICAgICAgICAgdGl0bGU9XCJTaWdudXBcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvRm9ybT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlNpZ251cCIsImRpc3BhdGNoIiwic3RhdGUiLCJ1c2VBdXRoQ29udGV4dCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsImhhbmRsZVNpZ251cCIsImFjdGlvbnMiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJ2YWxpZGF0aW9uVHlwZXMiLCJVU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTiIsIlVTRVJOQU1FX1RBS0VOIiwiRU1BSUxfRk9STUFUX1ZBTElEQVRJT04iLCJSRUdJU1RFUkVEX0VNQUlMIiwiUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7OztBQVFlLFNBQVNBLE1BQVQsR0FBa0I7QUFDL0IsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBO0FBQVosTUFBc0JDLGNBQWMsRUFBMUM7QUFFQSxRQUFNO0FBQUVDLElBQUFBLFFBQUY7QUFBWUMsSUFBQUEsUUFBWjtBQUFzQkMsSUFBQUE7QUFBdEIsTUFBZ0NKLEtBQXRDOztBQUVBLFdBQVNLLFlBQVQsR0FBd0I7QUFDdEJOLElBQUFBLFFBQVEsQ0FBQ08sTUFBQSxDQUFlO0FBQUVQLE1BQUFBLFFBQUY7QUFBWUMsTUFBQUE7QUFBWixLQUFmLENBQUQsQ0FBUjtBQUNEOztBQUNELFdBQVNPLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FaLElBQUFBLFFBQVEsQ0FBQ08sWUFBQSxDQUFxQjtBQUFFTSxNQUFBQSxRQUFRLEVBQUVILElBQVo7QUFBa0JDLE1BQUFBLEtBQWxCO0FBQXlCWCxNQUFBQSxRQUF6QjtBQUFtQ0MsTUFBQUE7QUFBbkMsS0FBckIsQ0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsU0FDRTtBQUFLLG1CQUFZLFlBQWpCO0FBQThCLElBQUEsU0FBUyxFQUFDO0FBQXhDLEtBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUUsUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFSyxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsTUFIUDtBQUlFLElBQUEsRUFBRSxFQUFDLFVBSkw7QUFLRSxJQUFBLElBQUksRUFBQyxVQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMsVUFOZDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZNLGVBQWUsQ0FBQ0MsMEJBREQsRUFFZkQsZUFBZSxDQUFDRSxjQUZEO0FBUG5CLElBREYsRUFhRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRVIsWUFEWjtBQUVFLElBQUEsS0FBSyxFQUFFSCxLQUZUO0FBR0UsSUFBQSxXQUFXLEVBQUMsT0FIZDtBQUlFLElBQUEsSUFBSSxFQUFDLE9BSlA7QUFLRSxJQUFBLEVBQUUsRUFBQyxPQUxMO0FBTUUsSUFBQSxJQUFJLEVBQUMsT0FOUDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZTLGVBQWUsQ0FBQ0csdUJBREQsRUFFZkgsZUFBZSxDQUFDSSxnQkFGRDtBQVBuQixJQWJGLEVBeUJFLEVBQUMsS0FBRDtBQUNFLElBQUEsUUFBUSxFQUFFVixZQURaO0FBRUUsSUFBQSxLQUFLLEVBQUVKLFFBRlQ7QUFHRSxJQUFBLFdBQVcsRUFBQyxVQUhkO0FBSUUsSUFBQSxJQUFJLEVBQUMsVUFKUDtBQUtFLElBQUEsRUFBRSxFQUFDLFVBTEw7QUFNRSxJQUFBLElBQUksRUFBQyxVQU5QO0FBT0UsSUFBQSxlQUFlLEVBQUUsQ0FBQ1UsZUFBZSxDQUFDSywwQkFBakI7QUFQbkIsSUF6QkYsRUFrQ0UsRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRWIsWUFIWDtBQUlFLElBQUEsRUFBRSxFQUFDLFlBSkw7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBbENGLENBREYsQ0FERjtBQThDRDs7OzsifQ==
