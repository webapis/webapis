import { c as useAuthContext, a as useAppRoute, b as useMediaQuery, p, h, v as validationTypes, e as valueChanged } from './index-58f1b195.js';
import { P as Paper, F as Form, I as Input, G as Grid } from './Grid-2301840b.js';
import { A as AsyncButton } from './index-d62add4f.js';
import './style-632926cc.js';

function Signup({
  signup
}) {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    username,
    password,
    email,
    loading,
    error
  } = state;
  p(() => {
    if (state.user && state.user.token) {
      onAppRoute({
        featureRoute: '/',
        route: '/'
      });
    }
  }, [state.user]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Sign up",
    error: error
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN, validationTypes.EMPTY_STRING_VALIDATION]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(AsyncButton, {
    className: "btn",
    type: "button",
    onClick: signup,
    id: "signup-btn",
    "data-testid": "signup-btn",
    loading: loading
  }, "SIGNUP"))));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTQ5MWI5MDY3LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IEFzeW5jQnV0dG9uIGZyb20gJy4uL2NvbXBvbmVudHMvYXN5bmMtYnV0dG9uJ1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0IHsgdXNlQXV0aENvbnRleHQgfSBmcm9tICcuL2F1dGgtY29udGV4dCc7XHJcbmltcG9ydCB7IHVzZUZvcm1Db250ZXh0IH0gZnJvbSAnLi4vZm9ybS9mb3JtLWNvbnRleHQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuLi9sYXlvdXQvR3JpZCc7XHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSAnLi4vbGF5b3V0L1BhcGVyJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHt1c2VBcHBSb3V0ZX0gZnJvbSAnLi4vYXBwLXJvdXRlL0FwcFJvdXRlUHJvdmlkZXInXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpZ251cCh7c2lnbnVwfSkge1xyXG4gIGNvbnN0IHtzdGF0ZSxkaXNwYXRjaH09dXNlQXV0aENvbnRleHQoKVxyXG4gIGNvbnN0IHtvbkFwcFJvdXRlfSA9IHVzZUFwcFJvdXRlKCk7XHJcbiAgY29uc3QgeyBkZXZpY2UgfSA9IHVzZU1lZGlhUXVlcnkoKTtcclxuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwsbG9hZGluZyxlcnJvciB9ID0gc3RhdGU7XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS51c2VyICYmIHN0YXRlLnVzZXIudG9rZW4pIHtcclxuICAgICAgb25BcHBSb3V0ZSh7ZmVhdHVyZVJvdXRlOiAnLycscm91dGU6Jy8nfSk7XHJcbiAgICB9XHJcbiAgfSwgW3N0YXRlLnVzZXJdKTtcclxuXHJcbiBcclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBkaXNwYXRjaChcclxuICAgICAgYWN0aW9ucy52YWx1ZUNoYW5nZWQoe1xyXG4gICAgICAgIHByb3BOYW1lOiBuYW1lLFxyXG4gICAgICAgIHZhbHVlLFxyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgICAgIHN0YXRlLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J1NpZ24gdXAnIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgICBpZD0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIG5hbWU9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfVEFLRU4sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNUFRZX1NUUklOR19WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuUkVHSVNURVJFRF9FTUFJTCxcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEFzeW5jQnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3NpZ251cH1cclxuICAgICAgICAgICAgaWQ9J3NpZ251cC1idG4nXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic2lnbnVwLWJ0blwiXHJcbiAgICAgICAgICAgIGxvYWRpbmc9e2xvYWRpbmd9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFNJR05VUFxyXG4gICAgICAgICAgPC9Bc3luY0J1dHRvbj5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiU2lnbnVwIiwic2lnbnVwIiwic3RhdGUiLCJkaXNwYXRjaCIsInVzZUF1dGhDb250ZXh0Iiwib25BcHBSb3V0ZSIsInVzZUFwcFJvdXRlIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsImxvYWRpbmciLCJlcnJvciIsInVzZUVmZmVjdCIsInVzZXIiLCJ0b2tlbiIsImZlYXR1cmVSb3V0ZSIsInJvdXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsImFjdGlvbnMiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX0ZPUk1BVF9WQUxJREFUSU9OIiwiVVNFUk5BTUVfVEFLRU4iLCJFTVBUWV9TVFJJTkdfVkFMSURBVElPTiIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiUkVHSVNURVJFRF9FTUFJTCIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7OztBQWVlLFNBQVNBLE1BQVQsQ0FBZ0I7QUFBQ0MsRUFBQUE7QUFBRCxDQUFoQixFQUEwQjtBQUN2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
