import { j as v, p, h, w as List, x as ListItem } from './index-1e905026.js';

function reducerUnreadhangouts({
  unreadhangouts
}) {
  return unreadhangouts.reduce((accumulator, current, index) => {
    if (index === 0) {
      return accumulator = [{ ...current,
        messageCount: 1
      }];
    } else {
      const obj = accumulator.find(a => a.username === current.username && current.state === 'MESSANGER');

      if (obj) {
        const index = accumulator.findIndex(a => a.username === current.username); //if current exist inside accumilator map it to that object

        accumulator.splice(index, 1, { ...obj,
          messageCount: ++obj.messageCount
        });
      } else {
        //if current exist inside accumilator map it to that object
        accumulator.push({ ...current,
          messageCount: 1
        });
      }
    }

    return accumulator;
  }, []);
}

function UnreadHangouts({
  unreadhangouts,
  onSelectUnread
}) {
  const [items, setItems] = v([]);
  p(() => {
    if (unreadhangouts) {
      const reduced = reducerUnreadhangouts({
        unreadhangouts
      });
      setItems(reduced);
    }
  }, [unreadhangouts]);
  return h("div", {
    "data-testid": "unreadhangouts",
    style: {
      paddingTop: 68
    }
  }, h(List, null, items && items.length > 0 && items.map(u => {
    return h(ListItem, {
      onClick: onSelectUnread,
      id: u.username
    }, u.username, " messages: ", u.messageCount);
  })));
}

export default UnreadHangouts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5yZWFkSGFuZ291dHMtMzcyNTljZTguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9zdGF0ZS9yZWR1Y2VVbnJlYWRoYW5nb3V0cy5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9VbnJlYWRIYW5nb3V0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVkdWNlclVucmVhZGhhbmdvdXRzKHt1bnJlYWRoYW5nb3V0c30pe1xuICAgIHJldHVybiAgIHVucmVhZGhhbmdvdXRzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAoYWNjdW11bGF0b3IgPSBbeyAuLi5jdXJyZW50LCBtZXNzYWdlQ291bnQ6IDEgfV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG9iaiA9IGFjY3VtdWxhdG9yLmZpbmQoXG4gICAgICAgICAgICAoYSkgPT4gYS51c2VybmFtZSA9PT0gY3VycmVudC51c2VybmFtZSAmJiBjdXJyZW50LnN0YXRlID09PSAnTUVTU0FOR0VSJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBhY2N1bXVsYXRvci5maW5kSW5kZXgoXG4gICAgICAgICAgICAgIChhKSA9PiBhLnVzZXJuYW1lID09PSBjdXJyZW50LnVzZXJuYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy9pZiBjdXJyZW50IGV4aXN0IGluc2lkZSBhY2N1bWlsYXRvciBtYXAgaXQgdG8gdGhhdCBvYmplY3RcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yLnNwbGljZShpbmRleCwgMSwge1xuICAgICAgICAgICAgICAuLi5vYmosXG4gICAgICAgICAgICAgIG1lc3NhZ2VDb3VudDogKytvYmoubWVzc2FnZUNvdW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vaWYgY3VycmVudCBleGlzdCBpbnNpZGUgYWNjdW1pbGF0b3IgbWFwIGl0IHRvIHRoYXQgb2JqZWN0XG4gICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKHsgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9LCBbXSk7XG59IiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCB7IExpc3QsIExpc3RJdGVtIH0gZnJvbSAnLi4vbGF5b3V0L05hdkxpc3QnO1xuaW1wb3J0IHtyZWR1Y2VyVW5yZWFkaGFuZ291dHN9IGZyb20gJy4uL2hhbmdvdXRzL3N0YXRlL3JlZHVjZVVucmVhZGhhbmdvdXRzJ1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVW5yZWFkSGFuZ291dHMoeyB1bnJlYWRoYW5nb3V0cyxvblNlbGVjdFVucmVhZCB9KSB7XG5cbiAgY29uc3QgW2l0ZW1zLHNldEl0ZW1zXSA9dXNlU3RhdGUoW10pXG51c2VFZmZlY3QoKCk9PntcbmlmKHVucmVhZGhhbmdvdXRzKXtcblxuICBjb25zdCByZWR1Y2VkID1yZWR1Y2VyVW5yZWFkaGFuZ291dHMoe3VucmVhZGhhbmdvdXRzfSlcbiBcbiAgc2V0SXRlbXMocmVkdWNlZClcbn1cblxufSxbdW5yZWFkaGFuZ291dHNdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBkYXRhLXRlc3RpZD0ndW5yZWFkaGFuZ291dHMnIHN0eWxlPXt7cGFkZGluZ1RvcDo2OH19PlxuICAgICAgPExpc3Q+XG4gICAgICAgIHtpdGVtcyAmJlxuICAgICAgICAgIGl0ZW1zLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICBpdGVtcy5tYXAoKHUpID0+IHtcbiAgICAgICBcbiAgICAgICAgICByZXR1cm4gPExpc3RJdGVtIG9uQ2xpY2s9e29uU2VsZWN0VW5yZWFkfSBpZD17dS51c2VybmFtZX0+e3UudXNlcm5hbWV9IG1lc3NhZ2VzOiB7dS5tZXNzYWdlQ291bnR9PC9MaXN0SXRlbT47XG4gICAgICAgICAgfSl9XG4gICAgICA8L0xpc3Q+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsicmVkdWNlclVucmVhZGhhbmdvdXRzIiwidW5yZWFkaGFuZ291dHMiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImN1cnJlbnQiLCJpbmRleCIsIm1lc3NhZ2VDb3VudCIsIm9iaiIsImZpbmQiLCJhIiwidXNlcm5hbWUiLCJzdGF0ZSIsImZpbmRJbmRleCIsInNwbGljZSIsInB1c2giLCJVbnJlYWRIYW5nb3V0cyIsIm9uU2VsZWN0VW5yZWFkIiwiaXRlbXMiLCJzZXRJdGVtcyIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVkdWNlZCIsInBhZGRpbmdUb3AiLCJsZW5ndGgiLCJtYXAiLCJ1Il0sIm1hcHBpbmdzIjoiOztBQUFPLFNBQVNBLHFCQUFULENBQStCO0FBQUNDLEVBQUFBO0FBQUQsQ0FBL0IsRUFBZ0Q7QUFDbkQsU0FBU0EsY0FBYyxDQUFDQyxNQUFmLENBQXNCLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxFQUF1QkMsS0FBdkIsS0FBaUM7QUFDNUQsUUFBSUEsS0FBSyxLQUFLLENBQWQsRUFBaUI7QUFDZixhQUFRRixXQUFXLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLE9BQUw7QUFBY0UsUUFBQUEsWUFBWSxFQUFFO0FBQTVCLE9BQUQsQ0FBdEI7QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNQyxHQUFHLEdBQUdKLFdBQVcsQ0FBQ0ssSUFBWixDQUNUQyxDQUFELElBQU9BLENBQUMsQ0FBQ0MsUUFBRixLQUFlTixPQUFPLENBQUNNLFFBQXZCLElBQW1DTixPQUFPLENBQUNPLEtBQVIsS0FBa0IsV0FEbEQsQ0FBWjs7QUFHQSxVQUFJSixHQUFKLEVBQVM7QUFDUCxjQUFNRixLQUFLLEdBQUdGLFdBQVcsQ0FBQ1MsU0FBWixDQUNYSCxDQUFELElBQU9BLENBQUMsQ0FBQ0MsUUFBRixLQUFlTixPQUFPLENBQUNNLFFBRGxCLENBQWQsQ0FETzs7QUFLUFAsUUFBQUEsV0FBVyxDQUFDVSxNQUFaLENBQW1CUixLQUFuQixFQUEwQixDQUExQixFQUE2QixFQUMzQixHQUFHRSxHQUR3QjtBQUUzQkQsVUFBQUEsWUFBWSxFQUFFLEVBQUVDLEdBQUcsQ0FBQ0Q7QUFGTyxTQUE3QjtBQUlELE9BVEQsTUFTTztBQUNMO0FBQ0FILFFBQUFBLFdBQVcsQ0FBQ1csSUFBWixDQUFpQixFQUFFLEdBQUdWLE9BQUw7QUFBY0UsVUFBQUEsWUFBWSxFQUFFO0FBQTVCLFNBQWpCO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPSCxXQUFQO0FBQ0QsR0F0Qk0sRUFzQkosRUF0QkksQ0FBVDtBQXVCSDs7QUNwQmMsU0FBU1ksY0FBVCxDQUF3QjtBQUFFZCxFQUFBQSxjQUFGO0FBQWlCZSxFQUFBQTtBQUFqQixDQUF4QixFQUEyRDtBQUV4RSxRQUFNLENBQUNDLEtBQUQsRUFBT0MsUUFBUCxJQUFrQkMsQ0FBUSxDQUFDLEVBQUQsQ0FBaEM7QUFDRkMsRUFBQUEsQ0FBUyxDQUFDLE1BQUk7QUFDZCxRQUFHbkIsY0FBSCxFQUFrQjtBQUVoQixZQUFNb0IsT0FBTyxHQUFFckIscUJBQXFCLENBQUM7QUFBQ0MsUUFBQUE7QUFBRCxPQUFELENBQXBDO0FBRUFpQixNQUFBQSxRQUFRLENBQUNHLE9BQUQsQ0FBUjtBQUNEO0FBRUEsR0FSUSxFQVFQLENBQUNwQixjQUFELENBUk8sQ0FBVDtBQVVFLFNBQ0U7QUFBSyxtQkFBWSxnQkFBakI7QUFBa0MsSUFBQSxLQUFLLEVBQUU7QUFBQ3FCLE1BQUFBLFVBQVUsRUFBQztBQUFaO0FBQXpDLEtBQ0UsRUFBQyxJQUFELFFBQ0dMLEtBQUssSUFDSkEsS0FBSyxDQUFDTSxNQUFOLEdBQWUsQ0FEaEIsSUFFQ04sS0FBSyxDQUFDTyxHQUFOLENBQVdDLENBQUQsSUFBTztBQUVqQixXQUFPLEVBQUMsUUFBRDtBQUFVLE1BQUEsT0FBTyxFQUFFVCxjQUFuQjtBQUFtQyxNQUFBLEVBQUUsRUFBRVMsQ0FBQyxDQUFDZjtBQUF6QyxPQUFvRGUsQ0FBQyxDQUFDZixRQUF0RCxpQkFBMkVlLENBQUMsQ0FBQ25CLFlBQTdFLENBQVA7QUFDQyxHQUhELENBSEosQ0FERixDQURGO0FBWUQ7Ozs7In0=
