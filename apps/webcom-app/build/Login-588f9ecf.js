import { u as useMediaQuery, a as useAppContext, h } from './index-d89dc8e1.js';
import { B as Button, v as validationTypes, I as Input, F as Form, P as Paper, G as Grid, a as valueChanged, l as login } from './actions-272c42f2.js';

function Login() {
  const {
    device
  } = useMediaQuery();
  const {
    auth,
    form
  } = useAppContext();
  const {
    emailorusername,
    password,
    error
  } = auth.state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  function handleLogin() {
    auth.dispatch(login({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Login",
    error: error
  }, h(Input, {
    value: emailorusername,
    onChange: handleChange,
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS, validationTypes.EMAIL_NOT_REGISTERED, validationTypes.USERNAME_NOT_REGISTERED]
  }), h(Input, {
    value: password,
    onChange: handleChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Button, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: handleLogin,
    title: "LOGIN"
  }), h("a", {
    href: "#/requestpasschange"
  }, "Forgot Password!"))));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tNTg4ZjllY2YuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgRm9ybSBmcm9tICcuLi9mb3JtL0Zvcm0nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0IHsgdXNlQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dpbigpIHtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIGNvbnN0IHsgYXV0aCwgZm9ybSB9ID0gdXNlQXBwQ29udGV4dCgpO1xyXG5cclxuICBjb25zdCB7IGVtYWlsb3J1c2VybmFtZSwgcGFzc3dvcmQsIGVycm9yIH0gPSBhdXRoLnN0YXRlO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBhdXRoLmRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2g6IGF1dGguZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGU6IGF1dGguc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVMb2dpbigpIHtcclxuICAgIGF1dGguZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMubG9naW4oe1xyXG4gICAgICAgIGRpc3BhdGNoOiBhdXRoLmRpc3BhdGNoLFxyXG4gICAgICAgIHN0YXRlOiBhdXRoLnN0YXRlLFxyXG4gICAgICAgIGZvcm1EaXNwYXRjaDogZm9ybS5kaXNwYXRjaCxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEdyaWQgd2lkdGg9e2RldmljZSA9PT0gJ3Bob25lJyA/IDEwMCA6IDI1fT5cclxuICAgICAgPFBhcGVyPlxyXG4gICAgICAgIDxGb3JtIGZvcm1UaXRsZT0nTG9naW4nIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsb3J1c2VybmFtZX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgbmFtZT0nZW1haWxvcnVzZXJuYW1lJ1xyXG4gICAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgZW1haWwgb3IgdXNlcm5hbWUnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbE9yVXNlcm5hbWUnXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdlbWFpbE9yVXNlcm5hbWUnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuSU5WQUxJRF9DUkVERU5USUFMUyxcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfTk9UX1JFR0lTVEVSRUQsXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX05PVF9SRUdJU1RFUkVELFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbnRlciBwYXNzd29yZCdcclxuICAgICAgICAgICAgaWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTVBUWV9TVFJJTkdfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuSU5WQUxJRF9DUkVERU5USUFMUyxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIGlkPSdsb2dpbi1idG4nXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdsb2dpbi1idG4nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUxvZ2lufVxyXG4gICAgICAgICAgICB0aXRsZT0nTE9HSU4nXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPGEgaHJlZj0nIy9yZXF1ZXN0cGFzc2NoYW5nZSc+Rm9yZ290IFBhc3N3b3JkITwvYT5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiTG9naW4iLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwiYXV0aCIsImZvcm0iLCJ1c2VBcHBDb250ZXh0IiwiZW1haWxvcnVzZXJuYW1lIiwicGFzc3dvcmQiLCJlcnJvciIsInN0YXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsImRpc3BhdGNoIiwiYWN0aW9ucyIsInByb3BOYW1lIiwiaGFuZGxlTG9naW4iLCJmb3JtRGlzcGF0Y2giLCJ2YWxpZGF0aW9uVHlwZXMiLCJVU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIklOVkFMSURfQ1JFREVOVElBTFMiLCJFTUFJTF9OT1RfUkVHSVNURVJFRCIsIlVTRVJOQU1FX05PVF9SRUdJU1RFUkVEIiwiRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7OztBQVdlLFNBQVNBLEtBQVQsR0FBaUI7QUFDOUIsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQWFDLGFBQWEsRUFBaEM7QUFDQSxRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUE7QUFBUixNQUFpQkMsYUFBYSxFQUFwQztBQUVBLFFBQU07QUFBRUMsSUFBQUEsZUFBRjtBQUFtQkMsSUFBQUEsUUFBbkI7QUFBNkJDLElBQUFBO0FBQTdCLE1BQXVDTCxJQUFJLENBQUNNLEtBQWxEOztBQUVBLFdBQVNDLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FYLElBQUFBLElBQUksQ0FBQ1ksUUFBTCxDQUNFQyxZQUFBLENBQXFCO0FBQ25CQyxNQUFBQSxRQUFRLEVBQUVMLElBRFM7QUFFbkJDLE1BQUFBLEtBRm1CO0FBR25CRSxNQUFBQSxRQUFRLEVBQUVaLElBQUksQ0FBQ1ksUUFISTtBQUluQk4sTUFBQUEsS0FBSyxFQUFFTixJQUFJLENBQUNNO0FBSk8sS0FBckIsQ0FERjtBQVFEOztBQUNELFdBQVNTLFdBQVQsR0FBdUI7QUFDckJmLElBQUFBLElBQUksQ0FBQ1ksUUFBTCxDQUNFQyxLQUFBLENBQWM7QUFDWkQsTUFBQUEsUUFBUSxFQUFFWixJQUFJLENBQUNZLFFBREg7QUFFWk4sTUFBQUEsS0FBSyxFQUFFTixJQUFJLENBQUNNLEtBRkE7QUFHWlUsTUFBQUEsWUFBWSxFQUFFZixJQUFJLENBQUNXO0FBSFAsS0FBZCxDQURGO0FBT0Q7O0FBRUQsU0FDRSxFQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRWQsTUFBTSxLQUFLLE9BQVgsR0FBcUIsR0FBckIsR0FBMkI7QUFBeEMsS0FDRSxFQUFDLEtBQUQsUUFDRSxFQUFDLElBQUQ7QUFBTSxJQUFBLFNBQVMsRUFBQyxPQUFoQjtBQUF3QixJQUFBLEtBQUssRUFBRU87QUFBL0IsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUYsZUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFSSxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsaUJBSFA7QUFJRSxJQUFBLElBQUksRUFBQyxNQUpQO0FBS0UsSUFBQSxXQUFXLEVBQUMseUJBTGQ7QUFNRSxJQUFBLEVBQUUsRUFBQyxpQkFOTDtBQU9FLG1CQUFZLGlCQVBkO0FBUUUsSUFBQSxlQUFlLEVBQUUsQ0FDZlUsZUFBZSxDQUFDQyxtQ0FERCxFQUVmRCxlQUFlLENBQUNFLG1CQUZELEVBR2ZGLGVBQWUsQ0FBQ0csb0JBSEQsRUFJZkgsZUFBZSxDQUFDSSx1QkFKRDtBQVJuQixJQURGLEVBaUJFLEVBQUMsS0FBRDtBQUNFLElBQUEsS0FBSyxFQUFFakIsUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFRyxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsVUFIUDtBQUlFLElBQUEsSUFBSSxFQUFDLFVBSlA7QUFLRSxJQUFBLFdBQVcsRUFBQyxnQkFMZDtBQU1FLElBQUEsRUFBRSxFQUFDLFVBTkw7QUFPRSxtQkFBWSxVQVBkO0FBUUUsSUFBQSxlQUFlLEVBQUUsQ0FDZlUsZUFBZSxDQUFDSyx1QkFERCxFQUVmTCxlQUFlLENBQUNFLG1CQUZEO0FBUm5CLElBakJGLEVBK0JFLEVBQUMsTUFBRDtBQUNFLElBQUEsSUFBSSxFQUFDLFFBRFA7QUFFRSxJQUFBLEVBQUUsRUFBQyxXQUZMO0FBR0UsbUJBQVksV0FIZDtBQUlFLElBQUEsT0FBTyxFQUFFSixXQUpYO0FBS0UsSUFBQSxLQUFLLEVBQUM7QUFMUixJQS9CRixFQXNDRTtBQUFHLElBQUEsSUFBSSxFQUFDO0FBQVIsd0JBdENGLENBREYsQ0FERixDQURGO0FBOENEOzs7OyJ9
