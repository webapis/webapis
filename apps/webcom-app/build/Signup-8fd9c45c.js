import { c as useAuthContext, a as useAppRoute, b as useMediaQuery, p, h, v as validationTypes, e as valueChanged } from './index-06a92474.js';
import { P as Paper, F as Form, I as Input, B as Button, G as Grid } from './Grid-5d59911c.js';
import './style-84eb5dd5.js';

function Signup({
  signup
}) {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    username,
    password,
    email
  } = state;
  p(() => {
    if (state.user && state.user.token) {
      onAppRoute({
        featureRoute: '/',
        route: '/'
      });
    }
  }, [state.user]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN, validationTypes.EMPTY_STRING_VALIDATION]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: signup,
    id: "signup-btn",
    title: "Signup"
  }))));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLThmZDljNDVjLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XHJcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi9hdXRoLWNvbnRleHQnO1xyXG5pbXBvcnQgeyB1c2VGb3JtQ29udGV4dCB9IGZyb20gJy4uL2Zvcm0vZm9ybS1jb250ZXh0JztcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgeyBQYXBlciB9IGZyb20gJy4uL2xheW91dC9QYXBlcic7XHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XHJcbmltcG9ydCB7dXNlQXBwUm91dGV9IGZyb20gJy4uL2FwcC1yb3V0ZS9BcHBSb3V0ZVByb3ZpZGVyJ1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWdudXAoe3NpZ251cH0pIHtcclxuICBjb25zdCB7c3RhdGUsZGlzcGF0Y2h9PXVzZUF1dGhDb250ZXh0KClcclxuICBjb25zdCB7b25BcHBSb3V0ZX0gPSB1c2VBcHBSb3V0ZSgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIGVtYWlsIH0gPSBzdGF0ZTtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLnVzZXIgJiYgc3RhdGUudXNlci50b2tlbikge1xyXG4gICAgICBvbkFwcFJvdXRlKHtmZWF0dXJlUm91dGU6ICcvJyxyb3V0ZTonLyd9KTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUudXNlcl0pO1xyXG5cclxuIFxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPEdyaWQgd2lkdGg9e2RldmljZSA9PT0gJ3Bob25lJyA/IDEwMCA6IDI1fT5cclxuICAgICAgPFBhcGVyPlxyXG4gICAgICAgIDxGb3JtIGZvcm1UaXRsZT0nU2lnbiB1cCc+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgICBpZD0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIG5hbWU9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfVEFLRU4sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNUFRZX1NUUklOR19WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuUkVHSVNURVJFRF9FTUFJTCxcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2J0bidcclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtzaWdudXB9XHJcbiAgICAgICAgICAgIGlkPSdzaWdudXAtYnRuJ1xyXG4gICAgICAgICAgICB0aXRsZT0nU2lnbnVwJ1xyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiU2lnbnVwIiwic2lnbnVwIiwic3RhdGUiLCJkaXNwYXRjaCIsInVzZUF1dGhDb250ZXh0Iiwib25BcHBSb3V0ZSIsInVzZUFwcFJvdXRlIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsInVzZUVmZmVjdCIsInVzZXIiLCJ0b2tlbiIsImZlYXR1cmVSb3V0ZSIsInJvdXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsImFjdGlvbnMiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX0ZPUk1BVF9WQUxJREFUSU9OIiwiVVNFUk5BTUVfVEFLRU4iLCJFTVBUWV9TVFJJTkdfVkFMSURBVElPTiIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiUkVHSVNURVJFRF9FTUFJTCIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7O0FBY2UsU0FBU0EsTUFBVCxDQUFnQjtBQUFDQyxFQUFBQTtBQUFELENBQWhCLEVBQTBCO0FBQ3ZDLFFBQU07QUFBQ0MsSUFBQUEsS0FBRDtBQUFPQyxJQUFBQTtBQUFQLE1BQWlCQyxjQUFjLEVBQXJDO0FBQ0EsUUFBTTtBQUFDQyxJQUFBQTtBQUFELE1BQWVDLFdBQVcsRUFBaEM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxRQUFaO0FBQXNCQyxJQUFBQTtBQUF0QixNQUFnQ1QsS0FBdEM7QUFDQVUsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJVixLQUFLLENBQUNXLElBQU4sSUFBY1gsS0FBSyxDQUFDVyxJQUFOLENBQVdDLEtBQTdCLEVBQW9DO0FBQ2xDVCxNQUFBQSxVQUFVLENBQUM7QUFBQ1UsUUFBQUEsWUFBWSxFQUFFLEdBQWY7QUFBbUJDLFFBQUFBLEtBQUssRUFBQztBQUF6QixPQUFELENBQVY7QUFDRDtBQUNGLEdBSlEsRUFJTixDQUFDZCxLQUFLLENBQUNXLElBQVAsQ0FKTSxDQUFUOztBQU9BLFdBQVNJLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FsQixJQUFBQSxRQUFRLENBQ05tQixZQUFBLENBQXFCO0FBQ25CQyxNQUFBQSxRQUFRLEVBQUVKLElBRFM7QUFFbkJDLE1BQUFBLEtBRm1CO0FBR25CakIsTUFBQUEsUUFIbUI7QUFJbkJELE1BQUFBO0FBSm1CLEtBQXJCLENBRE0sQ0FBUjtBQVFEOztBQUNELFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVLLE1BQU0sS0FBSyxPQUFYLEdBQXFCLEdBQXJCLEdBQTJCO0FBQXhDLEtBQ0UsRUFBQyxLQUFELFFBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUUsUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFUSxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsTUFIUDtBQUlFLElBQUEsRUFBRSxFQUFDLFVBSkw7QUFLRSxJQUFBLElBQUksRUFBQyxVQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMsVUFOZDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZPLGVBQWUsQ0FBQ0MsMEJBREQsRUFFZkQsZUFBZSxDQUFDRSxjQUZELEVBR2ZGLGVBQWUsQ0FBQ0csdUJBSEQ7QUFQbkIsSUFERixFQWNFLEVBQUMsS0FBRDtBQUNFLElBQUEsUUFBUSxFQUFFVixZQURaO0FBRUUsSUFBQSxLQUFLLEVBQUVOLEtBRlQ7QUFHRSxJQUFBLFdBQVcsRUFBQyxPQUhkO0FBSUUsSUFBQSxJQUFJLEVBQUMsT0FKUDtBQUtFLElBQUEsRUFBRSxFQUFDLE9BTEw7QUFNRSxJQUFBLElBQUksRUFBQyxPQU5QO0FBT0UsSUFBQSxlQUFlLEVBQUUsQ0FDZmEsZUFBZSxDQUFDSSx1QkFERCxFQUVmSixlQUFlLENBQUNLLGdCQUZEO0FBUG5CLElBZEYsRUEyQkUsRUFBQyxLQUFEO0FBQ0UsSUFBQSxRQUFRLEVBQUVaLFlBRFo7QUFFRSxJQUFBLEtBQUssRUFBRVAsUUFGVDtBQUdFLElBQUEsV0FBVyxFQUFDLFVBSGQ7QUFJRSxJQUFBLElBQUksRUFBQyxVQUpQO0FBS0UsSUFBQSxFQUFFLEVBQUMsVUFMTDtBQU1FLElBQUEsSUFBSSxFQUFDLFVBTlA7QUFPRSxJQUFBLGVBQWUsRUFBRSxDQUFDYyxlQUFlLENBQUNNLDBCQUFqQjtBQVBuQixJQTNCRixFQW9DRSxFQUFDLE1BQUQ7QUFDRSxJQUFBLFNBQVMsRUFBQyxLQURaO0FBRUUsSUFBQSxJQUFJLEVBQUMsUUFGUDtBQUdFLElBQUEsT0FBTyxFQUFFN0IsTUFIWDtBQUlFLElBQUEsRUFBRSxFQUFDLFlBSkw7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBcENGLENBREYsQ0FERixDQURGO0FBa0REOzs7OyJ9
