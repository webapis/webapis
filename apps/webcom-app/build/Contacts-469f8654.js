import { h, _ as _extends, A as useWSocketContext, m, p, u as useContactsContext, e as useAuthContext, v, B as ListItem, C as List, D as selectContact } from './index-e96aaf50.js';

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  const {
    id,
    type = 'text'
  } = props;
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props, {
    "data-testid": id,
    type: type
  })));
}

const actionTypes = {
  FETCH_CONTACTS_STARTED: 'FETCH_CONTACTS_STARTED',
  FETCH_CONTACTS_SUCCESS: 'FETCH_CONTACTS_SUCCESS',
  FETCH_CONTACTS_FAILED: 'FETCH_CONTACTS_FAILED',
  GET_LOCAL_CONTACTS: 'GET_LOCAL_CONTACTS',
  FIND_CONTACT: 'FIND_CONTACT',
  CONTACT_IS_ONLINE: 'CONTACT_IS_ONLINE',
  CONTACT_IS_OFFLINE: 'CONTACT_IS_OFFLINE'
};

async function fetchContacts({
  dispatch,
  username
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_STARTED
    });
    const response = await fetch(`/contacts/find?username=${username}`);
    const {
      contacts
    } = await response.json();
    dispatch({
      type: actionTypes.FETCH_CONTACTS_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_FAILED,
      error
    });
  }
}

function getLocalContacts({
  dispatch,
  contacts
}) {
  dispatch({
    type: actionTypes.GET_LOCAL_CONTACTS,
    contacts
  });
}

function findContact({
  dispatch,
  filter
}) {
  dispatch({
    type: actionTypes.FIND_CONTACT,
    filter
  });
}

const initState = {
  loading: false,
  error: null,
  contacts: []
};

function contactsReducer(state, action) {
  switch (action.type) {
    case actionTypes.FETCH_CONTACTS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.FETCH_CONTACTS_SUCCESS:
      return { ...state,
        loading: false,
        contacts: action.contacts
      };

    case actionTypes.FETCH_CONTACTS_FAILED:
      return { ...state,
        loading: false,
        error: action.error
      };

    case actionTypes.FIND_CONTACT:
      return { ...state,
        contacts: state.contacts.filter(c => c.username === action.filter)
      };

    case actionTypes.GET_LOCAL_CONTACTS:
      const nextState = { ...state,
        contacts: action.contacts
      };
      return nextState;

    case actionTypes.CONTACT_IS_ONLINE:
      return { ...state,
        contacts: state.contacts.map(c => {
          if (c.username === action.username) {
            return { ...c,
              online: true
            };
          }
        })
      };

    case actionTypes.CONTACT_IS_OFFLINE:
      return { ...state,
        contacts: state.contacts.map(c => {
          if (c.username === action.username) {
            return { ...c,
              online: false
            };
          }
        })
      };

    default:
      return state;
  }
}

function useContacts({
  filter,
  username
}) {
  const {
    message
  } = useWSocketContext();
  const [state, dispatch] = m(contactsReducer, initState);
  p(() => {
    if (message) {
      switch (message.type) {
        case 'online':
          dispatch({
            type: actionTypes.CONTACT_IS_ONLINE,
            username: message.username
          });
          break;

        case 'offline':
          dispatch({
            type: actionTypes.CONTACT_IS_OFFLINE,
            username: message.username
          });
          break;

        default:
          return null;
      }
    }
  }, [message]);
  p(() => {
    if (localStorage.getItem(`contacts-${username}`)) {
      const storage = JSON.parse(localStorage.getItem(`contacts-${username}`));
      getLocalContacts({
        dispatch,
        contacts: storage.contacts
      });
    } else {
      fetchContacts({
        dispatch,
        username
      });
    }
  }, []);
  p(() => {
    if (filter && filter.length > 3) {
      findContact({
        dispatch,
        filter
      });
    }
  }, [filter]);
  return {
    state
  };
}

const initState$1 = {
  users: [],
  loading: false,
  error: null
};
const actionTypes$1 = {
  FETCH_USERS_STARTED: 'FETCH_USERS_STARTED',
  FETCH_USERS_SUCCESS: 'FETCH_USERS_SUCCESS',
  FETCH_USERS_FAILED: 'FETCH_USERS_FAILED'
};

async function fetchUsers({
  dispatch,
  filter
}) {
  try {
    dispatch({
      type: actionTypes$1.FETCH_USERS_STARTED
    });
    const response = await fetch(`/users/find?filter=${filter}`);
    const {
      users
    } = await response.json();
    debugger;
    dispatch({
      type: actionTypes$1.FETCH_USERS_SUCCESS,
      users
    });
  } catch (error) {
    dispatch({
      type: actionTypes$1.FETCH_USERS_FAILED,
      error
    });
  }
}

function usersReducer(state, action) {
  switch (action.type) {
    case actionTypes$1.FETCH_USERS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes$1.FETCH_USERS_SUCCESS:
      const nextState = { ...state,
        users: action.users.map(user => {
          return { ...user,
            state: 'invite'
          };
        })
      };
      debugger;
      return nextState;

    case actionTypes$1.FETCH_USERS_FAILED:
      return { ...state,
        error: action.error
      };

    default:
      return state;
  }
}

function useUsers({
  filter
}) {
  const [state, dispatch] = m(usersReducer, initState$1);
  p(() => {
    if (filter && filter.length > 3) {
      fetchUsers({
        dispatch,
        filter
      });
    }
  }, [filter]);
  return {
    state
  };
}

function Contacts() {
  const [state, dispatch] = useContactsContext();
  const {
    state: authState
  } = useAuthContext();
  const [contactsfilter, setContactsFilter] = v(null);
  const [usersFilter, setUsersFilter] = v(null);
  const [items, setItems] = v([]);
  const {
    state: contactState
  } = useContacts({
    filter: contactsfilter,
    username: authState.username
  });
  const {
    state: userState
  } = useUsers({
    filter: usersFilter
  });

  function handleSearch(e) {
    const {
      value
    } = e.target;
    setContactsFilter(value);
  }

  p(() => {
    if (contactState.contacts.length > 0) {
      setItems(contactState.contacts);
    }
  }, [contactState]);
  p(() => {
    if (contactsfilter && contactState.contacts.length === 0) {
      setUsersFilter(contactsfilter);
    }

    if (contactsfilter && contactState.contacts.length > 0) {
      setItems(contactState.contacts);
    }
  }, [contactState.contacts, contactsfilter]);
  p(() => {
    if (usersFilter && userState.users.length > 0) {
      debugger;
      setItems(userState.users);
    }
  }, [userState.users, usersFilter]);

  function handleItemClick(e) {
    const selectedContact = items.find(item => item.username === e.target.id);
    debugger;
    selectContact({
      dispatch,
      contact: selectedContact
    });
  }

  return h("div", null, h(TextInput, {
    id: "contact-search",
    onChange: handleSearch,
    placeholder: "Enter username, or email"
  }), h(List, {
    id: "contacts-list"
  }, items.length > 0 && items.map(item => {
    return h(ListItem, {
      onClick: handleItemClick,
      id: item.username
    }, item.username);
  })));
}

export default Contacts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdHMtNDY5Zjg2NTQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9sYXlvdXQvVGV4dElucHV0LmpzIiwiLi4vLi4vLi4vY2xpZW50L2NvbnRhY3RzL3VzZUNvbnRhY3RzLmpzIiwiLi4vLi4vLi4vY2xpZW50L2NvbnRhY3RzL3VzZVVzZXJzLmpzIiwiLi4vLi4vLi4vY2xpZW50L2NvbnRhY3RzL0NvbnRhY3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5cclxuY29uc3Qgc3R5bGUgPSB7XHJcbiAgcGFkZGluZzogOCxcclxuICBtYXJnaW5MZWZ0OiAxNixcclxuICBtYXJnaW5SaWdodDogMTYsXHJcbiAgbWFyZ2luVG9wOiA4LFxyXG4gIG1hcmdpbkJvdHRvbTogOCxcclxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICBmbGV4OiAxLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRleHRJbnB1dChwcm9wcykge1xyXG4gIGNvbnN0IHsgaWQsIHR5cGUgPSAndGV4dCcgfSA9IHByb3BzO1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4Jywgd2lkdGg6ICcxMDAlJyB9fT5cclxuICAgICAgPGlucHV0IHN0eWxlPXtzdHlsZX0gey4uLnByb3BzfSBkYXRhLXRlc3RpZD17aWR9IHR5cGU9e3R5cGV9IC8+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVkdWNlciB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCB7IHVzZVdTb2NrZXRDb250ZXh0IH0gZnJvbSAnLi4vd3NvY2tldC93c29ja2V0LWNvbnRleHQnO1xyXG5leHBvcnQgY29uc3QgYWN0aW9uVHlwZXMgPSB7XHJcbiAgRkVUQ0hfQ09OVEFDVFNfU1RBUlRFRDogJ0ZFVENIX0NPTlRBQ1RTX1NUQVJURUQnLFxyXG4gIEZFVENIX0NPTlRBQ1RTX1NVQ0NFU1M6ICdGRVRDSF9DT05UQUNUU19TVUNDRVNTJyxcclxuICBGRVRDSF9DT05UQUNUU19GQUlMRUQ6ICdGRVRDSF9DT05UQUNUU19GQUlMRUQnLFxyXG4gIEdFVF9MT0NBTF9DT05UQUNUUzogJ0dFVF9MT0NBTF9DT05UQUNUUycsXHJcbiAgRklORF9DT05UQUNUOiAnRklORF9DT05UQUNUJyxcclxuICBDT05UQUNUX0lTX09OTElORTogJ0NPTlRBQ1RfSVNfT05MSU5FJyxcclxuICBDT05UQUNUX0lTX09GRkxJTkU6ICdDT05UQUNUX0lTX09GRkxJTkUnLFxyXG59O1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hDb250YWN0cyh7IGRpc3BhdGNoLCB1c2VybmFtZSB9KSB7XHJcbiAgdHJ5IHtcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogYWN0aW9uVHlwZXMuRkVUQ0hfQ09OVEFDVFNfU1RBUlRFRCB9KTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9jb250YWN0cy9maW5kP3VzZXJuYW1lPSR7dXNlcm5hbWV9YCk7XHJcbiAgICBjb25zdCB7IGNvbnRhY3RzIH0gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9DT05UQUNUU19TVUNDRVNTLCBjb250YWN0cyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9DT05UQUNUU19GQUlMRUQsIGVycm9yIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TG9jYWxDb250YWN0cyh7IGRpc3BhdGNoLCBjb250YWN0cyB9KSB7XHJcblxyXG4gIGRpc3BhdGNoKHsgdHlwZTogYWN0aW9uVHlwZXMuR0VUX0xPQ0FMX0NPTlRBQ1RTLCBjb250YWN0cyB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZENvbnRhY3QoeyBkaXNwYXRjaCwgZmlsdGVyIH0pIHtcclxuXHJcbiAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GSU5EX0NPTlRBQ1QsIGZpbHRlciB9KTtcclxufVxyXG5cclxuY29uc3QgaW5pdFN0YXRlID0ge1xyXG4gIGxvYWRpbmc6IGZhbHNlLFxyXG4gIGVycm9yOiBudWxsLFxyXG4gIGNvbnRhY3RzOiBbXSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNvbnRhY3RzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBhY3Rpb25UeXBlcy5GRVRDSF9DT05UQUNUU19TVEFSVEVEOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogdHJ1ZSB9O1xyXG4gICAgY2FzZSBhY3Rpb25UeXBlcy5GRVRDSF9DT05UQUNUU19TVUNDRVNTOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogZmFsc2UsIGNvbnRhY3RzOiBhY3Rpb24uY29udGFjdHMgfTtcclxuICAgIGNhc2UgYWN0aW9uVHlwZXMuRkVUQ0hfQ09OVEFDVFNfRkFJTEVEOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogZmFsc2UsIGVycm9yOiBhY3Rpb24uZXJyb3IgfTtcclxuICAgIGNhc2UgYWN0aW9uVHlwZXMuRklORF9DT05UQUNUOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGNvbnRhY3RzOiBzdGF0ZS5jb250YWN0cy5maWx0ZXIoKGMpID0+IGMudXNlcm5hbWUgPT09IGFjdGlvbi5maWx0ZXIpLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBhY3Rpb25UeXBlcy5HRVRfTE9DQUxfQ09OVEFDVFM6XHJcbiAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IHsgLi4uc3RhdGUsIGNvbnRhY3RzOiBhY3Rpb24uY29udGFjdHMgfTtcclxuXHJcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XHJcbiAgICBjYXNlIGFjdGlvblR5cGVzLkNPTlRBQ1RfSVNfT05MSU5FOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGNvbnRhY3RzOiBzdGF0ZS5jb250YWN0cy5tYXAoKGMpID0+IHtcclxuICAgICAgICAgIGlmIChjLnVzZXJuYW1lID09PSBhY3Rpb24udXNlcm5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uYywgb25saW5lOiB0cnVlIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSksXHJcbiAgICAgIH07XHJcbiAgICBjYXNlIGFjdGlvblR5cGVzLkNPTlRBQ1RfSVNfT0ZGTElORTpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBjb250YWN0czogc3RhdGUuY29udGFjdHMubWFwKChjKSA9PiB7XHJcbiAgICAgICAgICBpZiAoYy51c2VybmFtZSA9PT0gYWN0aW9uLnVzZXJuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLmMsIG9ubGluZTogZmFsc2UgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KSxcclxuICAgICAgfTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDb250YWN0cyh7IGZpbHRlciwgdXNlcm5hbWUgfSkge1xyXG4gIGNvbnN0IHsgbWVzc2FnZSB9ID0gdXNlV1NvY2tldENvbnRleHQoKTtcclxuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZVJlZHVjZXIoY29udGFjdHNSZWR1Y2VyLCBpbml0U3RhdGUpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKG1lc3NhZ2UpIHtcclxuICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdvbmxpbmUnOlxyXG4gICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICB0eXBlOiBhY3Rpb25UeXBlcy5DT05UQUNUX0lTX09OTElORSxcclxuICAgICAgICAgICAgdXNlcm5hbWU6IG1lc3NhZ2UudXNlcm5hbWUsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ29mZmxpbmUnOlxyXG4gICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICB0eXBlOiBhY3Rpb25UeXBlcy5DT05UQUNUX0lTX09GRkxJTkUsXHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiBtZXNzYWdlLnVzZXJuYW1lLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBbbWVzc2FnZV0pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGBjb250YWN0cy0ke3VzZXJuYW1lfWApKSB7XHJcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGBjb250YWN0cy0ke3VzZXJuYW1lfWApKTtcclxuICAgICAgZ2V0TG9jYWxDb250YWN0cyh7IGRpc3BhdGNoLCBjb250YWN0czogc3RvcmFnZS5jb250YWN0cyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZldGNoQ29udGFjdHMoeyBkaXNwYXRjaCwgdXNlcm5hbWUgfSk7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoZmlsdGVyICYmIGZpbHRlci5sZW5ndGggPiAzKSB7XHJcbiAgICAgIGZpbmRDb250YWN0KHsgZGlzcGF0Y2gsIGZpbHRlciB9KTtcclxuICAgIH1cclxuICB9LCBbZmlsdGVyXSk7XHJcblxyXG4gIHJldHVybiB7IHN0YXRlIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuXHJcbmNvbnN0IGluaXRTdGF0ZSA9IHtcclxuICB1c2VyczogW10sXHJcbiAgbG9hZGluZzogZmFsc2UsXHJcbiAgZXJyb3I6IG51bGwsXHJcbn07XHJcbmNvbnN0IGFjdGlvblR5cGVzID0ge1xyXG4gIEZFVENIX1VTRVJTX1NUQVJURUQ6ICdGRVRDSF9VU0VSU19TVEFSVEVEJyxcclxuICBGRVRDSF9VU0VSU19TVUNDRVNTOiAnRkVUQ0hfVVNFUlNfU1VDQ0VTUycsXHJcbiAgRkVUQ0hfVVNFUlNfRkFJTEVEOiAnRkVUQ0hfVVNFUlNfRkFJTEVEJyxcclxufTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoVXNlcnMoeyBkaXNwYXRjaCwgZmlsdGVyIH0pIHtcclxuICB0cnkge1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9VU0VSU19TVEFSVEVEIH0pO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL3VzZXJzL2ZpbmQ/ZmlsdGVyPSR7ZmlsdGVyfWApO1xyXG4gICAgY29uc3QgeyB1c2VycyB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgZGVidWdnZXI7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX1VTRVJTX1NVQ0NFU1MsIHVzZXJzIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX1VTRVJTX0ZBSUxFRCwgZXJyb3IgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB1c2Vyc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgYWN0aW9uVHlwZXMuRkVUQ0hfVVNFUlNfU1RBUlRFRDpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IHRydWUgfTtcclxuICAgIGNhc2UgYWN0aW9uVHlwZXMuRkVUQ0hfVVNFUlNfU1VDQ0VTUzpcclxuICAgICAgY29uc3QgbmV4dFN0YXRlID0ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHVzZXJzOiBhY3Rpb24udXNlcnMubWFwKCh1c2VyKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4geyAuLi51c2VyLCBzdGF0ZTogJ2ludml0ZScgfTtcclxuICAgICAgICB9KSxcclxuICAgICAgfTtcclxuICAgICAgZGVidWdnZXI7XHJcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XHJcbiAgICBjYXNlIGFjdGlvblR5cGVzLkZFVENIX1VTRVJTX0ZBSUxFRDpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiBhY3Rpb24uZXJyb3IgfTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VVc2Vycyh7IGZpbHRlciB9KSB7XHJcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKHVzZXJzUmVkdWNlciwgaW5pdFN0YXRlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChmaWx0ZXIgJiYgZmlsdGVyLmxlbmd0aCA+IDMpIHtcclxuICAgICAgZmV0Y2hVc2Vycyh7IGRpc3BhdGNoLCBmaWx0ZXIgfSk7XHJcbiAgICB9XHJcbiAgfSwgW2ZpbHRlcl0pO1xyXG5cclxuICByZXR1cm4geyBzdGF0ZSB9O1xyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgTGlzdCwgTGlzdEl0ZW0gfSBmcm9tICcuLi9sYXlvdXQvTmF2TGlzdCc7XHJcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uL2xheW91dC9UZXh0SW5wdXQnO1xyXG5pbXBvcnQgeyB1c2VDb250YWN0cyB9IGZyb20gJy4vdXNlQ29udGFjdHMnO1xyXG5pbXBvcnQgeyB1c2VVc2VycyB9IGZyb20gJy4vdXNlVXNlcnMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4uL2F1dGgvYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlQ29udGFjdHNDb250ZXh0LCBzZWxlY3RDb250YWN0IH0gZnJvbSAnLi9jb250YWN0LWNvbnRleHQnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb250YWN0cygpIHtcclxuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZUNvbnRhY3RzQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgc3RhdGU6IGF1dGhTdGF0ZSB9ID0gdXNlQXV0aENvbnRleHQoKTtcclxuICBjb25zdCBbY29udGFjdHNmaWx0ZXIsIHNldENvbnRhY3RzRmlsdGVyXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gIGNvbnN0IFt1c2Vyc0ZpbHRlciwgc2V0VXNlcnNGaWx0ZXJdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgY29uc3QgW2l0ZW1zLCBzZXRJdGVtc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgY29uc3QgeyBzdGF0ZTogY29udGFjdFN0YXRlIH0gPSB1c2VDb250YWN0cyh7XHJcbiAgICBmaWx0ZXI6IGNvbnRhY3RzZmlsdGVyLFxyXG4gICAgdXNlcm5hbWU6IGF1dGhTdGF0ZS51c2VybmFtZSxcclxuICB9KTtcclxuICBjb25zdCB7IHN0YXRlOiB1c2VyU3RhdGUgfSA9IHVzZVVzZXJzKHsgZmlsdGVyOiB1c2Vyc0ZpbHRlciB9KTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlU2VhcmNoKGUpIHtcclxuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgc2V0Q29udGFjdHNGaWx0ZXIodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChjb250YWN0U3RhdGUuY29udGFjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBzZXRJdGVtcyhjb250YWN0U3RhdGUuY29udGFjdHMpO1xyXG4gICAgfVxyXG4gIH0sIFtjb250YWN0U3RhdGVdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChjb250YWN0c2ZpbHRlciAmJiBjb250YWN0U3RhdGUuY29udGFjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHNldFVzZXJzRmlsdGVyKGNvbnRhY3RzZmlsdGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGFjdHNmaWx0ZXIgJiYgY29udGFjdFN0YXRlLmNvbnRhY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgc2V0SXRlbXMoY29udGFjdFN0YXRlLmNvbnRhY3RzKTtcclxuICAgIH1cclxuICB9LCBbY29udGFjdFN0YXRlLmNvbnRhY3RzLCBjb250YWN0c2ZpbHRlcl0pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHVzZXJzRmlsdGVyICYmIHVzZXJTdGF0ZS51c2Vycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICBzZXRJdGVtcyh1c2VyU3RhdGUudXNlcnMpO1xyXG4gICAgfVxyXG4gIH0sIFt1c2VyU3RhdGUudXNlcnMsIHVzZXJzRmlsdGVyXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUl0ZW1DbGljayhlKSB7XHJcbiAgICBjb25zdCBzZWxlY3RlZENvbnRhY3QgPSBpdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLnVzZXJuYW1lID09PSBlLnRhcmdldC5pZCk7XHJcbiAgICBkZWJ1Z2dlcjtcclxuICAgIHNlbGVjdENvbnRhY3QoeyBkaXNwYXRjaCwgY29udGFjdDogc2VsZWN0ZWRDb250YWN0IH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICBpZD0nY29udGFjdC1zZWFyY2gnXHJcbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNlYXJjaH1cclxuICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgdXNlcm5hbWUsIG9yIGVtYWlsJ1xyXG4gICAgICAvPlxyXG4gICAgICA8TGlzdCBpZD0nY29udGFjdHMtbGlzdCc+XHJcbiAgICAgICAge2l0ZW1zLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgIGl0ZW1zLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgIDxMaXN0SXRlbSBvbkNsaWNrPXtoYW5kbGVJdGVtQ2xpY2t9IGlkPXtpdGVtLnVzZXJuYW1lfT5cclxuICAgICAgICAgICAgICAgIHtpdGVtLnVzZXJuYW1lfVxyXG4gICAgICAgICAgICAgIDwvTGlzdEl0ZW0+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgPC9MaXN0PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsic3R5bGUiLCJwYWRkaW5nIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiYm94U2l6aW5nIiwiZmxleCIsIlRleHRJbnB1dCIsInByb3BzIiwiaWQiLCJ0eXBlIiwiZGlzcGxheSIsIndpZHRoIiwiYWN0aW9uVHlwZXMiLCJGRVRDSF9DT05UQUNUU19TVEFSVEVEIiwiRkVUQ0hfQ09OVEFDVFNfU1VDQ0VTUyIsIkZFVENIX0NPTlRBQ1RTX0ZBSUxFRCIsIkdFVF9MT0NBTF9DT05UQUNUUyIsIkZJTkRfQ09OVEFDVCIsIkNPTlRBQ1RfSVNfT05MSU5FIiwiQ09OVEFDVF9JU19PRkZMSU5FIiwiZmV0Y2hDb250YWN0cyIsImRpc3BhdGNoIiwidXNlcm5hbWUiLCJyZXNwb25zZSIsImZldGNoIiwiY29udGFjdHMiLCJqc29uIiwiZXJyb3IiLCJnZXRMb2NhbENvbnRhY3RzIiwiZmluZENvbnRhY3QiLCJmaWx0ZXIiLCJpbml0U3RhdGUiLCJsb2FkaW5nIiwiY29udGFjdHNSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJjIiwibmV4dFN0YXRlIiwibWFwIiwib25saW5lIiwidXNlQ29udGFjdHMiLCJtZXNzYWdlIiwidXNlV1NvY2tldENvbnRleHQiLCJ1c2VSZWR1Y2VyIiwidXNlRWZmZWN0IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInN0b3JhZ2UiLCJKU09OIiwicGFyc2UiLCJsZW5ndGgiLCJ1c2VycyIsIkZFVENIX1VTRVJTX1NUQVJURUQiLCJGRVRDSF9VU0VSU19TVUNDRVNTIiwiRkVUQ0hfVVNFUlNfRkFJTEVEIiwiZmV0Y2hVc2VycyIsInVzZXJzUmVkdWNlciIsInVzZXIiLCJ1c2VVc2VycyIsIkNvbnRhY3RzIiwidXNlQ29udGFjdHNDb250ZXh0IiwiYXV0aFN0YXRlIiwidXNlQXV0aENvbnRleHQiLCJjb250YWN0c2ZpbHRlciIsInNldENvbnRhY3RzRmlsdGVyIiwidXNlU3RhdGUiLCJ1c2Vyc0ZpbHRlciIsInNldFVzZXJzRmlsdGVyIiwiaXRlbXMiLCJzZXRJdGVtcyIsImNvbnRhY3RTdGF0ZSIsInVzZXJTdGF0ZSIsImhhbmRsZVNlYXJjaCIsImUiLCJ2YWx1ZSIsInRhcmdldCIsImhhbmRsZUl0ZW1DbGljayIsInNlbGVjdGVkQ29udGFjdCIsImZpbmQiLCJpdGVtIiwic2VsZWN0Q29udGFjdCIsImNvbnRhY3QiXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBTUEsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLE9BQU8sRUFBRSxDQURHO0FBRVpDLEVBQUFBLFVBQVUsRUFBRSxFQUZBO0FBR1pDLEVBQUFBLFdBQVcsRUFBRSxFQUhEO0FBSVpDLEVBQUFBLFNBQVMsRUFBRSxDQUpDO0FBS1pDLEVBQUFBLFlBQVksRUFBRSxDQUxGO0FBTVpDLEVBQUFBLFNBQVMsRUFBRSxZQU5DO0FBT1pDLEVBQUFBLElBQUksRUFBRTtBQVBNLENBQWQ7QUFVTyxTQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUMvQixRQUFNO0FBQUVDLElBQUFBLEVB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
