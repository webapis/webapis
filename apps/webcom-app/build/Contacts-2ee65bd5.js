import { h, _ as _extends, m, p, u as useAuthContext, v, B as ListItem, C as List } from './index-ca5036af.js';
import { a as useContactsContext, s as selectContact } from './index-7465321c.js';
import { u as useContacts } from './mobile-28876661.js';

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  const {
    id,
    type = 'text'
  } = props;
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props, {
    "data-testid": id,
    type: type
  })));
}

const initState = {
  users: [],
  loading: false,
  error: null
};
const actionTypes = {
  FETCH_USERS_STARTED: 'FETCH_USERS_STARTED',
  FETCH_USERS_SUCCESS: 'FETCH_USERS_SUCCESS',
  FETCH_USERS_FAILED: 'FETCH_USERS_FAILED'
};

async function fetchUsers({
  dispatch,
  filter
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_USERS_STARTED
    });
    const response = await fetch(`/users/find?filter=${filter}`);
    const {
      users
    } = await response.json();
    debugger;
    dispatch({
      type: actionTypes.FETCH_USERS_SUCCESS,
      users
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_USERS_FAILED,
      error
    });
  }
}

function usersReducer(state, action) {
  switch (action.type) {
    case actionTypes.FETCH_USERS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.FETCH_USERS_SUCCESS:
      const nextState = { ...state,
        users: action.users.map(user => {
          return { ...user,
            state: 'invite'
          };
        })
      };
      debugger;
      return nextState;

    case actionTypes.FETCH_USERS_FAILED:
      return { ...state,
        error: action.error
      };

    default:
      return state;
  }
}

function useUsers({
  filter
}) {
  const [state, dispatch] = m(usersReducer, initState);
  p(() => {
    if (filter && filter.length > 3) {
      fetchUsers({
        dispatch,
        filter
      });
    }
  }, [filter]);
  return {
    state
  };
}

function Contacts() {
  const [state, dispatch] = useContactsContext();
  const {
    state: authState
  } = useAuthContext();
  const [contactsfilter, setContactsFilter] = v(null);
  const [usersFilter, setUsersFilter] = v(null);
  const [items, setItems] = v([]);
  const {
    state: contactState
  } = useContacts({
    filter: contactsfilter,
    username: authState.username
  });
  const {
    state: userState
  } = useUsers({
    filter: usersFilter
  });

  function handleSearch(e) {
    const {
      value
    } = e.target;
    setContactsFilter(value);
  }

  p(() => {
    if (contactState.contacts.length > 0) {
      setItems(contactState.contacts);
    }
  }, [contactState]);
  p(() => {
    if (contactsfilter && contactState.contacts.length === 0) {
      setUsersFilter(contactsfilter);
    }

    if (contactsfilter && contactState.contacts.length > 0) {
      setItems(contactState.contacts);
    }
  }, [contactState.contacts, contactsfilter]);
  p(() => {
    if (usersFilter && userState.users.length > 0) {
      debugger;
      setItems(userState.users);
    }
  }, [userState.users, usersFilter]);

  function handleItemClick(e) {
    const selectedContact = items.find(item => item.username === e.target.id);
    debugger;
    selectContact({
      dispatch,
      contact: selectedContact
    });
  }

  return h("div", null, h(TextInput, {
    id: "contact-search",
    onChange: handleSearch,
    placeholder: "Enter username, or email"
  }), h(List, {
    id: "contacts-list"
  }, items.length > 0 && items.map(item => {
    return h(ListItem, {
      onClick: handleItemClick,
      id: item.username
    }, item.username);
  })));
}

export default Contacts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
