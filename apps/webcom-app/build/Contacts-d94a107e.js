import { h, _ as _extends, m, p, u as useContactsContext, a as useAuthContext, v, L as ListItem, b as List, s as selectContact } from './index-e0c21097.js';

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  const {
    id
  } = props;
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props, {
    "data-testid": id
  })));
}

const actionTypes = {
  FETCH_CONTACTS_STARTED: 'FETCH_CONTACTS_STARTED',
  FETCH_CONTACTS_SUCCESS: 'FETCH_CONTACTS_SUCCESS',
  FETCH_CONTACTS_FAILED: 'FETCH_CONTACTS_FAILED',
  GET_LOCAL_CONTACTS: 'GET_LOCAL_CONTACTS',
  FIND_CONTACT: 'FIND_CONTACT'
};

async function fetchContacts({
  dispatch,
  username
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_STARTED
    });
    const response = await fetch(`/contacts/find?username=${username}`);
    const {
      contacts
    } = await response.json();
    dispatch({
      type: actionTypes.FETCH_CONTACTS_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_FAILED,
      error
    });
  }
}

function getLocalContacts({
  dispatch,
  contacts
}) {
  dispatch({
    type: actionTypes.GET_LOCAL_CONTACTS,
    contacts
  });
}

function findContact({
  dispatch,
  filter
}) {
  dispatch({
    type: actionTypes.FIND_CONTACT,
    filter
  });
}

const initState = {
  loading: false,
  error: null,
  contacts: []
};

function contactsReducer(state, action) {
  switch (action.type) {
    case actionTypes.FETCH_CONTACTS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.FETCH_CONTACTS_SUCCESS:
      return { ...state,
        loading: false,
        contacts: action.contacts
      };

    case actionTypes.FETCH_CONTACTS_FAILED:
      return { ...state,
        loading: false,
        error: action.error
      };

    case actionTypes.FIND_CONTACT:
      return { ...state,
        contacts: state.contacts.filter(c => c.username === action.filter)
      };

    case actionTypes.GET_LOCAL_CONTACTS:
      const nextState = { ...state,
        contacts: action.contacts
      };
      debugger;
      return nextState;

    default:
      return state;
  }
}

function useContacts({
  filter,
  username
}) {
  const [state, dispatch] = m(contactsReducer, initState);
  p(() => {
    if (localStorage.getItem(`contacts-${username}`)) {
      debugger;
      const storage = JSON.parse(localStorage.getItem(`contacts-${username}`));
      getLocalContacts({
        dispatch,
        contacts: storage.contacts
      });
    } else {
      fetchContacts({
        dispatch,
        username
      });
    }
  }, []);
  p(() => {
    if (filter && filter.length > 3) {
      findContact({
        dispatch,
        filter
      });
    }
  }, [filter]);
  return {
    state
  };
}

const initState$1 = {
  users: [],
  loading: false,
  error: null
};
const actionTypes$1 = {
  FETCH_USERS_STARTED: 'FETCH_USERS_STARTED',
  FETCH_USERS_SUCCESS: 'FETCH_USERS_SUCCESS',
  FETCH_USERS_FAILED: 'FETCH_USERS_FAILED'
};

async function fetchUsers({
  dispatch,
  filter
}) {
  try {
    dispatch({
      type: actionTypes$1.FETCH_USERS_STARTED
    });
    const response = await fetch(`/users/find?filter=${filter}`);
    const {
      users
    } = await response.json();
    dispatch({
      type: actionTypes$1.FETCH_USERS_SUCCESS,
      users
    });
  } catch (error) {
    dispatch({
      type: actionTypes$1.FETCH_USERS_FAILED,
      error
    });
  }
}

function usersReducer(state, action) {
  switch (action.type) {
    case actionTypes$1.FETCH_USERS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes$1.FETCH_USERS_SUCCESS:
      return { ...state,
        users: action.users
      };

    case actionTypes$1.FETCH_USERS_FAILED:
      return { ...state,
        error: action.error
      };

    default:
      return state;
  }
}

function useUsers({
  filter
}) {
  const [state, dispatch] = m(usersReducer, initState$1);
  p(() => {
    if (filter && filter.length > 3) {
      fetchUsers({
        dispatch,
        filter
      });
    }
  }, [filter]);
  return {
    state
  };
}

function Contacts() {
  const [state, dispatch] = useContactsContext();
  const {
    state: authState
  } = useAuthContext();
  const [contactsfilter, setContactsFilter] = v(null);
  const [usersFilter, setUsersFilter] = v(null);
  const [items, setItems] = v([]);
  const {
    state: contactState
  } = useContacts({
    filter: contactsfilter,
    username: authState.username
  });
  const {
    state: userState
  } = useUsers({
    filter: usersFilter
  });

  function handleSearch(e) {
    const {
      value
    } = e.target;
    setContactsFilter(value);
  }

  p(() => {
    if (contactState.contacts.length > 0) {
      debugger;
      setItems(contactState.contacts);
    }
  }, [contactState]);
  p(() => {
    if (contactsfilter && contactState.contacts.length === 0) {
      debugger;
      setUsersFilter(contactsfilter);
    }

    if (contactsfilter && contactState.contacts.length > 0) {
      debugger;
      setItems(contactState.contacts);
    }
  }, [contactState.contacts, contactsfilter]);
  p(() => {
    if (usersFilter && userState.users.length > 0) {
      setItems(userState.users);
    }
  }, [userState.users, usersFilter]);

  function handleItemClick(e) {
    const selectedContact = items.find(item => item.username === e.target.id);
    debugger;
    selectContact({
      dispatch,
      contact: selectedContact
    });
  }

  return h("div", null, h(TextInput, {
    id: "contact-search",
    onChange: handleSearch,
    placeholder: "Enter username, or email"
  }), h(List, {
    id: "contacts-list"
  }, items.length > 0 && items.map(item => {
    debugger;
    return h(ListItem, {
      onClick: handleItemClick,
      id: item.username
    }, item.username);
  })));
}

export default Contacts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
