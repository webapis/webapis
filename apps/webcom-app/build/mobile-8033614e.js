import { m, p, v, u as useAuthContext, b as useRouteContext, z as useAppContext, h, U, A as Route, L } from './index-1a2f2f68.js';
import { u as useWebSocketContext, a as useContactsContext } from './index-0f16596a.js';

const status = {
  INVITEE: 'INVITEE',
  INVITER: 'INVITER',
  CHAT: 'CHAT',
  DECLINED: 'DECLINED',
  DECLINER: 'DECLINER',
  BLOCKED: 'BLOCKED',
  BLOCKER: 'BLOCKER'
};

const actionTypes = {
  FETCH_CONTACTS_STARTED: 'FETCH_CONTACTS_STARTED',
  FETCH_CONTACTS_SUCCESS: 'FETCH_CONTACTS_SUCCESS',
  FETCH_CONTACTS_FAILED: 'FETCH_CONTACTS_FAILED',
  GET_LOCAL_CONTACTS: 'GET_LOCAL_CONTACTS',
  FIND_CONTACT: 'FIND_CONTACT',
  CONTACT_IS_ONLINE: 'CONTACT_IS_ONLINE',
  CONTACT_IS_OFFLINE: 'CONTACT_IS_OFFLINE',
  CONTACT_STATE_CHANGED: 'CONTACT_STATE_CHANGED'
};

async function fetchContacts({
  dispatch,
  username
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_STARTED
    });
    const response = await fetch(`/contacts/find?username=${username}`);
    const {
      contacts
    } = await response.json();
    dispatch({
      type: actionTypes.FETCH_CONTACTS_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_FAILED,
      error
    });
  }
}

function getLocalContacts({
  dispatch,
  contacts
}) {
  dispatch({
    type: actionTypes.GET_LOCAL_CONTACTS,
    contacts
  });
}

function findContact({
  dispatch,
  filter
}) {
  dispatch({
    type: actionTypes.FIND_CONTACT,
    filter
  });
}

const initState = {
  loading: false,
  error: null,
  contacts: []
};

function contactsReducer(state, action) {
  switch (action.type) {
    case actionTypes.FETCH_CONTACTS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.FETCH_CONTACTS_SUCCESS:
      return { ...state,
        loading: false,
        contacts: action.contacts
      };

    case actionTypes.FETCH_CONTACTS_FAILED:
      return { ...state,
        loading: false,
        error: action.error
      };

    case actionTypes.FIND_CONTACT:
      return { ...state,
        contacts: state.contacts.filter(c => c.username === action.filter)
      };

    case actionTypes.GET_LOCAL_CONTACTS:
      const nextState = { ...state,
        contacts: action.contacts
      };
      return nextState;

    case actionTypes.CONTACT_IS_ONLINE:
      return { ...state,
        contacts: state.contacts.map(c => {
          if (c.username === action.username) {
            return { ...c,
              online: true
            };
          }
        })
      };

    case actionTypes.CONTACT_IS_OFFLINE:
      return { ...state,
        contacts: state.contacts.map(c => {
          if (c.username === action.username) {
            return { ...c,
              online: false
            };
          }
        })
      };

    case actionTypes.CONTACT_STATE_CHANGED:
      return { ...state,
        contacts: state.contacts.map(c => {
          if (c.username === action.username) {
            return { ...c,
              state: action.state
            };
          }
        })
      };

    default:
      return state;
  }
}

function useContacts({
  filter,
  username
}) {
  const [state, dispatch] = m(contactsReducer, initState);
  p(() => {
    if (localStorage.getItem(`contacts-${username}`)) {
      const storage = JSON.parse(localStorage.getItem(`contacts-${username}`));
      getLocalContacts({
        dispatch,
        contacts: storage.contacts
      });
    } else {
      fetchContacts({
        dispatch,
        username
      });
    }
  }, []);
  p(() => {
    if (filter && filter.length > 3) {
      findContact({
        dispatch,
        filter
      });
    }
  }, [filter]);
  return {
    state
  };
}

function useWebSocket({
  username,
  target,
  dispatch
}) {
  const [message, setMessage] = v('');
  const {
    socket
  } = useWebSocketContext();

  function onInvite() {
    dispatch({
      type: actionTypes.CONTACT_STATE_CHANGED,
      username: target,
      state: status.INVITEE
    });
    let msg = {
      message,
      type: status.INVITEE,
      username,
      target
    };
    socket.send(JSON.stringify(msg));
  }

  function onAccept() {
    dispatch({
      type: actionTypes.CONTACT_STATE_CHANGED,
      username: target,
      state: status.CHAT
    });
    let msg = {
      message,
      type: status.CHAT,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onDecline() {
    dispatch({
      type: actionTypes.CONTACT_STATE_CHANGED,
      username: target,
      state: status.DECLINED
    });
    let msg = {
      type: status.DECLINED,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onBlock() {
    dispatch({
      type: actionTypes.CONTACT_STATE_CHANGED,
      username: target,
      state: status.BLOCKED
    });
    let msg = {
      type: status.BLOCKED,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onUnblock() {
    dispatch({
      type: actionTypes.CONTACT_STATE_CHANGED,
      username: target,
      state: status.CHAT
    });
    let msg = {
      type: status.CHAT,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onChange(e) {
    const {
      value
    } = e.target;
    setMessage(value);
  }

  function sendMessage() {
    try {
      let msg = {
        type: contactStatus.MESSAGE,
        username,
        target,
        message,
        path: 'chat'
      };
      let strMgs = JSON.stringify(msg);
      debugger;
      socket.send(JSON.stringify(strMgs));
    } catch (error) {
      debugger;
    }
  }

  return {
    onInvite,
    onAccept,
    onDecline,
    onBlock,
    onUnblock,
    onChange,
    message,
    sendMessage
  };
}

const Contacts = L(() => import('./Contacts-a39195cb.js'));
const Block = L(() => import('./Block-85182413.js'));
const Blocked = L(() => import('./Blocked-38d48762.js'));
const Chat = L(() => import('./Chat-d637ed42.js'));
const Configure = L(() => import('./Configure-1daf604d.js'));
const Invite = L(() => import('./Invite-1a7797b4.js'));
const Invitee = L(() => import('./Invitee-4cabcfb8.js'));
const Inviter = L(() => import('./Inviter-90d7432b.js'));
function PeerToPeerMobile() {
  const authContext = useAuthContext();
  const [state, dispatch] = useContactsContext();
  const [route, setRoute] = useRouteContext();
  const {
    contact
  } = state;
  const {
    username
  } = authContext.state;
  const {
    accept_inv_img
  } = useAppContext();
  const {
    onInvite,
    onAccept,
    onBlock,
    onUnblock,
    onDecline,
    onChange,
    message,
    sendMessage
  } = useWebSocket({
    username,
    target: contact && contact.username,
    dispatch
  });
  p(() => {
    if (contact) {
      setRoute(`/${contact.state}`);
    }
  }, [contact]);

  function onSetting() {
    setRoute('/cofigure');
  }

  return h("div", {
    style: {
      height: '85vh'
    }
  }, h(Route, {
    path: "/contacts"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Contacts, null))), h(Route, {
    path: "/block"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Block, {
    contact: contact,
    onBlock: onBlock,
    setRoute: setRoute
  }))), h(Route, {
    path: "/blocked"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Blocked, {
    contact: contact,
    onUnblock: onUnblock,
    setRoute: setRoute
  }))), h(Route, {
    path: "/accepted"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Chat, {
    contact: contact,
    onSetting: onSetting,
    onChange: onChange,
    message: message,
    sendMessage: sendMessage
  }))), h(Route, {
    path: "/cofigure"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Configure, {
    contact: contact,
    setRoute: setRoute
  }))), h(Route, {
    path: "/invite"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Invite, {
    contact: contact,
    onInvite: onInvite,
    setRoute: setRoute,
    onChange: onChange,
    message: message
  }))), h(Route, {
    path: "/invitee"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Invitee, {
    contact: contact
  }))), h(Route, {
    path: "/inviter"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Inviter, {
    accept_inv_img: accept_inv_img,
    contact: contact,
    onAccept: onAccept,
    onDecline: onDecline,
    setRoute: setRoute
  }))));
}

export { PeerToPeerMobile as P, useContacts as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
