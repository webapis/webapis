import { M, u as useAuthContext, v, p, h, _ as _extends, T, m, s, a as useMediaQuery, U, R as RouteProvider, L } from './index-ca5036af.js';

const WebSocketContext = M();
function useWebSocketContext() {
  const context = T(WebSocketContext);

  if (!context) {
    throw new Error('useWebSocketContext must be used with WebsocketProvider');
  }

  const {
    socket,
    error,
    message
  } = context;
  return {
    socket,
    error,
    message
  };
} //

function WebSocketProvider(props) {
  const authContext = useAuthContext();
  const {
    username
  } = authContext.state;
  const [socket, setSocket] = v(null);
  const [message, setMessage] = v(null);
  const [error, setError] = v(null);
  p(() => {
    const {
      url
    } = props;

    if (username) {
      setSocket(new WebSocket(`${url}/?username=${username}`));
    }
  }, [username]);
  p(() => {
    if (socket) {
      socket.onmessage = message => {
        console.log('message recieved', message.data, 'username:', username);
        setMessage(JSON.parse(message.data));
      }; //


      socket.onerror = error => {
        setError(error);
      };
    }
  }, [socket]);
  return h(WebSocketContext.Provider, _extends({
    value: {
      socket,
      message,
      error
    }
  }, props));
}

const ContactsContext = M();

function useContactsContext() {
  const context = T(ContactsContext);

  if (!context) {
    throw new Error('useContactsContext must be used with ContactsProvider');
  }

  return context;
}

const actionTypes = {
  SELECTED_CONTACT: 'SELECTED_CONTACT',
  REMOVE_CONTACT: 'REMOVE_CONTACT'
};
function selectContact({
  dispatch,
  contact
}) {
  dispatch({
    type: actionTypes.SELECTED_CONTACT,
    contact
  });
}

function reducer(state, action) {
  switch (action.type) {
    case actionTypes.SELECTED_CONTACT:
      return { ...state,
        contact: action.contact
      };

    case actionTypes.REMOVE_CONTACT:
      return { ...state,
        contact: null
      };

    default:
      return state;
  }
}

function ContactsProvider(props) {
  const [state, dispatch] = m(reducer, {
    contact: null
  });
  const value = s(() => [state, dispatch], [state]);
  return h(ContactsContext.Provider, _extends({
    value: value
  }, props));
}

const HangoutDesktop = L(() => import('./desktop-005d8259.js'));
const HangoutMobile = L(() => import('./mobile-74c7df5d.js'));
function Hangout() {
  const {
    width
  } = useMediaQuery();

  if (width > 0 && width < 800) {
    return h(ContactsProvider, null, h(WebSocketProvider, {
      url: "ws://localhost:3000/hangouts"
    }, h(RouteProvider, {
      initialRoute: "/contacts"
    }, h(U, {
      fallback: h("div", null, "Loading...")
    }, h(HangoutMobile, null)))));
  }

  if (width > 800) {
    return h(ContactsProvider, null, h(WebSocketProvider, {
      url: "ws://localhost:3000/hangouts"
    }, h(U, {
      fallback: h("div", null, "Loading...")
    }, h(HangoutDesktop, null))));
  }
}

export { Hangout as H, useContactsContext as a, selectContact as s, useWebSocketContext as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
