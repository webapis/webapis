import { j as v, p, h } from './index-b9ed463d.js';

const style = {
  root: {
    borderColor: '#eeeeee',
    borderStyle: 'solid',
    borderWidth: 1,
    borderRadius: 5,
    padding: 3,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    minHeight: 35,
    backgroundColor: 'white'
  },
  username: {
    marginRight: 8
  },
  log: {
    display: 'flex',
    color: '#737373',
    fontSize: 10
  }
};
function Message(props) {
  const {
    message
  } = props;
  const {
    float,
    username
  } = message;
  const [days, setDays] = v(0);
  const [hours, setHours] = v(0);
  const [minutes, setMinutes] = v(0);
  const [seconds, setSeconds] = v(0);

  function convertMS(ms) {
    var d, h, m, s;
    s = Math.floor(ms / 1000);
    m = Math.floor(s / 60);
    s = s % 60;
    h = Math.floor(m / 60);
    m = m % 60;
    d = Math.floor(h / 24);
    h = h % 24;
    setDays(d);
    setHours(h);
    setMinutes(m);
    setSeconds(s);
  }

  p(() => {
    setTimeout(() => {
      convertMS(Date.now() - message.timestamp);
    }, 0);
    setInterval(() => {
      convertMS(Date.now() - message.timestamp);
    }, 60000);
  }, []);
  return h("div", {
    style: {
      width: '100%',
      marginBottom: 3
    }
  }, h("div", {
    style: { ...style.root,
      float
    }
  }, h("div", {
    "data-testid": "message",
    style: style.message
  }, message && message.text), h("div", {
    style: style.log
  }, h("div", {
    style: style.username
  }, username && username, ":"), h("div", null, minutes === 0 && h("div", null, "Now"), hours === 0 && minutes > 0 && h("div", null, minutes, " minutes ago "), hours > 0 && days === 0 && h("div", null, hours, " hours ", minutes, " minutes ago", ' '), days <= 10 && days > 1 && h("div", null, days, " days ago"), days > 10 && new Date(message.timestamp)))));
}

export { Message as M };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZS1lNjgzZmI5Mi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3VpL01lc3NhZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5jb25zdCBzdHlsZSA9IHtcclxuICByb290OiB7XHJcbiAgICBib3JkZXJDb2xvcjogJyNlZWVlZWUnLFxyXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcbiAgICBib3JkZXJXaWR0aDogMSxcclxuICAgIGJvcmRlclJhZGl1czogNSxcclxuICAgIHBhZGRpbmc6IDMsXHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcclxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXHJcbiAgICBtaW5IZWlnaHQ6IDM1LFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxyXG4gIH0sXHJcbiAgdXNlcm5hbWU6IHsgbWFyZ2luUmlnaHQ6IDggfSxcclxuICBsb2c6IHtcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGNvbG9yOiAnIzczNzM3MycsXHJcbiAgICBmb250U2l6ZTogMTAsXHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBNZXNzYWdlKHByb3BzKSB7XHJcbiAgY29uc3QgeyBtZXNzYWdlIH0gPSBwcm9wcztcclxuICBjb25zdCB7IGZsb2F0LCB1c2VybmFtZSB9ID0gbWVzc2FnZTtcclxuICBjb25zdCBbZGF5cywgc2V0RGF5c10gPSB1c2VTdGF0ZSgwKTtcclxuICBjb25zdCBbaG91cnMsIHNldEhvdXJzXSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFttaW51dGVzLCBzZXRNaW51dGVzXSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFtzZWNvbmRzLCBzZXRTZWNvbmRzXSA9IHVzZVN0YXRlKDApO1xyXG5cclxuICBmdW5jdGlvbiBjb252ZXJ0TVMobXMpIHtcclxuICAgIHZhciBkLCBoLCBtLCBzO1xyXG4gICAgcyA9IE1hdGguZmxvb3IobXMgLyAxMDAwKTtcclxuICAgIG0gPSBNYXRoLmZsb29yKHMgLyA2MCk7XHJcbiAgICBzID0gcyAlIDYwO1xyXG4gICAgaCA9IE1hdGguZmxvb3IobSAvIDYwKTtcclxuICAgIG0gPSBtICUgNjA7XHJcbiAgICBkID0gTWF0aC5mbG9vcihoIC8gMjQpO1xyXG4gICAgaCA9IGggJSAyNDtcclxuICAgIHNldERheXMoZCk7XHJcbiAgICBzZXRIb3VycyhoKTtcclxuICAgIHNldE1pbnV0ZXMobSk7XHJcbiAgICBzZXRTZWNvbmRzKHMpO1xyXG4gIH1cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGNvbnZlcnRNUyhEYXRlLm5vdygpIC0gbWVzc2FnZS50aW1lc3RhbXApO1xyXG4gICAgfSwgMCk7XHJcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIGNvbnZlcnRNUyhEYXRlLm5vdygpIC0gbWVzc2FnZS50aW1lc3RhbXApO1xyXG4gICAgfSwgNjAwMDApO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyxtYXJnaW5Cb3R0b206MyB9fT5cclxuICAgICAgPGRpdiBzdHlsZT17eyAuLi5zdHlsZS5yb290LCBmbG9hdCB9fT5cclxuICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwibWVzc2FnZVwiIHN0eWxlPXtzdHlsZS5tZXNzYWdlfT57bWVzc2FnZSAmJiBtZXNzYWdlLnRleHR9PC9kaXY+XHJcbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGUubG9nfT5cclxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlLnVzZXJuYW1lfT57dXNlcm5hbWUgJiYgdXNlcm5hbWV9OjwvZGl2PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAge21pbnV0ZXMgPT09IDAgJiYgPGRpdj5Ob3c8L2Rpdj59XHJcbiAgICAgICAgICAgIHtob3VycyA9PT0gMCAmJiBtaW51dGVzID4gMCAmJiA8ZGl2PnttaW51dGVzfSBtaW51dGVzIGFnbyA8L2Rpdj59XHJcbiAgICAgICAgICAgIHtob3VycyA+IDAgJiYgZGF5cyA9PT0gMCAmJiAoXHJcbiAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIHtob3Vyc30gaG91cnMge21pbnV0ZXN9IG1pbnV0ZXMgYWdveycgJ31cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAge2RheXMgPD0gMTAgJiYgZGF5cyA+IDEgJiYgPGRpdj57ZGF5c30gZGF5cyBhZ288L2Rpdj59XHJcbiAgICAgICAgICAgIHtkYXlzID4gMTAgJiYgbmV3IERhdGUobWVzc2FnZS50aW1lc3RhbXApfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsic3R5bGUiLCJyb290IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJtaW5IZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ1c2VybmFtZSIsIm1hcmdpblJpZ2h0IiwibG9nIiwiY29sb3IiLCJmb250U2l6ZSIsIk1lc3NhZ2UiLCJwcm9wcyIsIm1lc3NhZ2UiLCJmbG9hdCIsImRheXMiLCJzZXREYXlzIiwidXNlU3RhdGUiLCJob3VycyIsInNldEhvdXJzIiwibWludXRlcyIsInNldE1pbnV0ZXMiLCJzZWNvbmRzIiwic2V0U2Vjb25kcyIsImNvbnZlcnRNUyIsIm1zIiwiZCIsImgiLCJtIiwicyIsIk1hdGgiLCJmbG9vciIsInVzZUVmZmVjdCIsInNldFRpbWVvdXQiLCJEYXRlIiwibm93IiwidGltZXN0YW1wIiwic2V0SW50ZXJ2YWwiLCJ3aWR0aCIsIm1hcmdpbkJvdHRvbSIsInRleHQiXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBTUEsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxXQUFXLEVBQUUsU0FEVDtBQUVKQyxJQUFBQSxXQUFXLEVBQUUsT0FGVDtBQUdKQyxJQUFBQSxXQUFXLEVBQUUsQ0FIVDtBQUlKQyxJQUFBQSxZQUFZLEVBQUUsQ0FKVjtBQUtKQyxJQUFBQSxPQUFPLEVBQUUsQ0FMTDtBQU1KQyxJQUFBQSxPQUFPLEVBQUUsTUFOTDtBQU9KQyxJQUFBQSxhQUFhLEVBQUUsUUFQWDtBQVFKQyxJQUFBQSxjQUFjLEVBQUUsZUFSWjtBQVNKQyxJQUFBQSxTQUFTLEVBQUUsRUFUUDtBQVVKQyxJQUFBQSxlQUFlLEVBQUU7QUFWYixHQURNO0FBYVpDLEVBQUFBLFFBQVEsRUFBRTtBQUFFQyxJQUFBQSxXQUFXLEVBQUU7QUFBZixHQWJFO0FBY1pDLEVBQUFBLEdBQUcsRUFBRTtBQUNIUCxJQUFBQSxPQUFPLEVBQUUsTUFETjtBQUVIUSxJQUFBQSxLQUFLLEVBQUUsU0FGSjtBQUdIQyxJQUFBQSxRQUFRLEVBQUU7QUFIUDtBQWRPLENBQWQ7QUFxQk8sU0FBU0MsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFDN0IsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQWNELEtBQXBCO0FBQ0EsUUFBTTtBQUFFRSxJQUFBQSxLQUFGO0FBQVNSLElBQUFBO0FBQVQsTUFBc0JPLE9BQTVCO0FBQ0EsUUFBTSxDQUFDRSxJQUFELEVBQU9DLE9BQVAsSUFBa0JDLENBQVEsQ0FBQyxDQUFELENBQWhDO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JGLENBQVEsQ0FBQyxDQUFELENBQWxDO0FBQ0EsUUFBTSxD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
