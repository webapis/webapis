import { c as useAuthContext, d as useFormContext, m as useUserName, a as useAppRoute, b as useMediaQuery, p, n as getTokenFromUrl, h, v as validationTypes, e as valueChanged, o as changePassword } from './index-1e905026.js';
import { P as Paper, F as Form, I as Input, B as Button, G as Grid } from './Grid-224d15ae.js';
import './style-76ca9644.js';

function ChangePassword() {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    token
  } = useUserName();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    password,
    confirm,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var urltoken = url.searchParams.get('token');

    if (urltoken) {
      dispatch(getTokenFromUrl({
        token: urltoken
      }));
    }
  }, []);
  p(() => {
    if (state.authFeedback) {
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  function handleChangePass() {
    dispatch(changePassword({
      dispatch,
      state,
      token,
      formDispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Change Password",
    error: error
  }, h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: handleChangePass,
    title: "Change"
  }))));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtODAzNzMxOGEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0NoYW5nZVBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQge3VzZUFwcFJvdXRlfSBmcm9tICcuLi9hcHAtcm91dGUvQXBwUm91dGVQcm92aWRlcidcclxuaW1wb3J0IHsgdXNlVXNlck5hbWUgfSBmcm9tICcuL3VzZVVzZXJOYW1lJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2hhbmdlUGFzc3dvcmQoKSB7XHJcbiAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgdG9rZW4gfSA9IHVzZVVzZXJOYW1lKCk7XHJcbiAgY29uc3Qge29uQXBwUm91dGV9ID0gdXNlQXBwUm91dGUoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG5cclxuICBjb25zdCB7IHBhc3N3b3JkLCBjb25maXJtLCBlcnJvciB9ID0gc3RhdGU7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsZXQgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB2YXIgdXJsdG9rZW4gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndG9rZW4nKTtcclxuXHJcbiAgICBpZiAodXJsdG9rZW4pIHtcclxuICAgICAgZGlzcGF0Y2goYWN0aW9ucy5nZXRUb2tlbkZyb21VcmwoeyB0b2tlbjogdXJsdG9rZW4gfSkpO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS5hdXRoRmVlZGJhY2spIHtcclxuICAgICAgb25BcHBSb3V0ZSh7ZmVhdHVyZVJvdXRlOiAnL2F1dGhmZWVkYmFjaycscm91dGU6Jy9hdXRoJ30pO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5hdXRoRmVlZGJhY2tdKTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMudmFsdWVDaGFuZ2VkKHtcclxuICAgICAgICBwcm9wTmFtZTogbmFtZSxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVBhc3MoKSB7XHJcbiAgICBkaXNwYXRjaChcclxuICAgICAgYWN0aW9ucy5jaGFuZ2VQYXNzd29yZCh7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgdG9rZW4sXHJcbiAgICAgICAgZm9ybURpc3BhdGNoLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J0NoYW5nZSBQYXNzd29yZCcgZXJyb3I9e2Vycm9yfT5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG5hbWU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17Y29uZmlybX1cclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdjb25maXJtJ1xyXG4gICAgICAgICAgICBuYW1lPSdjb25maXJtJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nQ29uZmlybSBuZXcgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRFNfTUFUQ0hfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIGlkPSdjaGFuZ2UtcGFzcy1idG4nXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdjaGFuZ2UtcGFzcy1idG4nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNoYW5nZVBhc3N9XHJcbiAgICAgICAgICAgIHRpdGxlPSdDaGFuZ2UnXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvRm9ybT5cclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJDaGFuZ2VQYXNzd29yZCIsInN0YXRlIiwiZGlzcGF0Y2giLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwidG9rZW4iLCJ1c2VVc2VyTmFtZSIsIm9uQXBwUm91dGUiLCJ1c2VBcHBSb3V0ZSIsImRldmljZSIsInVzZU1lZGlhUXVlcnkiLCJwYXNzd29yZCIsImNvbmZpcm0iLCJlcnJvciIsInVzZUVmZmVjdCIsInVybCIsIlVSTCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInVybHRva2VuIiwic2VhcmNoUGFyYW1zIiwiZ2V0IiwiYWN0aW9ucyIsImF1dGhGZWVkYmFjayIsImZlYXR1cmVSb3V0ZSIsInJvdXRlIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsInByb3BOYW1lIiwiaGFuZGxlQ2hhbmdlUGFzcyIsInZhbGlkYXRpb25UeXBlcyIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIiwiUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7QUFlZSxTQUFTQSxjQUFULEdBQTBCO0FBQ3ZDLFFBQU07QUFBRUMsSUFBQUEsS0FBRjtB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
