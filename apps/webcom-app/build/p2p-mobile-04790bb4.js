import { a as useRouteContext, u as useMediaQuery, p, h, z as useRootRouteContext, U, A as Route, L } from './index-1a41c7b1.js';
import { a as useContactsContext } from './p2p-e7752933.js';
import { a as Invitation } from './Invitation-80e84562.js';

function PeerToPeerMobileContext({
  children
}) {
  const [state, dispatch] = useContactsContext();
  const [route, setRoute] = useRouteContext();
  const {
    width
  } = useMediaQuery();
  const {
    contact
  } = state;
  p(() => {
    if (width < 800) {
      if (contact && contact.room) {
        setRoute('/p2p-chat');
      } else {
        setRoute('/invitation');
      }
    }
  }, [contact]);
  return children;
}

function Messaging() {
  return h("div", null, "Messaging");
}

const Contacts = L(() => import('./Contacts-154a8428.js'));
const PeerToPeerChat = L(() => import('./p2p-chat-d14143e2.js'));
const PeerToPeer = L(() => import('./p2p-c0b0f1ea.js'));
function PeerToPeerMobile() {
  const [route, setRoute] = useRouteContext();
  const [rootRoute, setRootRoute] = useRootRouteContext();
  const {
    width
  } = useMediaQuery();
  p(() => {
    if (width < 800) {
      setRoute('/contacts');
    }
  }, []);
  return h(PeerToPeerMobileContext, null, h(Route, {
    path: "/contacts"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Contacts, null))), h(Route, {
    path: "/invitation"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Invitation, null))), h(Route, {
    path: "/messaging"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Messaging, null))), h(Route, {
    path: "/p2p-chat"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(PeerToPeerChat, null))));
}

export default PeerToPeerMobile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicDJwLW1vYmlsZS0wNDc5MGJiNC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY2xpZW50L3AycC9wMnAtbW9iaWxlLWNvbnRleHQuanMiLCIuLi8uLi8uLi9jbGllbnQvbWVzc2FnaW5nL01lc3NhZ2luZy5qcyIsIi4uLy4uLy4uL2NsaWVudC9wMnAvcDJwLW1vYmlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgdXNlQ29udGFjdHNDb250ZXh0IH0gZnJvbSAnLi4vY29udGFjdHMvY29udGFjdC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgdXNlUm91dGVDb250ZXh0IH0gZnJvbSAnLi4vcm91dGUvcm91dGVyJztcclxuZXhwb3J0IGZ1bmN0aW9uIFBlZXJUb1BlZXJNb2JpbGVDb250ZXh0KHsgY2hpbGRyZW4gfSkge1xyXG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlQ29udGFjdHNDb250ZXh0KCk7XHJcbiAgY29uc3QgW3JvdXRlLCBzZXRSb3V0ZV0gPSB1c2VSb3V0ZUNvbnRleHQoKTtcclxuICBjb25zdCB7IHdpZHRoIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyBjb250YWN0IH0gPSBzdGF0ZTtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHdpZHRoIDwgODAwKSB7XHJcbiAgIFxyXG4gICAgICBpZiAoY29udGFjdCAmJiBjb250YWN0LnJvb20pIHtcclxuICAgICBcclxuICAgICAgICBzZXRSb3V0ZSgnL3AycC1jaGF0Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0Um91dGUoJy9pbnZpdGF0aW9uJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBbY29udGFjdF0pO1xyXG5cclxuICByZXR1cm4gY2hpbGRyZW47XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZXNzYWdpbmcoKSB7XHJcbiAgcmV0dXJuIDxkaXY+TWVzc2FnaW5nPC9kaXY+O1xyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyBTdXNwZW5zZSwgbGF6eSB9IGZyb20gJ3ByZWFjdC9jb21wYXQnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZUNvbnRleHQgfSBmcm9tICcuLi9yb3V0ZS9yb3V0ZXInO1xyXG5pbXBvcnQgeyB1c2VSb290Um91dGVDb250ZXh0LFJvb3RSb3V0ZSB9IGZyb20gJy4uL3JvdXRlL3Jvb3Qtcm91dGVyJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUm91dGUgfSBmcm9tICcuLi9yb3V0ZS9yb3V0ZXInO1xyXG5pbXBvcnQgeyBQZWVyVG9QZWVyTW9iaWxlQ29udGV4dCB9IGZyb20gJy4uL3AycC9wMnAtbW9iaWxlLWNvbnRleHQnO1xyXG5cclxuaW1wb3J0IEludml0YXRpb24gZnJvbSAnLi4vaW52aXRhdGlvbi9JbnZpdGF0aW9uJztcclxuaW1wb3J0IE1lc3NhZ2luZyBmcm9tICcuLi9tZXNzYWdpbmcvTWVzc2FnaW5nJztcclxuXHJcbmNvbnN0IENvbnRhY3RzID0gbGF6eSgoKSA9PiBpbXBvcnQoJy4uL2NvbnRhY3RzL0NvbnRhY3RzJykpO1xyXG5jb25zdCBQZWVyVG9QZWVyQ2hhdCA9IGxhenkoKCkgPT4gaW1wb3J0KCcuLi9wMnAvcDJwLWNoYXQnKSk7XHJcbmNvbnN0IFBlZXJUb1BlZXIgPSBsYXp5KCgpID0+IGltcG9ydCgnLi9wMnAnKSk7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBlZXJUb1BlZXJNb2JpbGUoKSB7XHJcbiAgY29uc3QgW3JvdXRlLCBzZXRSb3V0ZV0gPSB1c2VSb3V0ZUNvbnRleHQoKTtcclxuICBjb25zdCBbcm9vdFJvdXRlLCBzZXRSb290Um91dGVdID0gdXNlUm9vdFJvdXRlQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgd2lkdGggfSA9IHVzZU1lZGlhUXVlcnkoKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh3aWR0aCA8IDgwMCkge1xyXG4gICAgICBzZXRSb3V0ZSgnL2NvbnRhY3RzJyk7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG4gIHJldHVybiAoXHJcbiAgICA8UGVlclRvUGVlck1vYmlsZUNvbnRleHQ+XHJcbiAgICAgIDxSb3V0ZSBwYXRoPScvY29udGFjdHMnPlxyXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5sb2FkaW5nLi4uPC9kaXY+fT5cclxuICAgICAgICAgIDxDb250YWN0cyAvPlxyXG4gICAgICAgIDwvU3VzcGVuc2U+XHJcbiAgICAgIDwvUm91dGU+XHJcblxyXG4gICAgICA8Um91dGUgcGF0aD0nL2ludml0YXRpb24nPlxyXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5sb2FkaW5nLi4uPC9kaXY+fT5cclxuICAgICAgICAgIDxJbnZpdGF0aW9uIC8+XHJcbiAgICAgICAgPC9TdXNwZW5zZT5cclxuICAgICAgPC9Sb3V0ZT5cclxuICAgICAgPFJvdXRlIHBhdGg9Jy9tZXNzYWdpbmcnPlxyXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5sb2FkaW5nLi4uPC9kaXY+fT5cclxuICAgICAgICAgIDxNZXNzYWdpbmcgLz5cclxuICAgICAgICA8L1N1c3BlbnNlPlxyXG4gICAgICA8L1JvdXRlPlxyXG4gICAgICA8Um91dGUgcGF0aD0nL3AycC1jaGF0Jz5cclxuICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+bG9hZGluZy4uLjwvZGl2Pn0+XHJcbiAgICAgICAgICA8UGVlclRvUGVlckNoYXQgLz5cclxuICAgICAgICA8L1N1c3BlbnNlPlxyXG4gICAgICA8L1JvdXRlPlxyXG4gICAgXHJcbiAgICA8L1BlZXJUb1BlZXJNb2JpbGVDb250ZXh0PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlBlZXJUb1BlZXJNb2JpbGVDb250ZXh0IiwiY2hpbGRyZW4iLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlQ29udGFjdHNDb250ZXh0Iiwicm91dGUiLCJzZXRSb3V0ZSIsInVzZVJvdXRlQ29udGV4dCIsIndpZHRoIiwidXNlTWVkaWFRdWVyeSIsImNvbnRhY3QiLCJ1c2VFZmZlY3QiLCJyb29tIiwiTWVzc2FnaW5nIiwiQ29udGFjdHMiLCJsYXp5IiwiUGVlclRvUGVlckNoYXQiLCJQZWVyVG9QZWVyIiwiUGVlclRvUGVlck1vYmlsZSIsInJvb3RSb3V0ZSIsInNldFJvb3RSb3V0ZSIsInVzZVJvb3RSb3V0ZUNvbnRleHQiLCJTdXNwZW5zZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUtPLFNBQVNBLHVCQUFULENBQWlDO0FBQUVDLEVBQUFBO0FBQUYsQ0FBakMsRUFBK0M7QUFDcEQsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLGtCQUFrQixFQUE1QztBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CQyxlQUFlLEVBQXpDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVlDLGFBQWEsRUFBL0I7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBY1IsS0FBcEI7QUFDQVMsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJSCxLQUFLLEdBQUcsR0FBWixFQUFpQjtBQUVmLFVBQUlFLE9BQU8sSUFBSUEsT0FBTyxDQUFDRSxJQUF2QixFQUE2QjtBQUUzQk4sUUFBQUEsUUFBUSxDQUFDLFdBQUQsQ0FBUjtBQUNELE9BSEQsTUFHTztBQUNMQSxRQUFBQSxRQUFRLENBQUMsYUFBRCxDQUFSO0FBQ0Q7QUFDRjtBQUNGLEdBVlEsRUFVTixDQUFDSSxPQUFELENBVk0sQ0FBVDtBQVlBLFNBQU9ULFFBQVA7QUFDRDs7QUNyQmMsU0FBU1ksU0FBVCxHQUFxQjtBQUNsQyxTQUFPLDJCQUFQO0FBQ0Q7O0FDUUQsTUFBTUMsUUFBUSxHQUFHQyxDQUFJLENBQUMsTUFBTSxPQUFPLHdCQUFQLENBQVAsQ0FBckI7QUFDQSxNQUFNQyxjQUFjLEdBQUdELENBQUksQ0FBQyxNQUFNLE9BQU8sd0JBQVAsQ0FBUCxDQUEzQjtBQUNBLE1BQU1FLFVBQVUsR0FBR0YsQ0FBSSxDQUFDLE1BQU0sT0FBTyxtQkFBUCxDQUFQLENBQXZCO0FBQ2UsU0FBU0csZ0JBQVQsR0FBNEI7QUFDekMsUUFBTSxDQUFDYixLQUFELEVBQVFDLFFBQVIsSUFBb0JDLGVBQWUsRUFBekM7QUFDQSxRQUFNLENBQUNZLFNBQUQsRUFBWUMsWUFBWixJQUE0QkMsbUJBQW1CLEVBQXJEO0FBQ0EsUUFBTTtBQUFFYixJQUFBQTtBQUFGLE1BQVlDLGFBQWEsRUFBL0I7QUFFQUUsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJSCxLQUFLLEdBQUcsR0FBWixFQUFpQjtBQUNmRixNQUFBQSxRQUFRLENBQUMsV0FBRCxDQUFSO0FBQ0Q7QUFDRixHQUpRLEVBSU4sRUFKTSxDQUFUO0FBS0EsU0FDRSxFQUFDLHVCQUFELFFBQ0UsRUFBQyxLQUFEO0FBQU8sSUFBQSxJQUFJLEVBQUM7QUFBWixLQUNFLEVBQUNnQixDQUFEO0FBQVUsSUFBQSxRQUFRLEVBQUU7QUFBcEIsS0FDRSxFQUFDLFFBQUQsT0FERixDQURGLENBREYsRUFPRSxFQUFDLEtBQUQ7QUFBTyxJQUFBLElBQUksRUFBQztBQUFaLEtBQ0UsRUFBQ0EsQ0FBRDtBQUFVLElBQUEsUUFBUSxFQUFFO0FBQXBCLEtBQ0UsRUFBQyxVQUFELE9BREYsQ0FERixDQVBGLEVBWUUsRUFBQyxLQUFEO0FBQU8sSUFBQSxJQUFJLEVBQUM7QUFBWixLQUNFLEVBQUNBLENBQUQ7QUFBVSxJQUFBLFFBQVEsRUFBRTtBQUFwQixLQUNFLEVBQUMsU0FBRCxPQURGLENBREYsQ0FaRixFQWlCRSxFQUFDLEtBQUQ7QUFBTyxJQUFBLElBQUksRUFBQztBQUFaLEtBQ0UsRUFBQ0EsQ0FBRDtBQUFVLElBQUEsUUFBUSxFQUFFO0FBQXBCLEtBQ0UsRUFBQyxjQUFELE9BREYsQ0FERixDQWpCRixDQURGO0FBMEJEOzs7OyJ9
