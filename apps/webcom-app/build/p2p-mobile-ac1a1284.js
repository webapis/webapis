import { u as useContactsContext, b as useRouteContext, a as useMediaQuery, p, h, e as useAuthContext, m, U, D as Route, L } from './index-a411af46.js';
import { B as Button } from './Button-2f3797f9.js';

function PeerToPeerMobileContext({
  children
}) {
  const [state, dispatch] = useContactsContext();
  const [route, setRoute] = useRouteContext();
  const {
    width
  } = useMediaQuery();
  const {
    contact
  } = state;
  p(() => {
    if (width < 800) {
      if (contact && contact.room) {
        debugger;
        setRoute('/p2p-chat');
      } else if (contact && !contact.room) {
        setRoute('/invitation');
      } else {
        setRoute('/contacts');
      }
    }
  }, [contact]);
  return children;
}

var actionTypes = {
  SEND_INVITATION_STARTED: 'SEND_INVITATION_STARTED',
  SEND_INVITATION_SUCCESS: 'SEND_INVITATION_SUCCESS',
  SEND_INVITATION_FAILED: 'SEND_INVITATION_FAILED',
  VALUE_CHANGED: 'VALUE_CHANGED'
};

const initState = {
  loading: false,
  invitations: [],
  error: null,
  message: 'Lest chat on Webcom'
};
function invitationReducer(state, action) {
  switch (action.type) {
    case actionTypes.SEND_INVITATION_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.SEND_INVITATION_SUCCESS:
      return { ...state,
        loading: false,
        invitations: [...state.invitations, action.invitation]
      };

    case actionTypes.SEND_INVITATION_FAILED:
      return { ...state,
        loading: false,
        error: action.error
      };

    case actionTypes.VALUE_CHANGED:
      return { ...state,
        message: action.value
      };

    default:
      return state;
  }
}

async function sendInvitation({
  dispatch,
  message,
  token,
  target
}) {
  try {
    dispatch({
      type: actionTypes.SEND_INVITATION_STARTED
    });
    const response = await fetch('/invitation/insertOne', {
      headers: {
        'Conten-Type': 'application/json',
        'Access-Control-Allow-Headers': '*',
        Authorization: `Bearer ${btoa(`${token}`)}`
      },
      method: 'post',
      body: JSON.stringify({
        target,
        message
      })
    });
    const {
      invation
    } = await response.json();
    dispatch({
      type: actionTypes.SEND_INVITATION_SUCCESS,
      invation
    });
  } catch (error) {
    dispatch({
      type: actionTypes.SEND_INVITATION_FAILED,
      error
    });
  }
}
function valueChanged({
  dispatch,
  value
}) {
  dispatch({
    type: actionTypes.VALUE_CHANGED,
    value
  });
} ///

function PersonAddIcon({
  height = 24,
  width = 24
}) {
  return h("svg", {
    height: height,
    viewBox: "0 0 24 24",
    width: width
  }, h("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }), h("path", {
    d: "M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm-9-2V7H4v3H1v2h3v3h2v-3h3v-2H6zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }));
}

function Invitation({
  invitation
}) {
  const {
    state: authState
  } = useAuthContext();
  const [state, dispatch] = m(invitationReducer, initState);
  const {
    message
  } = state;

  function handleChange(e) {
    valueChanged({
      dispatch,
      value: e.target.value
    });
  }

  function handleSendInvitation() {
    const {
      token
    } = authState;
    const {
      username
    } = invitation;
    sendInvitation({
      dispatch,
      message,
      token,
      target: username
    });
  }

  return h("div", {
    "data-testid": "invitation"
  }, ' ', h(PersonAddIcon, {
    height: 50,
    width: 50
  }), h("p", null, "Start conversation with ", h("i", null, invitation.email), ' '), h("textarea", {
    rows: "3",
    cols: "50",
    onChange: handleChange,
    value: message
  }), h(Button, {
    id: "send-invitation-btn",
    title: "Send Invite",
    onClick: handleSendInvitation
  }), ' ');
}

function PeerToPeerInvitationMobile({
  invitation
}) {
  return h("div", {
    "data-testid": "p2p-invitation-mobile"
  }, h(Invitation, {
    invitation: invitation
  }));
}

function Messaging() {
  return h("div", null, "Messaging");
}

const Contacts = L(() => import('./Contacts-8c832609.js'));
const PeerToPeerChat = L(() => import('./p2p-chat-mobile-ad16a1b1.js'));
function PeerToPeerMobile() {
  const [state, dispatch] = useContactsContext();
  const [route, setRoute] = useRouteContext();
  const {
    contact
  } = state;
  const {
    width
  } = useMediaQuery();
  p(() => {
    if (width < 800) {
      setRoute('/contacts');
    }
  }, []);
  return h(PeerToPeerMobileContext, null, h(Route, {
    path: "/contacts"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Contacts, null))), h(Route, {
    path: "/invitation"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(PeerToPeerInvitationMobile, {
    invitation: contact
  }))), h(Route, {
    path: "/messaging"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Messaging, null))), h(Route, {
    path: "/p2p-chat"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(PeerToPeerChat, {
    chat: contact
  }))));
}

export default PeerToPeerMobile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
