import { b as useAppContext, u as useRouteContext, a as useMediaQuery, p, h, v as validationTypes, m as forgotPassword, c as valueChanged } from './index-bb26dde7.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-5cecc622.js';
import './style-1cf71dce.js';

function RequestPassChange() {
  const {
    form,
    auth
  } = useAppContext();
  const {
    state,
    dispatch
  } = auth;
  const [route, setRoute] = useRouteContext();
  const {
    device
  } = useMediaQuery(); //const { dispatch, state } = useAuthContext();
  //const { dispatch: formDispatch } = useFormContext();

  const {
    email
  } = state;

  function handleForgotPassword() {
    dispatch(forgotPassword({
      dispatch,
      state,
      formDispatch: form.dispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  p(() => {
    if (state.authFeedback) {
      debugger;
      setRoute('/authfeedback');
    }
  }, [state.authFeedback]);
  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Forgot Password"
  }, h(Input, {
    value: email,
    placeholder: "email",
    name: "email",
    onChange: handleChange,
    type: "email",
    id: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.EMAIL_NOT_REGISTERED]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleForgotPassword,
    id: "requestpasschange-btn",
    title: "Send"
  }))));
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtZTM3MjFhNmYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgeyB1c2VBcHBDb250ZXh0IH0gZnJvbSAnLi4vYXBwLWNvbnRleHQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSAnLi4vbGF5b3V0L1BhcGVyJztcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4uL2xheW91dC9HcmlkJztcclxuaW1wb3J0IHsgdXNlUm91dGVDb250ZXh0IH0gZnJvbSAnLi4vcm91dGUvcm91dGVyJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVxdWVzdFBhc3NDaGFuZ2UoKSB7XHJcbiAgY29uc3QgeyBmb3JtLCBhdXRoIH0gPSB1c2VBcHBDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IGF1dGg7XHJcbiAgY29uc3QgW3JvdXRlLCBzZXRSb3V0ZV0gPSB1c2VSb3V0ZUNvbnRleHQoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIC8vY29uc3QgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgLy9jb25zdCB7IGRpc3BhdGNoOiBmb3JtRGlzcGF0Y2ggfSA9IHVzZUZvcm1Db250ZXh0KCk7XHJcbiAgY29uc3QgeyBlbWFpbCB9ID0gc3RhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUZvcmdvdFBhc3N3b3JkKCkge1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMuZm9yZ290UGFzc3dvcmQoeyBkaXNwYXRjaCwgc3RhdGUsIGZvcm1EaXNwYXRjaDogZm9ybS5kaXNwYXRjaCB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgZGlzcGF0Y2goYWN0aW9ucy52YWx1ZUNoYW5nZWQoeyBwcm9wTmFtZTogbmFtZSwgdmFsdWUsIGRpc3BhdGNoLCBzdGF0ZSB9KSk7XHJcbiAgfVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLmF1dGhGZWVkYmFjaykge1xyXG4gICAgICBkZWJ1Z2dlcjtcclxuICAgICAgc2V0Um91dGUoJy9hdXRoZmVlZGJhY2snKTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUuYXV0aEZlZWRiYWNrXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPEZvcm0gZm9ybVRpdGxlPSdGb3Jnb3QgUGFzc3dvcmQnPlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J2VtYWlsJ1xyXG4gICAgICAgICAgICBuYW1lPSdlbWFpbCdcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUZvcmdvdFBhc3N3b3JkfVxyXG4gICAgICAgICAgICBpZD0ncmVxdWVzdHBhc3NjaGFuZ2UtYnRuJ1xyXG4gICAgICAgICAgICB0aXRsZT0nU2VuZCdcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Gb3JtPlxyXG4gICAgICA8L1BhcGVyPlxyXG4gICAgPC9HcmlkPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlJlcXVlc3RQYXNzQ2hhbmdlIiwiZm9ybSIsImF1dGgiLCJ1c2VBcHBDb250ZXh0Iiwic3RhdGUiLCJkaXNwYXRjaCIsInJvdXRlIiwic2V0Um91dGUiLCJ1c2VSb3V0ZUNvbnRleHQiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwiZW1haWwiLCJoYW5kbGVGb3Jnb3RQYXNzd29yZCIsImFjdGlvbnMiLCJmb3JtRGlzcGF0Y2giLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJ1c2VFZmZlY3QiLCJhdXRoRmVlZGJhY2siLCJ2YWxpZGF0aW9uVHlwZXMiLCJFTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIkVNQUlMX05PVF9SRUdJU1RFUkVEIl0sIm1hcHBpbmdzIjoiOzs7O0FBYWUsU0FBU0EsaUJBQVQsR0FBNkI7QUFDMUMsUUFBTTtBQUFFQyxJQUFBQSxJQUFGO0FBQVFDLElBQUFBO0FBQVIsTUFBaUJDLGFBQWEsRUFBcEM7QUFDQSxRQUFNO0FBQUVDLElBQUFBLEtBQUY7QUFBU0MsSUFBQUE7QUFBVCxNQUFzQkgsSUFBNUI7QUFDQSxRQUFNLENBQUNJLEtBQUQsRUFBUUMsUUFBUixJQUFvQkMsZUFBZSxFQUF6QztBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDLENBSjBDO0FBTTFDOztBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFZUCxLQUFsQjs7QUFFQSxXQUFTUSxvQkFBVCxHQUFnQztBQUM5QlAsSUFBQUEsUUFBUSxDQUNOUSxjQUFBLENBQXVCO0FBQUVSLE1BQUFBLFFBQUY7QUFBWUQsTUFBQUEsS0FBWjtBQUFtQlUsTUFBQUEsWUFBWSxFQUFFYixJQUFJLENBQUNJO0FBQXRDLEtBQXZCLENBRE0sQ0FBUjtBQUdEOztBQUNELFdBQVNVLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FkLElBQUFBLFFBQVEsQ0FBQ1EsWUFBQSxDQUFxQjtBQUFFTyxNQUFBQSxRQUFRLEVBQUVILElBQVo7QUFBa0JDLE1BQUFBLEtBQWxCO0FBQXlCYixNQUFBQSxRQUF6QjtBQUFtQ0QsTUFBQUE7QUFBbkMsS0FBckIsQ0FBRCxDQUFSO0FBQ0Q7O0FBRURpQixFQUFBQSxDQUFTLENBQUMsTUFBTTtBQUNkLFFBQUlqQixLQUFLLENBQUNrQixZQUFWLEVBQXdCO0FBQ3RCO0FBQ0FmLE1BQUFBLFFBQVEsQ0FBQyxlQUFELENBQVI7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDSCxLQUFLLENBQUNrQixZQUFQLENBTE0sQ0FBVDtBQU9BLFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUViLE1BQU0sS0FBSyxPQUFYLEdBQXFCLEdBQXJCLEdBQTJCO0FBQXhDLEtBQ0UsRUFBQyxLQUFELFFBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUUsS0FEVDtBQUVFLElBQUEsV0FBVyxFQUFDLE9BRmQ7QUFHRSxJQUFBLElBQUksRUFBQyxPQUhQO0FBSUUsSUFBQSxRQUFRLEVBQUVJLFlBSlo7QUFLRSxJQUFBLElBQUksRUFBQyxPQUxQO0FBTUUsSUFBQSxFQUFFLEVBQUMsT0FOTDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZRLGVBQWUsQ0FBQ0MsdUJBREQsRUFFZkQsZUFBZSxDQUFDRSxvQkFGRDtBQVBuQixJQURGLEVBYUUsRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRWIsb0JBSFg7QUFJRSxJQUFBLEVBQUUsRUFBQyx1QkFKTDtBQUtFLElBQUEsS0FBSyxFQUFDO0FBTFIsSUFiRixDQURGLENBREYsQ0FERjtBQTJCRDs7OzsifQ==
