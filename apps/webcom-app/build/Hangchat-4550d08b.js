import { h, y, b as useMediaQuery, p } from './index-58f1b195.js';
import { A as AsyncButton } from './index-d62add4f.js';
import { L as Layout } from './Layout-a672d7a9.js';
import { M as Message } from './Message-5618fdc6.js';

const styles = {
  root: {
    display: 'flex',
    alignItems: 'center',
    // position:'fixed',
    width: '100%' // bottom:10,
    // right:10,

  },
  input: {
    //margin:0
    padding: 5,
    marginLeft: 8,
    marginRight: 8,
    marginTop: 8,
    marginBottom: 8,
    boxSizing: 'border-box',
    flex: 1,
    width: '100%'
  },
  btn: {
    padding: 8,
    marginLeft: 16,
    marginRight: 16,
    marginTop: 8,
    marginBottom: 8,
    boxSizing: 'border-box',
    flex: 1
  }
};
function MessageEditor({
  loading,
  messageText,
  onMessageText,
  onMessage,
  hangout
}) {
  return h("div", {
    style: styles.root
  }, h("div", {
    style: {
      flex: 1
    }
  }, h("input", {
    style: styles.input,
    disabled: hangout && hangout.state === 'BLOCKED',
    type: "text",
    onChange: onMessageText,
    "data-testid": "message-input",
    value: messageText
  })), h("div", {
    style: {
      marginLeft: 3
    }
  }, h(AsyncButton, {
    loading: loading,
    disabled: hangout && hangout.state === 'BLOCKED',
    style: styles.btn,
    id: "MESSAGE",
    onClick: onMessage,
    "data-testid": "send-btn"
  }, "SENT")));
}

const style = {
  color: 'red',
  float: 'right',
  width: '100%',
  fontSize: 16,
  textAlign: 'end'
};
function BlockerMessage({
  message
}) {
  return h("div", {
    style: style,
    "data-testid": "blocker-message"
  }, message.text);
}

const style$1 = {
  color: 'red',
  float: 'right',
  width: '100%',
  fontSize: 16,
  textAlign: 'end'
};
function BlockedMessage({
  message,
  onNavigation
}) {
  function handleNavigation(e) {
    e.preventDefault();
    onNavigation(e);
  }

  debugger;
  return h("div", {
    style: style$1,
    "data-testid": "blocked-message"
  }, message.text, h("a", {
    id: "UNBLOCK",
    "data-testid": "seemore-btn",
    href: "/",
    onClick: handleNavigation
  }, "see more"));
}

const styles$1 = {
  messageContainer: {
    // width: '100%',
    boxSizing: 'border-box',
    padding: 3,
    //  backgroundColor: 'orange',
    flex: 3,
    overflowY: 'auto',
    overflowX: "hidden"
  }
};
function Messages({
  messages,
  onMessage,
  onMessageText,
  messageText,
  username,
  hangout,
  onNavigation,
  loading
}) {
  const scrollerRef = y(null);
  const {
    device
  } = useMediaQuery();
  p(() => {
    if (messages) {
      scrollerRef.current.scrollTop = scrollerRef.current.scrollHeight;
    }
  }, [messages]);

  function onSend(e) {
    onMessage(e);
    scrollerRef.current.scrollTop = scrollerRef.current.scrollHeight;
  }

  return h("div", {
    style: {
      boxSizing: 'border-box',
      width: '100%',
      height: '100%',
      display: 'flex',
      flexDirection: 'column'
    }
  }, h("div", {
    style: { ...styles$1.messageContainer,
      flex: device === 'phone' ? 4 : 2
    },
    ref: scrollerRef
  }, messages && messages.length > 0 && floatMessages({
    messages: sortMessages({
      messages
    }),
    username
  }).map(m => h("div", {
    style: {
      display: 'flex'
    }
  }, ' ', !m.type && h(Message, {
    message: m
  }), m.type && m.type === 'blocker' && h(BlockerMessage, {
    message: m
  }), m.type && m.type === 'blocked' && h(BlockedMessage, {
    message: m,
    onNavigation: onNavigation
  })))), h("div", {
    style: {
      flex: 1
    }
  }, h(MessageEditor, {
    loading: loading,
    hangout: hangout,
    onMessage: onSend,
    messageText: messageText,
    onMessageText: onMessageText
  })));
}

function floatMessages({
  messages,
  username
}) {
  if (messages && messages.length > 0 && username) {
    return messages.map(msg => {
      if (msg.username === username) {
        return { ...msg,
          float: 'right',
          username: 'me'
        };
      } else {
        return { ...msg,
          float: 'left'
        };
      }
    });
  } else {
    return null;
  }
}

function sortMessages({
  messages
}) {
  if (messages) {
    return messages.sort();
  } else {
    return null;
  }
}

function Hangchat({
  loading,
  messages = [],
  onMessageText,
  onMessage,
  messageText,
  username,
  hangout,
  onNavigation,
  dispatch
}) {
  p(() => {
    document.title = hangout.username;
  }, []);
  return h(Layout, {
    id: "hangchat-ui"
  }, h(Messages, {
    loading: loading,
    onNavigation: onNavigation,
    hangout: hangout,
    messages: messages,
    onMessage: onMessage,
    onMessageText: onMessageText,
    messageText: messageText,
    username: username
  }));
}

export default Hangchat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFuZ2NoYXQtNDU1MGQwOGIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9tZXNzYWdlLXVpL01lc3NhZ2VFZGl0b3IuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvbWVzc2FnZS11aS9CbG9ja2VyTWVzc2FnZS5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9tZXNzYWdlLXVpL0Jsb2NrZWRNZXNzYWdlLmpzIiwiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL21lc3NhZ2UtdWkvTWVzc2FnZXMuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvc3RhdGUtdWkvSGFuZ2NoYXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvVGV4dElucHV0JztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdXR0b24nO1xyXG5pbXBvcnQgQXN5bmNCdXR0b24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9hc3luYy1idXR0b24nXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICByb290OiB7XHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgLy8gcG9zaXRpb246J2ZpeGVkJyxcclxuICAgIHdpZHRoOicxMDAlJyxcclxuICAgIC8vIGJvdHRvbToxMCxcclxuICAgIC8vIHJpZ2h0OjEwLFxyXG4gIH0sXHJcbiAgaW5wdXQ6IHtcclxuICAgIC8vbWFyZ2luOjBcclxuICAgIHBhZGRpbmc6IDUsXHJcbiAgICBtYXJnaW5MZWZ0OiA4LFxyXG4gICAgbWFyZ2luUmlnaHQ6IDgsXHJcbiAgICBtYXJnaW5Ub3A6IDgsXHJcbiAgICBtYXJnaW5Cb3R0b206IDgsXHJcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgIGZsZXg6IDEsXHJcbiAgICB3aWR0aDonMTAwJSdcclxuICB9LFxyXG4gIGJ0bjp7XHJcbiAgICBwYWRkaW5nOiA4LFxyXG4gICAgbWFyZ2luTGVmdDogMTYsXHJcbiAgICBtYXJnaW5SaWdodDogMTYsXHJcbiAgICBtYXJnaW5Ub3A6IDgsXHJcbiAgICBtYXJnaW5Cb3R0b206IDgsXHJcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgIGZsZXg6IDEsXHJcbiAgfVxyXG59O1xyXG5leHBvcnQgZnVuY3Rpb24gTWVzc2FnZUVkaXRvcih7IGxvYWRpbmcsbWVzc2FnZVRleHQsIG9uTWVzc2FnZVRleHQsIG9uTWVzc2FnZSxoYW5nb3V0IH0pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBzdHlsZT17c3R5bGVzLnJvb3R9PlxyXG4gICAgIDxkaXYgc3R5bGU9e3tmbGV4OjF9fT5cclxuICAgICA8aW5wdXQgc3R5bGU9e3N0eWxlcy5pbnB1dH0gZGlzYWJsZWQ9e2hhbmdvdXQgJiZoYW5nb3V0LnN0YXRlPT09J0JMT0NLRUQnfSAgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17b25NZXNzYWdlVGV4dH0gIGRhdGEtdGVzdGlkPVwibWVzc2FnZS1pbnB1dFwiIHZhbHVlPXttZXNzYWdlVGV4dH0vPlxyXG4gICAgIDwvZGl2PlxyXG4gICBcclxuICAgICAgXHJcbiAgICAgIDxkaXYgc3R5bGU9e3ttYXJnaW5MZWZ0OjN9fT5cclxuICAgICAgICA8QXN5bmNCdXR0b24gbG9hZGluZz17bG9hZGluZ30gZGlzYWJsZWQ9e2hhbmdvdXQgJiZoYW5nb3V0LnN0YXRlPT09J0JMT0NLRUQnfSAgc3R5bGU9e3N0eWxlcy5idG59ICAgaWQ9J01FU1NBR0UnIG9uQ2xpY2s9e29uTWVzc2FnZX0gZGF0YS10ZXN0aWQ9J3NlbmQtYnRuJz5cclxuU0VOVFxyXG4gICAgICAgIDwvQXN5bmNCdXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5jb25zdCBzdHlsZSA9IHtcclxuICAgIGNvbG9yOiAncmVkJyxcclxuICAgIGZsb2F0OiAncmlnaHQnLFxyXG4gICAgd2lkdGg6ICcxMDAlJyxcclxuICAgIGZvbnRTaXplOiAxNixcclxuICAgIHRleHRBbGlnbjogJ2VuZCdcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gQmxvY2tlck1lc3NhZ2UoeyBtZXNzYWdlIH0pIHtcclxuICAgIHJldHVybiA8ZGl2IHN0eWxlPXtzdHlsZX0gZGF0YS10ZXN0aWQ9XCJibG9ja2VyLW1lc3NhZ2VcIj57bWVzc2FnZS50ZXh0fTwvZGl2PlxyXG59IiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCdcclxuY29uc3Qgc3R5bGUgPSB7XHJcbiAgICBjb2xvcjogJ3JlZCcsXHJcbiAgICBmbG9hdDogJ3JpZ2h0JyxcclxuICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICBmb250U2l6ZTogMTYsXHJcbiAgICB0ZXh0QWxpZ246ICdlbmQnXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIEJsb2NrZWRNZXNzYWdlKHsgbWVzc2FnZSxvbk5hdmlnYXRpb24gfSkge1xyXG4gICAgZnVuY3Rpb24gaGFuZGxlTmF2aWdhdGlvbihlKXtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBvbk5hdmlnYXRpb24oZSlcclxuICAgIH1cclxuICAgIGRlYnVnZ2VyO1xyXG4gICAgcmV0dXJuIDxkaXYgc3R5bGU9e3N0eWxlfSBkYXRhLXRlc3RpZD1cImJsb2NrZWQtbWVzc2FnZVwiPnttZXNzYWdlLnRleHR9XHJcbiAgICA8YSBpZD1cIlVOQkxPQ0tcIiBkYXRhLXRlc3RpZD1cInNlZW1vcmUtYnRuXCIgaHJlZj1cIi9cIiBvbkNsaWNrPXtoYW5kbGVOYXZpZ2F0aW9ufT5zZWUgbW9yZTwvYT5cclxuICAgIDwvZGl2PlxyXG59IiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4vTWVzc2FnZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VFZGl0b3IgfSBmcm9tICcuL01lc3NhZ2VFZGl0b3InO1xyXG5pbXBvcnQgeyBCbG9ja2VyTWVzc2FnZSB9IGZyb20gJy4vQmxvY2tlck1lc3NhZ2UnXHJcbmltcG9ydCB7QmxvY2tlZE1lc3NhZ2V9IGZyb20gJy4vQmxvY2tlZE1lc3NhZ2UnXHJcbmltcG9ydCB7dXNlTWVkaWFRdWVyeX0gZnJvbSAnLi4vLi4vbGF5b3V0L3VzZU1lZGlhUXVlcnknXHJcbmNvbnN0IHN0eWxlcyA9IHtcclxuICBtZXNzYWdlQ29udGFpbmVyOiB7XHJcbiAgICAvLyB3aWR0aDogJzEwMCUnLFxyXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXHJcbiAgICBwYWRkaW5nOiAzLFxyXG4gIC8vICBiYWNrZ3JvdW5kQ29sb3I6ICdvcmFuZ2UnLFxyXG4gICAgZmxleDogMyxcclxuICAgIG92ZXJmbG93WTogJ2F1dG8nLFxyXG4gICAgb3ZlcmZsb3dYOiBcImhpZGRlblwiXHJcblxyXG4gIH0sXHJcbn07XHJcbmV4cG9ydCBmdW5jdGlvbiBNZXNzYWdlcyh7XHJcbiAgbWVzc2FnZXMsXHJcbiAgb25NZXNzYWdlLFxyXG4gIG9uTWVzc2FnZVRleHQsXHJcbiAgbWVzc2FnZVRleHQsXHJcbiAgdXNlcm5hbWUsXHJcbiAgaGFuZ291dCxcclxuICBvbk5hdmlnYXRpb24sXHJcbiAgbG9hZGluZ1xyXG59KSB7XHJcbiAgY29uc3Qgc2Nyb2xsZXJSZWYgPSB1c2VSZWYobnVsbCk7XHJcbmNvbnN0IHtkZXZpY2V9PXVzZU1lZGlhUXVlcnkoKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKG1lc3NhZ2VzKSB7XHJcbiAgICAgIHNjcm9sbGVyUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsZXJSZWYuY3VycmVudC5zY3JvbGxIZWlnaHQ7XHJcbiAgICB9XHJcbiAgfSwgW21lc3NhZ2VzXSk7XHJcblxyXG4gIGZ1bmN0aW9uIG9uU2VuZChlKSB7XHJcbiAgICBvbk1lc3NhZ2UoZSk7XHJcbiAgICBzY3JvbGxlclJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IHNjcm9sbGVyUmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0O1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBzdHlsZT17eyBib3hTaXppbmc6ICdib3JkZXItYm94Jywgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMTAwJScsIGRpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogJ2NvbHVtbid9fT5cclxuICAgICAgPGRpdiBzdHlsZT17ey4uLnN0eWxlcy5tZXNzYWdlQ29udGFpbmVyLGZsZXg6IGRldmljZT09PSdwaG9uZSc/NDoyfX0gcmVmPXtzY3JvbGxlclJlZn0+XHJcbiAgICAgICAge21lc3NhZ2VzICYmICBcclxuICAgICAgICAgIG1lc3NhZ2VzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgIGZsb2F0TWVzc2FnZXMoeyBtZXNzYWdlczogc29ydE1lc3NhZ2VzKHsgbWVzc2FnZXMgfSksIHVzZXJuYW1lIH0pLm1hcChcclxuICAgICAgICAgICAgKG0pID0+IChcclxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JyB9fT5cclxuICAgICAgICAgICAgICAgIHsnICd9XHJcbiAgICAgICAgICAgICAgICB7IW0udHlwZSAmJiA8TWVzc2FnZSBtZXNzYWdlPXttfSAvPn1cclxuICAgICAgICAgICAgICAgIHttLnR5cGUgJiYgbS50eXBlID09PSAnYmxvY2tlcicgJiYgPEJsb2NrZXJNZXNzYWdlIG1lc3NhZ2U9e219IC8+fVxyXG4gICAgICAgICAgICAgICAge20udHlwZSAmJiBtLnR5cGUgPT09ICdibG9ja2VkJyAmJiA8QmxvY2tlZE1lc3NhZ2UgbWVzc2FnZT17bX0gb25OYXZpZ2F0aW9uPXtvbk5hdmlnYXRpb259Lz59XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IHN0eWxlPXt7ZmxleDoxfX0+XHJcbiAgICAgICAgPE1lc3NhZ2VFZGl0b3JcclxuICAgICAgICAgbG9hZGluZz17bG9hZGluZ31cclxuICAgICAgICAgIGhhbmdvdXQ9e2hhbmdvdXR9XHJcbiAgICAgICAgICBvbk1lc3NhZ2U9e29uU2VuZH1cclxuICAgICAgICAgIG1lc3NhZ2VUZXh0PXttZXNzYWdlVGV4dH1cclxuICAgICAgICAgIG9uTWVzc2FnZVRleHQ9e29uTWVzc2FnZVRleHR9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG5mdW5jdGlvbiBmbG9hdE1lc3NhZ2VzKHsgbWVzc2FnZXMsIHVzZXJuYW1lIH0pIHtcclxuICBpZiAobWVzc2FnZXMgJiYgbWVzc2FnZXMubGVuZ3RoID4gMCAmJiB1c2VybmFtZSkge1xyXG4gICAgcmV0dXJuIG1lc3NhZ2VzLm1hcCgobXNnKSA9PiB7XHJcbiAgICAgIGlmIChtc2cudXNlcm5hbWUgPT09IHVzZXJuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgLi4ubXNnLCBmbG9hdDogJ3JpZ2h0JywgdXNlcm5hbWU6ICdtZScgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4geyAuLi5tc2csIGZsb2F0OiAnbGVmdCcgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBzb3J0TWVzc2FnZXMoeyBtZXNzYWdlcyB9KSB7XHJcbiAgaWYgKG1lc3NhZ2VzKSB7XHJcbiAgICByZXR1cm4gbWVzc2FnZXMuc29ydCgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7dXNlRWZmZWN0fSBmcm9tICdwcmVhY3QvaG9va3MnXHJcbmltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnLi4vbWVzc2FnZS11aS9NZXNzYWdlcyc7XHJcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4vTGF5b3V0JztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIYW5nY2hhdCh7XHJcbiAgbG9hZGluZyxcclxuICBtZXNzYWdlcyA9IFtdLFxyXG4gIG9uTWVzc2FnZVRleHQsXHJcbiAgb25NZXNzYWdlLFxyXG4gIG1lc3NhZ2VUZXh0LFxyXG4gIHVzZXJuYW1lLFxyXG4gIGhhbmdvdXQsXHJcbiAgb25OYXZpZ2F0aW9uLFxyXG4gIGRpc3BhdGNoXHJcbn0pIHtcclxuXHJcbiAgdXNlRWZmZWN0KCgpPT57XHJcbiAgICBkb2N1bWVudC50aXRsZT1oYW5nb3V0LnVzZXJuYW1lXHJcblxyXG4gIH0sW10pXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TGF5b3V0IGlkPVwiaGFuZ2NoYXQtdWlcIiA+XHJcbiAgICAgIDxNZXNzYWdlc1xyXG4gICAgICBsb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICBvbk5hdmlnYXRpb249e29uTmF2aWdhdGlvbn1cclxuICAgICAgICBoYW5nb3V0PXtoYW5nb3V0fVxyXG4gICAgICAgIG1lc3NhZ2VzPXttZXNzYWdlc31cclxuICAgICAgICBvbk1lc3NhZ2U9e29uTWVzc2FnZX1cclxuICAgICAgICBvbk1lc3NhZ2VUZXh0PXtvbk1lc3NhZ2VUZXh0fVxyXG4gICAgICAgIG1lc3NhZ2VUZXh0ID17bWVzc2FnZVRleHR9XHJcbiAgICAgICAgdXNlcm5hbWU9e3VzZXJuYW1lfVxyXG4gICAgICAvPlxyXG4gICAgPC9MYXlvdXQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsic3R5bGVzIiwicm9vdCIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwid2lkdGgiLCJpbnB1dCIsInBhZGRpbmciLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3hTaXppbmciLCJmbGV4IiwiYnRuIiwiTWVzc2FnZUVkaXRvciIsImxvYWRpbmciLCJtZXNzYWdlVGV4dCIsIm9uTWVzc2FnZVRleHQiLCJvbk1lc3NhZ2UiLCJoYW5nb3V0Iiwic3RhdGUiLCJzdHlsZSIsImNvbG9yIiwiZmxvYXQiLCJmb250U2l6ZSIsInRleHRBbGlnbiIsIkJsb2NrZXJNZXNzYWdlIiwibWVzc2FnZSIsInRleHQiLCJCbG9ja2VkTWVzc2FnZSIsIm9uTmF2aWdhdGlvbiIsImhhbmRsZU5hdmlnYXRpb24iLCJlIiwicHJldmVudERlZmF1bHQiLCJtZXNzYWdlQ29udGFpbmVyIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiTWVzc2FnZXMiLCJtZXNzYWdlcyIsInVzZXJuYW1lIiwic2Nyb2xsZXJSZWYiLCJ1c2VSZWYiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwidXNlRWZmZWN0IiwiY3VycmVudCIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsIm9uU2VuZCIsImhlaWdodCIsImZsZXhEaXJlY3Rpb24iLCJsZW5ndGgiLCJmbG9hdE1lc3NhZ2VzIiwic29ydE1lc3NhZ2VzIiwibWFwIiwibSIsInR5cGUiLCJtc2ciLCJzb3J0IiwiSGFuZ2NoYXQiLCJkaXNwYXRjaCIsImRvY3VtZW50IiwidGl0bGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsTUFBTUEsTUFBTSxHQUFHO0FBQ2JDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxPQUFPLEVBQUUsTUFETDtBQUVKQyxJQUFBQSxVQUFVLEVBQUUsUUFGUjtBQUdMO0FBQ0NDLElBQUFBLEtBQUssRUFBQyxNQUpGO0FBTUo7O0FBTkksR0FETztBQVNiQyxFQUFBQSxLQUFLLEVBQUU7QUFDTDtBQUNBQyxJQUFBQSxPQUFPLEVBQUUsQ0FGSjtBQUdMQyxJQUFBQSxVQUFVLEVBQUUsQ0FIUDtBQUlMQyxJQUFBQSxXQUFXLEVBQUUsQ0FKUjtBQUtMQyxJ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
