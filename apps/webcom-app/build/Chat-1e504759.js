import { h, v, p, _ as _extends } from './index-59182f33.js';

const DateLinebreak = ({
  datetime
}) => {
  return h("div", {
    style: {
      display: 'flex'
    }
  }, h("div", {
    style: {
      flex: '1'
    }
  }, h("hr", null)), h("div", {
    style: {
      fontSize: 10,
      color: '#737373'
    }
  }, new Date(datetime).toLocaleDateString()), h("div", {
    style: {
      flex: 1
    }
  }, h("hr", null)));
};

const MessageAligner = ({
  children,
  side,
  style
}) => {
  const alignment = side === "left" ? "flex-start" : "flex-end";
  return h("div", {
    style: {
      display: "flex",
      justifyContent: alignment,
      ...style
    }
  }, children);
};

const MessageView = ({
  message,
  datetime
}) => h("div", {
  style: {
    borderRadius: 15,
    //borderColor: '#9E9E9E',
    //borderStyle: 'solid',
    //borderWidth: 2,
    maxWidth: '100%',
    wordWrap: 'break-word',
    wordBreak: 'break-all',
    minWidth: '30%'
  }
}, h("div", {
  style: {
    backgroundColor: '#ffffff',
    padding: 5,
    margin: 2,
    borderRadius: 50
  }
}, message), h("div", {
  style: {
    fontSize: 10,
    paddingTop: 2,
    textAlign: 'end'
  }
}, h("i", {
  style: {
    backgroundColor: 'transparent',
    color: '#737373'
  }
}, new Date(datetime).toLocaleTimeString())));

const SubsequentMessage = ({
  message,
  datetime
}) => {
  return h("div", {
    style: {
      display: "flex",
      alignItems: "center",
      marginLeft: 45
    }
  }, h(MessageView, {
    message: message,
    datetime: datetime,
    backgroundColor: "#FFECB3"
  }));
};

const style = {
  height: 30,
  width: 40,
  padding: 3,
  borderRadius: 30,
  backgroundColor: 'darkSmoke',
  borderStyle: 'solid',
  borderWidth: 2,
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  color: '#009688',
  borderColor: '#80cbc4'
};

const MessageAvatar = ({
  letter = 'U'
}) => h("div", {
  style: style
}, h("div", null, letter.toUpperCase()));

const FirstMessage = ({
  message,
  datetime,
  letter,
  local
}) => {
  return h("div", {
    style: {
      display: "flex",
      alignItems: "center"
    }
  }, !local && h(MessageAvatar, {
    letter: letter
  }), h(MessageView, {
    message: message,
    datetime: datetime,
    backgroundColor: "#FFECB3"
  }));
};

/* eslint-disable react/jsx-props-no-spreading */

const MessageObjectMappter = props => {
  const {
    order,
    dateSpace
  } = props;
  return h("div", null, dateSpace && h(DateLinebreak, props), h(MessageAligner, props, order === 'F' ? h(FirstMessage, props) : h(SubsequentMessage, props)));
};

const useMessageSorter = messages => {
  const [sortedMessages, setSortedMessages] = v(messages);
  p(() => {
    setSortedMessages(messages.sort((a, b) => a.datetime - b.datetime));
  }, [messages]);
  return {
    sortedMessages
  };
};

const useMessagesMapper = messages => {
  const [mappedMessages, setMappedMessages] = v(messages);

  const mapMessages = () => {
    const localSide = "right";
    const remoteSide = "left";

    if (messages.length === 0) {
      return [];
    }

    let email = messages[0].from;
    let lastDatetime = messages[0].datetime;
    return messages.map((m, i) => {
      if (i === 0 && m.local) {
        return { ...m,
          side: localSide,
          order: "F",
          dateSpace: true
        };
      }

      if (i === 0 && !m.local) {
        const letter = m.from[0] !== undefined ? m.from[0] : "";
        return { ...m,
          side: remoteSide,
          order: "F",
          dateSpace: true,
          letter
        };
      }

      if (i > 0 && email === m.from && m.local) {
        if (new Date(lastDatetime).getDate() !== new Date(m.datetime).getDate()) {
          email = m.from;
          lastDatetime = m.datetime;
          return { ...m,
            side: localSide,
            order: "S",
            dateSpace: true
          };
        }

        email = m.from;
        lastDatetime = m.datetime;
        return { ...m,
          side: localSide,
          order: "S",
          dateSpace: false
        };
      }

      if (i > 0 && email !== m.from && m.local) {
        if (new Date(lastDatetime).getDate() === new Date(m.datetime).getDate()) {
          email = m.from;
          lastDatetime = m.datetime;
          return { ...m,
            side: localSide,
            order: "F",
            dateSpace: false
          };
        }

        email = m.from;
        lastDatetime = m.datetime;
        return { ...m,
          side: localSide,
          order: "F",
          dateSpace: true
        };
      }

      if (i > 0 && email === m.from && !m.local) {
        if (new Date(lastDatetime).getDate() !== new Date(m.datetime).getDate()) {
          const letter = m.from[0] !== undefined ? m.from[0] : "";
          lastDatetime = m.datetime;
          return { ...m,
            side: remoteSide,
            order: "S",
            dateSpace: true,
            letter
          };
        }

        const letter = m.from[0] !== undefined ? m.from[0] : "";
        lastDatetime = m.datetime;
        return { ...m,
          side: remoteSide,
          order: "S",
          dateSpace: false,
          letter
        };
      }

      if (i > 0 && email !== m.from && !m.local) {
        if (new Date(lastDatetime).getDate() === new Date(m.datetime).getDate()) {
          const letter = m.from[0] !== undefined ? m.from[0] : "";
          email = m.from;
          lastDatetime = m.datetime;
          return { ...m,
            side: remoteSide,
            order: "F",
            dateSpace: false,
            letter
          };
        }

        const letter = m.from[0] !== undefined ? m.from[0] : "";
        email = m.from;
        lastDatetime = m.datetime;
        return { ...m,
          side: remoteSide,
          order: "F",
          dateSpace: true,
          letter
        };
      }

      return null;
    });
  };

  p(() => {
    setMappedMessages(mapMessages());
  }, [messages]);
  return {
    mappedMessages
  };
};

const MessageCollectionView = ({
  messages
}) => {
  if (messages.length > 0) {
    return messages.map((message, i) => h(MessageObjectMappter, _extends({}, message, {
      key: i
    })));
  }

  return null;
};

/* eslint-disable react/no-deprecated */

const MessageViewScroller = ({
  children
}) => {
  return h("div", {
    style: {
      transform: 'rotate(180deg)',
      height: '85%',
      backgroundColor: '#eeeeee',
      overflow: 'auto',
      width: '100%'
    }
  }, h("div", {
    style: {
      transform: 'rotate(180deg)'
    }
  }, children));
};

const MessageEditorDisplayer = ({
  onMessageChange,
  message,
  sendMessage,
  id = 0,
  disabled
}) => h("div", {
  style: {
    display: 'flex'
  }
}, h("input", {
  style: {
    flex: 1
  },
  "data-testid": `message${id}`,
  onInput: onMessageChange,
  value: message,
  name: "message",
  type: "text",
  placeholder: "Enter message text"
}), h("div", {
  style: {
    display: 'flex'
  }
}, h("button", {
  "data-testid": `sendMessage${id}`,
  disabled: message === '' || disabled,
  style: {
    marginLeft: 2,
    width: '100%'
  },
  onClick: sendMessage
}, h("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, h("path", {
  d: "M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"
}), h("path", {
  d: "M0 0h24v24H0z",
  fill: "none"
})))));

/* eslint-disable no-shadow */

const MessagesDisplayer = ({
  messages,
  socket,
  id,
  messageText,
  sendMessage,
  handleMessageChange
}) => {
  const {
    sortedMessages
  } = useMessageSorter(messages);
  const {
    mappedMessages
  } = useMessagesMapper(sortedMessages);
  return [h(MessageViewScroller, null, h(MessageCollectionView, {
    messages: mappedMessages
  })), h(MessageEditorDisplayer, {
    disabled: socket === null,
    id: id,
    message: messageText,
    sendMessage: sendMessage,
    onMessageChange: handleMessageChange
  })];
};

function Settings({
  height = 24,
  width = 24,
  fill = 'none',
  color = 'black'
}) {
  return h("svg", {
    height: height,
    viewBox: "0 0 24 24",
    width: width
  }, h("path", {
    d: "M0 0h24v24H0V0z",
    fill: fill
  }), h("path", {
    color: color,
    d: "M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"
  }));
}

function Chat({
  contact,
  onSetting
}) {
  const {
    messages
  } = contact;
  return h("div", {
    className: "chat-state-view",
    style: {
      margin: 8,
      height: '100%'
    },
    "data-testid": "chat"
  }, h("div", {
    style: {
      display: 'flex',
      justifyContent: 'flex-end',
      width: '100%'
    }
  }, h("div", {
    style: {
      paddingRight: 8,
      paddingTop: 8
    },
    onClick: onSetting,
    "data-testid": "setting"
  }, h(Settings, null))), h("hr", {
    style: {
      width: '99%'
    }
  }), h(MessagesDisplayer, {
    messages: messages
  }));
}

export default Chat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
