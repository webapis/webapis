import { a as useAuthContext, f as useFormContext, t as useUserName, e as useRouteContext, c as useMediaQuery, p, w as getTokenFromUrl, h, g as validationTypes, i as valueChanged, x as changePassword } from './index-39e7257b.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-c5da0b7c.js';
import './style-23846375.js';

function ChangePassword() {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    token
  } = useUserName();
  const [route, setRoute] = useRouteContext();
  const {
    device
  } = useMediaQuery();
  const {
    password,
    confirm,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var urltoken = url.searchParams.get('token');

    if (urltoken) {
      dispatch(getTokenFromUrl({
        token: urltoken
      }));
    }
  }, []);
  p(() => {
    if (state.authFeedback) {
      setRoute('/authfeedback');
    }
  }, [state.authFeedback]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  function handleChangePass() {
    dispatch(changePassword({
      dispatch,
      state,
      token,
      formDispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Change Password",
    error: error
  }, h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: handleChangePass,
    title: "Change"
  }))));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtMDUzOTE2YWEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0NoYW5nZVBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZUNvbnRleHQgfSBmcm9tICcuLi9yb3V0ZS9yb3V0ZXInO1xyXG5pbXBvcnQgeyB1c2VVc2VyTmFtZSB9IGZyb20gJy4vdXNlVXNlck5hbWUnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDaGFuZ2VQYXNzd29yZCgpIHtcclxuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdXNlQXV0aENvbnRleHQoKTtcclxuICBjb25zdCB7IGRpc3BhdGNoOiBmb3JtRGlzcGF0Y2ggfSA9IHVzZUZvcm1Db250ZXh0KCk7XHJcbiAgY29uc3QgeyB0b2tlbiB9ID0gdXNlVXNlck5hbWUoKTtcclxuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVJvdXRlQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcblxyXG4gIGNvbnN0IHsgcGFzc3dvcmQsIGNvbmZpcm0sIGVycm9yIH0gPSBzdGF0ZTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxldCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuICAgIHZhciB1cmx0b2tlbiA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCd0b2tlbicpO1xyXG5cclxuICAgIGlmICh1cmx0b2tlbikge1xyXG4gICAgICBkaXNwYXRjaChhY3Rpb25zLmdldFRva2VuRnJvbVVybCh7IHRva2VuOiB1cmx0b2tlbiB9KSk7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLmF1dGhGZWVkYmFjaykge1xyXG4gICAgICBzZXRSb3V0ZSgnL2F1dGhmZWVkYmFjaycpO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5hdXRoRmVlZGJhY2tdKTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMudmFsdWVDaGFuZ2VkKHtcclxuICAgICAgICBwcm9wTmFtZTogbmFtZSxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVBhc3MoKSB7XHJcbiAgICBkaXNwYXRjaChcclxuICAgICAgYWN0aW9ucy5jaGFuZ2VQYXNzd29yZCh7XHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgdG9rZW4sXHJcbiAgICAgICAgZm9ybURpc3BhdGNoLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J0NoYW5nZSBQYXNzd29yZCcgZXJyb3I9e2Vycm9yfT5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG5hbWU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17Y29uZmlybX1cclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdjb25maXJtJ1xyXG4gICAgICAgICAgICBuYW1lPSdjb25maXJtJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nQ29uZmlybSBuZXcgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRFNfTUFUQ0hfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIGlkPSdjaGFuZ2UtcGFzcy1idG4nXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdjaGFuZ2UtcGFzcy1idG4nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNoYW5nZVBhc3N9XHJcbiAgICAgICAgICAgIHRpdGxlPSdDaGFuZ2UnXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvRm9ybT5cclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJDaGFuZ2VQYXNzd29yZCIsInN0YXRlIiwiZGlzcGF0Y2giLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwidG9rZW4iLCJ1c2VVc2VyTmFtZSIsInJvdXRlIiwic2V0Um91dGUiLCJ1c2VSb3V0ZUNvbnRleHQiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwicGFzc3dvcmQiLCJjb25maXJtIiwiZXJyb3IiLCJ1c2VFZmZlY3QiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ1cmx0b2tlbiIsInNlYXJjaFBhcmFtcyIsImdldCIsImFjdGlvbnMiLCJhdXRoRmVlZGJhY2siLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJoYW5kbGVDaGFuZ2VQYXNzIiwidmFsaWRhdGlvblR5cGVzIiwiUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT04iLCJQQVNTV09SRFNfTUFUQ0hfVkFMSURBVElPTiJdLCJtYXBwaW5ncyI6Ijs7OztBQWVlLFNBQVNBLGNBQVQsR0FBMEI7QUFDdkMsUUFBTTtBQUFFQyxJQUFBQSxLQUFGO0FBQVNDLElBQUFBO0FBQVQsTUFBc0JDLGNBQWMsRUFBMUM7QUFDQSxRQUFN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
