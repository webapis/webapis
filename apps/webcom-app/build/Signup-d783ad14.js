import {
  b as useAuthContext,
  c as useFormContext,
  u as useRouteContext,
  a as useMediaQuery,
  p,
  h,
  v as validationTypes,
  q as signup,
  d as valueChanged,
} from "./index-a45f22ef.js";
import {
  P as Paper,
  F as Form,
  I as Input,
  B as Button,
  G as Grid,
} from "./Grid-5c4f045b.js";
import "./style-0252033b.js";

function Signup() {
  const { state, dispatch } = useAuthContext();
  const { dispatch: formDispatch } = useFormContext();
  const [route, setRoute] = useRouteContext();
  const { device } = useMediaQuery();
  const { username, password, email } = state;
  p(() => {
    if (state.token) {
      setRoute("/");
    }
  }, [state.token]);

  function handleSignup() {
    dispatch(
      signup({
        dispatch,
        state,
        formDispatch,
      })
    );
  }

  function handleChange(e) {
    const { name, value } = e.target;
    dispatch(
      valueChanged({
        propName: name,
        value,
        dispatch,
        state,
      })
    );
  }

  return h(
    Grid,
    {
      width: device === "phone" ? 100 : 25,
    },
    h(
      Paper,
      null,
      h(
        Form,
        {
          formTitle: "Sign up",
        },
        h(Input, {
          value: username,
          onChange: handleChange,
          type: "text",
          id: "username",
          name: "username",
          placeholder: "username",
          validationTypes: [
            validationTypes.USERNAME_FORMAT_VALIDATION,
            validationTypes.USERNAME_TAKEN,
          ],
        }),
        h(Input, {
          onChange: handleChange,
          value: email,
          placeholder: "email",
          type: "email",
          id: "email",
          name: "email",
          validationTypes: [
            validationTypes.EMAIL_FORMAT_VALIDATION,
            validationTypes.REGISTERED_EMAIL,
          ],
        }),
        h(Input, {
          onChange: handleChange,
          value: password,
          placeholder: "password",
          type: "password",
          id: "password",
          name: "password",
          validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION],
        }),
        h(Button, {
          className: "btn",
          type: "button",
          onClick: handleSignup,
          id: "signup-btn",
          title: "Signup",
        })
      )
    )
  );
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLWQ3ODNhZDE0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcbmltcG9ydCB7IHVzZUZvcm1Db250ZXh0IH0gZnJvbSAnLi4vZm9ybS9mb3JtLWNvbnRleHQnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4uL2xheW91dC9HcmlkJztcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSAnLi4vbGF5b3V0L1BhcGVyJztcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XG5pbXBvcnQgeyB1c2VSb3V0ZUNvbnRleHQgfSBmcm9tICcuLi9yb3V0ZS9yb3V0ZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lnbnVwKCkge1xuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdXNlQXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVJvdXRlQ29udGV4dCgpO1xuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwgfSA9IHN0YXRlO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0ZS50b2tlbikge1xuICAgICAgc2V0Um91dGUoJy8nKTtcbiAgICB9XG4gIH0sIFtzdGF0ZS50b2tlbl0pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVNpZ251cCgpIHtcbiAgICBkaXNwYXRjaChcbiAgICAgIGFjdGlvbnMuc2lnbnVwKHtcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBmb3JtRGlzcGF0Y2gsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcbiAgICBkaXNwYXRjaChcbiAgICAgIGFjdGlvbnMudmFsdWVDaGFuZ2VkKHtcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxuICAgICAgPFBhcGVyPlxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J1NpZ24gdXAnPlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIHR5cGU9J3RleHQnXG4gICAgICAgICAgICBpZD0ndXNlcm5hbWUnXG4gICAgICAgICAgICBuYW1lPSd1c2VybmFtZSdcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSd1c2VybmFtZSdcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04sXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9UQUtFTixcbiAgICAgICAgICAgIF19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nZW1haWwnXG4gICAgICAgICAgICB0eXBlPSdlbWFpbCdcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcbiAgICAgICAgICAgIG5hbWU9J2VtYWlsJ1xuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlJFR0lTVEVSRURfRU1BSUwsXG4gICAgICAgICAgICBdfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J3Bhc3N3b3JkJ1xuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXG4gICAgICAgICAgICBpZD0ncGFzc3dvcmQnXG4gICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9J2J0bidcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNpZ251cH1cbiAgICAgICAgICAgIGlkPSdzaWdudXAtYnRuJ1xuICAgICAgICAgICAgdGl0bGU9J1NpZ251cCdcbiAgICAgICAgICAvPlxuICAgICAgICA8L0Zvcm0+XG4gICAgICA8L1BhcGVyPlxuICAgIDwvR3JpZD5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJTaWdudXAiLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlQXV0aENvbnRleHQiLCJmb3JtRGlzcGF0Y2giLCJ1c2VGb3JtQ29udGV4dCIsInJvdXRlIiwic2V0Um91dGUiLCJ1c2VSb3V0ZUNvbnRleHQiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImVtYWlsIiwidXNlRWZmZWN0IiwidG9rZW4iLCJoYW5kbGVTaWdudXAiLCJhY3Rpb25zIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsInByb3BOYW1lIiwidmFsaWRhdGlvblR5cGVzIiwiVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04iLCJVU0VSTkFNRV9UQUtFTiIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiUkVHSVNURVJFRF9FTUFJTCIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7O0FBY2UsU0FBU0EsTUFBVCxHQUFrQjtBQUMvQixRQUFNO0FBQUVDLElBQUFBLEtBQUY7QUFBU0MsSUFBQUE7QUFBVCxNQUFzQkMsY0FBYyxFQUExQztBQUNBLFFBQU07QUFBRUQsSUFBQUEsUUFBUSxFQUFFRTtBQUFaLE1BQTZCQyxjQUFjLEVBQWpEO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLGVBQWUsRUFBekM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxRQUFaO0FBQXNCQyxJQUFBQTtBQUF0QixNQUFnQ1osS0FBdEM7QUFDQWEsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJYixL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
