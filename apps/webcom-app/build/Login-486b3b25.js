import { u as useAppContext, h } from './index-80c6e9b3.js';
import { B as Button, v as validationTypes, I as Input, F as Form, a as valueChanged, l as login } from './actions-7d86d0c9.js';

function Login() {
  const {
    auth,
    form
  } = useAppContext();
  const {
    emailorusername,
    password,
    error
  } = auth.state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  function handleLogin() {
    auth.dispatch(login({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  return h("div", {
    "dat-testid": "laoginform",
    className: "surface"
  }, h(Form, {
    formTitle: "Login",
    error: error
  }, h(Input, {
    value: emailorusername,
    onChange: handleChange,
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS, validationTypes.EMAIL_NOT_REGISTERED, validationTypes.USERNAME_NOT_REGISTERED]
  }), h(Input, {
    value: password,
    onChange: handleChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Button, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: handleLogin,
    title: "LOGIN"
  }), h("a", {
    href: "#/requestpasschange"
  }, "Forgot Password!")));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tNDg2YjNiMjUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBcHBDb250ZXh0IH0gZnJvbSAnLi4vYXBwLWNvbnRleHQnO1xyXG5cclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9naW4oKSB7XHJcbiAgY29uc3QgeyBhdXRoLCBmb3JtIH0gPSB1c2VBcHBDb250ZXh0KCk7XHJcblxyXG4gIGNvbnN0IHsgZW1haWxvcnVzZXJuYW1lLCBwYXNzd29yZCwgZXJyb3IgfSA9IGF1dGguc3RhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGF1dGguZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMudmFsdWVDaGFuZ2VkKHtcclxuICAgICAgICBwcm9wTmFtZTogbmFtZSxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBkaXNwYXRjaDogYXV0aC5kaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUxvZ2luKCkge1xyXG4gICAgYXV0aC5kaXNwYXRjaChcclxuICAgICAgYWN0aW9ucy5sb2dpbih7XHJcbiAgICAgICAgZGlzcGF0Y2g6IGF1dGguZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGU6IGF1dGguc3RhdGUsXHJcbiAgICAgICAgZm9ybURpc3BhdGNoOiBmb3JtLmRpc3BhdGNoLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGRhdC10ZXN0aWQ9J2xhb2dpbmZvcm0nIGNsYXNzTmFtZT0nc3VyZmFjZSc+XHJcbiAgICAgIDxGb3JtIGZvcm1UaXRsZT0nTG9naW4nIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgPElucHV0XHJcbiAgICAgICAgICB2YWx1ZT17ZW1haWxvcnVzZXJuYW1lfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIG5hbWU9J2VtYWlsb3J1c2VybmFtZSdcclxuICAgICAgICAgIHR5cGU9J3RleHQnXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0nRW50ZXIgZW1haWwgb3IgdXNlcm5hbWUnXHJcbiAgICAgICAgICBpZD0nZW1haWxPclVzZXJuYW1lJ1xyXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9J2VtYWlsT3JVc2VybmFtZSdcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfT1JfRU1BSUxfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5JTlZBTElEX0NSRURFTlRJQUxTLFxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfTk9UX1JFR0lTVEVSRUQsXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgIF19XHJcbiAgICAgICAgLz5cclxuXHJcbiAgICAgICAgPElucHV0XHJcbiAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICB0eXBlPSdwYXNzd29yZCdcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbnRlciBwYXNzd29yZCdcclxuICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgIGRhdGEtdGVzdGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5JTlZBTElEX0NSRURFTlRJQUxTLFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICBpZD0nbG9naW4tYnRuJ1xyXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9J2xvZ2luLWJ0bidcclxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUxvZ2lufVxyXG4gICAgICAgICAgdGl0bGU9J0xPR0lOJ1xyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPGEgaHJlZj0nIy9yZXF1ZXN0cGFzc2NoYW5nZSc+Rm9yZ290IFBhc3N3b3JkITwvYT5cclxuICAgICAgPC9Gb3JtPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiTG9naW4iLCJhdXRoIiwiZm9ybSIsInVzZUFwcENvbnRleHQiLCJlbWFpbG9ydXNlcm5hbWUiLCJwYXNzd29yZCIsImVycm9yIiwic3RhdGUiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwiZGlzcGF0Y2giLCJhY3Rpb25zIiwicHJvcE5hbWUiLCJoYW5kbGVMb2dpbiIsImZvcm1EaXNwYXRjaCIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX09SX0VNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiSU5WQUxJRF9DUkVERU5USUFMUyIsIkVNQUlMX05PVF9SRUdJU1RFUkVEIiwiVVNFUk5BTUVfTk9UX1JFR0lTVEVSRUQiLCJFTVBUWV9TVFJJTkdfVkFMSURBVElPTiJdLCJtYXBwaW5ncyI6Ijs7O0FBVWUsU0FBU0EsS0FBVCxHQUFpQjtBQUM5QixRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUE7QUFBUixNQUFpQkMsYUFBYSxFQUFwQztBQUVBLFFBQU07QUFBRUMsSUFBQUEsZUFBRjtBQUFtQkMsSUFBQUEsUUFBbkI7QUFBNkJDLElBQUFBO0FBQTdCLE1BQXVDTCxJQUFJLENBQUNNLEtBQWxEOztBQUVBLFdBQVNDLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FYLElBQUFBLElBQUksQ0FBQ1ksUUFBTCxDQUNFQyxZQUFBLENBQXFCO0FBQ25CQyxNQUFBQSxRQUFRLEVBQUVMLElBRFM7QUFFbkJDLE1BQUFBLEtBRm1CO0FBR25CRSxNQUFBQSxRQUFRLEVBQUVaLElBQUksQ0FBQ1ksUUFISTtBQUluQk4sTUFBQUEsS0FBSyxFQUFFTixJQUFJLENBQUNNO0FBSk8sS0FBckIsQ0FERjtBQVFEOztBQUNELFdBQVNTLFdBQVQsR0FBdUI7QUFDckJmLElBQUFBLElBQUksQ0FBQ1ksUUFBTCxDQUNFQyxLQUFBLENBQWM7QUFDWkQsTUFBQUEsUUFBUSxFQUFFWixJQUFJLENBQUNZLFFBREg7QUFFWk4sTUFBQUEsS0FBSyxFQUFFTixJQUFJLENBQUNNLEtBRkE7QUFHWlUsTUFBQUEsWUFBWSxFQUFFZixJQUFJLENBQUNXO0FBSFAsS0FBZCxDQURGO0FBT0Q7O0FBRUQsU0FDRTtBQUFLLGtCQUFXLFlBQWhCO0FBQTZCLElBQUEsU0FBUyxFQUFDO0FBQXZDLEtBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUMsT0FBaEI7QUFBd0IsSUFBQSxLQUFLLEVBQUVQO0FBQS9CLEtBQ0UsRUFBQyxLQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVGLGVBRFQ7QUFFRSxJQUFBLFFBQVEsRUFBRUksWUFGWjtBQUdFLElBQUEsSUFBSSxFQUFDLGlCQUhQO0FBSUUsSUFBQSxJQUFJLEVBQUMsTUFKUDtBQUtFLElBQUEsV0FBVyxFQUFDLHlCQUxkO0FBTUUsSUFBQSxFQUFFLEVBQUMsaUJBTkw7QUFPRSxtQkFBWSxpQkFQZDtBQVFFLElBQUEsZUFBZSxFQUFFLENBQ2ZVLGVBQWUsQ0FBQ0MsbUNBREQsRUFFZkQsZUFBZSxDQUFDRSxtQkFGRCxFQUdmRixlQUFlLENBQUNHLG9CQUhELEVBSWZILGVBQWUsQ0FBQ0ksdUJBSkQ7QUFSbkIsSUFERixFQWlCRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRWpCLFFBRFQ7QUFFRSxJQUFBLFFBQVEsRUFBRUcsWUFGWjtBQUdFLElBQUEsSUFBSSxFQUFDLFVBSFA7QUFJRSxJQUFBLElBQUksRUFBQyxVQUpQO0FBS0UsSUFBQSxXQUFXLEVBQUMsZ0JBTGQ7QUFNRSxJQUFBLEVBQUUsRUFBQyxVQU5MO0FBT0UsbUJBQVksVUFQZDtBQVFFLElBQUEsZUFBZSxFQUFFLENBQ2ZVLGVBQWUsQ0FBQ0ssdUJBREQsRUFFZkwsZUFBZSxDQUFDRSxtQkFGRDtBQVJuQixJQWpCRixFQStCRSxFQUFDLE1BQUQ7QUFDRSxJQUFBLElBQUksRUFBQyxRQURQO0FBRUUsSUFBQSxFQUFFLEVBQUMsV0FGTDtBQUdFLG1CQUFZLFdBSGQ7QUFJRSxJQUFBLE9BQU8sRUFBRUosV0FKWDtBQUtFLElBQUEsS0FBSyxFQUFDO0FBTFIsSUEvQkYsRUFzQ0U7QUFBRyxJQUFBLElBQUksRUFBQztBQUFSLHdCQXRDRixDQURGLENBREY7QUE0Q0Q7Ozs7In0=
