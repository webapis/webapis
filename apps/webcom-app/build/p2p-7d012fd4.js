import { M, m, s, h, _ as _extends, T, p, u as useMediaQuery, R as RouteProvider, U, L } from './index-bd4474da.js';

const ContactsContext = M();

function useContactsContext() {
  const context = T(ContactsContext);

  if (!context) {
    throw new Error('useContactsContext must be used with ContactsProvider');
  }

  return context;
}

const actionTypes = {
  SELECTED_CONTACT: 'SELECTED_CONTACT',
  REMOVE_CONTACT: 'REMOVE_CONTACT'
};
function selectContact({
  dispatch,
  contact
}) {
  dispatch({
    type: actionTypes.SELECTED_CONTACT,
    contact
  });
}

function reducer(state, action) {
  switch (action.type) {
    case actionTypes.SELECTED_CONTACT:
      return { ...state,
        contact: action.contact
      };

    case actionTypes.REMOVE_CONTACT:
      return { ...state,
        contact: null
      };

    default:
      return state;
  }
}

function ContactsProvider(props) {
  const [state, dispatch] = m(reducer, {
    contact: null
  });
  const value = s(() => [state, dispatch], [state]);
  return h(ContactsContext.Provider, _extends({
    value: value
  }, props));
}

const P2PDesktopContext = M();
const actionTypes$1 = {
  ADD_INVITATION: 'ADD_INVITATION',
  REMOVE_INVITATION: 'REMOVE_INVITATION',
  ADD_CHAT: 'ADD_CHAT',
  REMOVE_CHAT: 'REMOVE_CHAT'
};

function useP2PDesktopContext() {
  const context = T(P2PDesktopContext);

  if (!context) {
    throw new Error('useP2PDesktopContext must be used with P2PDesktopProvider');
  }

  return context;
}

function reducer$1(state, action) {
  switch (action.type) {
    case actionTypes$1.ADD_CHAT:
      debugger;
      return { ...state,
        chats: [...state.chats, action.contact]
      };

    case actionTypes$1.REMOVE_CHAT:
      return { ...state,
        chats: state.chats.filter(chat => chat.room !== action.room)
      };

    case actionTypes$1.ADD_INVITATION:
      debugger;
      return { ...state,
        invitations: [...state.invitations, action.contact]
      };

    case actionTypes$1.REMOVE_INVITATION:
      return { ...state,
        invitations: state.filter(inv => inv.username !== action.username)
      };

    default:
      return state;
  }
}

function P2PDesktopProvider(props) {
  const context = useContactsContext();
  const [state, dispatch] = m(reducer$1, {
    invitations: [],
    chats: []
  });
  const {
    contact
  } = context[0];
  const {
    chats,
    invitations
  } = state;
  p(() => {
    if (contact) {
      if (contact.room) {
        if (chats.length === 0) {
          debugger;
          dispatch({
            type: actionTypes$1.ADD_CHAT,
            contact
          });
        } else if (chats.length > 0 && !chats.find(chat => chat.room === contact.room)) {
          dispatch({
            type: actionTypes$1.ADD_CHAT,
            contact
          });
        }
      } else {
        if (invitations.length === 0) {
          debugger;
          dispatch({
            type: actionTypes$1.ADD_INVITATION,
            contact
          });
        } else if (invitations.length > 0 && !invitations.find(inv => inv.username === contact.username)) {
          dispatch({
            type: actionTypes$1.ADD_INVITATION,
            contact
          });
        }
      }
    }
  }, [contact]);
  const value = s(() => [state, dispatch], [state]);
  return h(P2PDesktopContext.Provider, _extends({
    value: value
  }, props));
}

const PeerToPeerDesktop = L(() => import('./p2p-desktop-70d89878.js'));
const PeerToPeerMobile = L(() => import('./p2p-mobile-58d55c3a.js'));
function PeerToPeer() {
  const {
    width
  } = useMediaQuery();

  if (width > 0 && width < 800) {
    return h(U, {
      fallback: h("div", null, "Loading...")
    }, h(ContactsProvider, null, h(RouteProvider, {
      initialRoute: "/contacts"
    }, h(PeerToPeerMobile, null))));
  }

  if (width > 800) {
    return h(U, {
      fallback: h("div", null, "Loading...")
    }, h(ContactsProvider, null, h(P2PDesktopProvider, null, h(PeerToPeerDesktop, null))));
  }
}

export { PeerToPeer as P, useContactsContext as a, selectContact as s, useP2PDesktopContext as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
