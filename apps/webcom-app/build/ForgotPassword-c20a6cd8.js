import { u as useRouteContext, a as useMediaQuery, b as useAuthContext, c as useFormContext, p, h, v as validationTypes, o as forgotPassword, d as valueChanged } from './index-99b2ef90.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-325a7174.js';
import './style-2da5d5f2.js';

function RequestPassChange() {
  const [route, setRoute] = useRouteContext();
  const {
    device
  } = useMediaQuery();
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    email
  } = state;

  function handleForgotPassword() {
    dispatch(forgotPassword({
      dispatch,
      state,
      formDispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  p(() => {
    if (state.authFeedback) {
      debugger;
      setRoute('/authfeedback');
    }
  }, [state.authFeedback]);
  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Forgot Password"
  }, h(Input, {
    value: email,
    placeholder: "email",
    name: "email",
    onChange: handleChange,
    type: "email",
    id: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.EMAIL_NOT_REGISTERED]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleForgotPassword,
    id: "requestpasschange-btn",
    title: "Send"
  }))));
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtYzIwYTZjZDguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZUNvbnRleHQgfSBmcm9tICcuLi9yb3V0ZS9yb3V0ZXInO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZXF1ZXN0UGFzc0NoYW5nZSgpIHtcclxuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVJvdXRlQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZW1haWwgfSA9IHN0YXRlO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVGb3Jnb3RQYXNzd29yZCgpIHtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMuZm9yZ290UGFzc3dvcmQoeyBkaXNwYXRjaCwgc3RhdGUsIGZvcm1EaXNwYXRjaCB9KSk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMudmFsdWVDaGFuZ2VkKHsgcHJvcE5hbWU6IG5hbWUsIHZhbHVlLCBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS5hdXRoRmVlZGJhY2spIHtcclxuICAgICAgZGVidWdnZXI7XHJcbiAgICAgIHNldFJvdXRlKCcvYXV0aGZlZWRiYWNrJyk7XHJcbiAgICB9XHJcbiAgfSwgW3N0YXRlLmF1dGhGZWVkYmFja10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEdyaWQgd2lkdGg9e2RldmljZSA9PT0gJ3Bob25lJyA/IDEwMCA6IDI1fT5cclxuICAgICAgPFBhcGVyPlxyXG4gICAgICAgIDxGb3JtIGZvcm1UaXRsZT0nRm9yZ290IFBhc3N3b3JkJz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcclxuICAgICAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHR5cGU9J2VtYWlsJ1xyXG4gICAgICAgICAgICBpZD0nZW1haWwnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfTk9UX1JFR0lTVEVSRUQsXHJcbiAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2J0bidcclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVGb3Jnb3RQYXNzd29yZH1cclxuICAgICAgICAgICAgaWQ9J3JlcXVlc3RwYXNzY2hhbmdlLWJ0bidcclxuICAgICAgICAgICAgdGl0bGU9J1NlbmQnXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvRm9ybT5cclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJSZXF1ZXN0UGFzc0NoYW5nZSIsInJvdXRlIiwic2V0Um91dGUiLCJ1c2VSb3V0ZUNvbnRleHQiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwiZGlzcGF0Y2giLCJzdGF0ZSIsInVzZUF1dGhDb250ZXh0IiwiZm9ybURpc3BhdGNoIiwidXNlRm9ybUNvbnRleHQiLCJlbWFpbCIsImhhbmRsZUZvcmdvdFBhc3N3b3JkIiwiYWN0aW9ucyIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJwcm9wTmFtZSIsInVzZUVmZmVjdCIsImF1dGhGZWVkYmFjayIsInZhbGlkYXRpb25UeXBlcyIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiRU1BSUxfTk9UX1JFR0lTVEVSRUQiXSwibWFwcGluZ3MiOiI7Ozs7QUFjZSxTQUFTQSxpQkFBVCxHQUE2QjtBQUMxQyxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQkMsZUFBZSxFQUF6QztBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBO0FBQVosTUFBc0JDLGNBQWMsRUFBMUM7QUFDQSxRQUFNO0FBQUVGLElBQUFBLFFBQVEsRUFBRUc7QUFBWixNQUE2QkMsY0FBYyxFQUFqRDtBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFZSixLQUFsQjs7QUFFQSxXQUFTSyxvQkFBVCxHQUFnQztBQUM5Qk4sSUFBQUEsUUFBUSxDQUFDTyxjQUFBLENBQXVCO0FBQUVQLE1BQUFBLFFBQUY7QUFBWUMsTUFBQUEsS0FBWjtBQUFtQkUsTUFBQUE7QUFBbkIsS0FBdkIsQ0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsV0FBU0ssWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQVosSUFBQUEsUUFBUSxDQUFDTyxZQUFBLENBQXFCO0FBQUVNLE1BQUFBLFFBQVEsRUFBRUgsSUFBWjtBQUFrQkMsTUFBQUEsS0FBbEI7QUFBeUJYLE1BQUFBLFFBQXpCO0FBQW1DQyxNQUFBQTtBQUFuQyxLQUFyQixDQUFELENBQVI7QUFDRDs7QUFFRGEsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJYixLQUFLLENBQUNjLFlBQVYsRUFBd0I7QUFDdEI7QUFDQW5CLE1BQUFBLFFBQVEsQ0FBQyxlQUFELENBQVI7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDSyxLQUFLLENBQUNjLFlBQVAsQ0FMTSxDQUFUO0FBT0EsU0FDRSxFQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRWpCLE1BQU0sS0FBSyxPQUFYLEdBQXFCLEdBQXJCLEdBQTJCO0FBQXhDLEtBQ0UsRUFBQyxLQUFELFFBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRU8sS0FEVDtBQUVFLElBQUEsV0FBVyxFQUFDLE9BRmQ7QUFHRSxJQUFBLElBQUksRUFBQyxPQUhQO0FBSUUsSUFBQSxRQUFRLEVBQUVHLFlBSlo7QUFLRSxJQUFBLElBQUksRUFBQyxPQUxQO0FBTUUsSUFBQSxFQUFFLEVBQUMsT0FOTDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZRLGVBQWUsQ0FBQ0MsdUJBREQsRUFFZkQsZUFBZSxDQUFDRSxvQkFGRDtBQVBuQixJQURGLEVBYUUsRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRVosb0JBSFg7QUFJRSxJQUFBLEVBQUUsRUFBQyx1QkFKTDtBQUtFLElBQUEsS0FBSyxFQUFDO0FBTFIsSUFiRixDQURGLENBREYsQ0FERjtBQTJCRDs7OzsifQ==
