import { h, u as useAppContext } from './index-e8d41a01.js';
import { B as Button, v as validationTypes, I as Input, F as Form, a as valueChanged, l as login } from './actions-0419c51d.js';

const style = {
  boxShadow: `0px 3px 3px -2px rgba(0, 0, 0, 0.2),
    0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12)`,
  margin: 8,
  padding: 8
};
function Paper(props) {
  const {
    children
  } = props;
  return h("div", {
    style: style
  }, children);
}

function Grid(props) {
  const {
    children,
    start,
    end
  } = props;
  return h("div", {
    style: {
      display: 'grid'
    }
  }, h("div", null), h("div", null), h("div", null), h("div", null), h("div", null), h("div", null), h("div", {
    style: {
      gridColumn: `${start} / span ${end}`
    }
  }, children), h("div", null), h("div", null), h("div", null), h("div", null), h("div", null));
}

function Login() {
  const {
    auth,
    form
  } = useAppContext();
  const {
    emailorusername,
    password,
    error
  } = auth.state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  function handleLogin() {
    auth.dispatch(login({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  return h(Grid, {
    start: 2,
    end: 2
  }, h(Paper, null, h(Form, {
    formTitle: "Login",
    error: error
  }, h(Input, {
    value: emailorusername,
    onChange: handleChange,
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS, validationTypes.EMAIL_NOT_REGISTERED, validationTypes.USERNAME_NOT_REGISTERED]
  }), h(Input, {
    value: password,
    onChange: handleChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Button, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: handleLogin,
    title: "LOGIN"
  }), h("a", {
    href: "#/requestpasschange"
  }, "Forgot Password!"))));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tZWYyZGUxOWMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9sYXlvdXQvUGFwZXIuanMiLCIuLi8uLi8uLi9jbGllbnQvbGF5b3V0L0dyaWQuanMiLCIuLi8uLi8uLi9jbGllbnQvYXV0aC9Mb2dpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcblxuY29uc3Qgc3R5bGUgPSB7XG4gIGJveFNoYWRvdzogYDBweCAzcHggM3B4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLFxuICAgIDBweCAzcHggNHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDhweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEyKWAsXG4gIG1hcmdpbjogOCxcbiAgcGFkZGluZzogOCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBQYXBlcihwcm9wcykge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgcmV0dXJuIDxkaXYgc3R5bGU9e3N0eWxlfT57Y2hpbGRyZW59PC9kaXY+O1xufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIHN0YXJ0LCBlbmQgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2dyaWQnIH19PlxuICAgICAgPGRpdj48L2Rpdj5cbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgICA8ZGl2PjwvZGl2PlxuICAgICAgPGRpdj48L2Rpdj5cbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgICA8ZGl2PjwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT17eyBncmlkQ29sdW1uOiBgJHtzdGFydH0gLyBzcGFuICR7ZW5kfWAgfX0+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgPGRpdj48L2Rpdj5cbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgICA8ZGl2PjwvZGl2PlxuICAgICAgPGRpdj48L2Rpdj5cbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xuaW1wb3J0IHsgdXNlQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC1jb250ZXh0JztcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XG5pbXBvcnQgeyBQYXBlciB9IGZyb20gJy4uL2xheW91dC9QYXBlcic7XG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dpbigpIHtcbiAgY29uc3QgeyBkZXZpY2UgfSA9IHVzZU1lZGlhUXVlcnk7XG4gIGNvbnN0IHsgYXV0aCwgZm9ybSB9ID0gdXNlQXBwQ29udGV4dCgpO1xuXG4gIGNvbnN0IHsgZW1haWxvcnVzZXJuYW1lLCBwYXNzd29yZCwgZXJyb3IgfSA9IGF1dGguc3RhdGU7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcbiAgICBhdXRoLmRpc3BhdGNoKFxuICAgICAgYWN0aW9ucy52YWx1ZUNoYW5nZWQoe1xuICAgICAgICBwcm9wTmFtZTogbmFtZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRpc3BhdGNoOiBhdXRoLmRpc3BhdGNoLFxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVMb2dpbigpIHtcbiAgICBhdXRoLmRpc3BhdGNoKFxuICAgICAgYWN0aW9ucy5sb2dpbih7XG4gICAgICAgIGRpc3BhdGNoOiBhdXRoLmRpc3BhdGNoLFxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcbiAgICAgICAgZm9ybURpc3BhdGNoOiBmb3JtLmRpc3BhdGNoLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8R3JpZCBzdGFydD17Mn0gZW5kPXsyfT5cbiAgICAgIDxQYXBlcj5cbiAgICAgICAgPEZvcm0gZm9ybVRpdGxlPVwiTG9naW5cIiBlcnJvcj17ZXJyb3J9PlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsb3J1c2VybmFtZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBuYW1lPVwiZW1haWxvcnVzZXJuYW1lXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgZW1haWwgb3IgdXNlcm5hbWVcIlxuICAgICAgICAgICAgaWQ9XCJlbWFpbE9yVXNlcm5hbWVcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJlbWFpbE9yVXNlcm5hbWVcIlxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9OT1RfUkVHSVNURVJFRCxcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX05PVF9SRUdJU1RFUkVELFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPElucHV0XG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cImVudGVyIHBhc3N3b3JkXCJcbiAgICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNUFRZX1NUUklOR19WQUxJREFUSU9OLFxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuSU5WQUxJRF9DUkVERU5USUFMUyxcbiAgICAgICAgICAgIF19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgaWQ9XCJsb2dpbi1idG5cIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJsb2dpbi1idG5cIlxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTG9naW59XG4gICAgICAgICAgICB0aXRsZT1cIkxPR0lOXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxhIGhyZWY9XCIjL3JlcXVlc3RwYXNzY2hhbmdlXCI+Rm9yZ290IFBhc3N3b3JkITwvYT5cbiAgICAgICAgPC9Gb3JtPlxuICAgICAgPC9QYXBlcj5cbiAgICA8L0dyaWQ+XG4gICk7XG59XG4iXSwibmFtZXMiOlsic3R5bGUiLCJib3hTaGFkb3ciLCJtYXJnaW4iLCJwYWRkaW5nIiwiUGFwZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwiR3JpZCIsInN0YXJ0IiwiZW5kIiwiZGlzcGxheSIsImdyaWRDb2x1bW4iLCJMb2dpbiIsImF1dGgiLCJmb3JtIiwidXNlQXBwQ29udGV4dCIsImVtYWlsb3J1c2VybmFtZSIsInBhc3N3b3JkIiwiZXJyb3IiLCJzdGF0ZSIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJkaXNwYXRjaCIsImFjdGlvbnMiLCJwcm9wTmFtZSIsImhhbmRsZUxvZ2luIiwiZm9ybURpc3BhdGNoIiwidmFsaWRhdGlvblR5cGVzIiwiVVNFUk5BTUVfT1JfRU1BSUxfRk9STUFUX1ZBTElEQVRJT04iLCJJTlZBTElEX0NSRURFTlRJQUxTIiwiRU1BSUxfTk9UX1JFR0lTVEVSRUQiLCJVU0VSTkFNRV9OT1RfUkVHSVNURVJFRCIsIkVNUFRZX1NUUklOR19WQUxJREFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFNQSxLQUFLLEdBQUc7QUFDWkMsRUFBQUEsU0FBUyxFQUFHOzZFQURBO0FBR1pDLEVBQUFBLE1BQU0sRUFBRSxDQUhJO0FBSVpDLEVBQUFBLE9BQU8sRUFBRTtBQUpHLENBQWQ7QUFPTyxTQUFTQyxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFDM0IsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQWVELEtBQXJCO0FBQ0EsU0FBTztBQUFLLElBQUEsS0FBSyxFQUFFTDtBQUFaLEtBQW9CTSxRQUFwQixDQUFQO0FBQ0Q7O0FDVk0sU0FBU0MsSUFBVCxDQUFjRixLQUFkLEVBQXFCO0FBQzFCLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZRSxJQUFBQSxLQUFaO0FBQW1CQyxJQUFBQTtBQUFuQixNQUEyQkosS0FBakM7QUFDQSxTQUNFO0FBQUssSUFBQSxLQUFLLEVBQUU7QUFBRUssTUFBQUEsT0FBTyxFQUFFO0FBQVg7QUFBWixLQUNFLGNBREYsRUFFRSxjQUZGLEVBR0UsY0FIRixFQUlFLGNBSkYsRUFLRSxjQUxGLEVBTUUsY0FORixFQU9FO0FBQUssSUFBQSxLQUFLLEVBQUU7QUFBRUMsTUFBQUEsVUFBVSxFQUFHLEdBQUVILEtBQU0sV0FBVUMsR0FBSTtBQUFyQztBQUFaLEtBQXVESCxRQUF2RCxDQVBGLEVBUUUs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
