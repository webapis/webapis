import { u as useAppContext, h } from './index-80c6e9b3.js';
import { B as Button, v as validationTypes, I as Input, F as Form, s as signup, a as valueChanged } from './actions-7d86d0c9.js';

function Signup() {
  const {
    form,
    auth
  } = useAppContext();
  const {
    username,
    password,
    email
  } = auth.state;

  function handleSignup() {
    auth.dispatch(signup({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  return h("div", {
    "data-testid": "signupform",
    className: "auth-form"
  }, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleSignup,
    id: "signup-btn",
    title: "Signup"
  })));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTMxMjhhY2ZiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XHJcbmltcG9ydCB7IHVzZUFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAtY29udGV4dCc7XHJcblxyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpZ251cCgpIHtcclxuICBjb25zdCB7IGZvcm0sIGF1dGggfSA9IHVzZUFwcENvbnRleHQoKTtcclxuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwgfSA9IGF1dGguc3RhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVNpZ251cCgpIHtcclxuICAgIGF1dGguZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMuc2lnbnVwKHtcclxuICAgICAgICBkaXNwYXRjaDogYXV0aC5kaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcclxuICAgICAgICBmb3JtRGlzcGF0Y2g6IGZvcm0uZGlzcGF0Y2gsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBhdXRoLmRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2g6IGF1dGguZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGU6IGF1dGguc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBkYXRhLXRlc3RpZD0nc2lnbnVwZm9ybScgY2xhc3NOYW1lPSdhdXRoLWZvcm0nPlxyXG4gICAgICA8Rm9ybSBmb3JtVGl0bGU9J1NpZ24gdXAnPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHR5cGU9J3RleHQnXHJcbiAgICAgICAgICBpZD0ndXNlcm5hbWUnXHJcbiAgICAgICAgICBuYW1lPSd1c2VybmFtZSdcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPSd1c2VybmFtZSdcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9UQUtFTixcclxuICAgICAgICAgIF19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8SW5wdXRcclxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0nZW1haWwnXHJcbiAgICAgICAgICB0eXBlPSdlbWFpbCdcclxuICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgIG5hbWU9J2VtYWlsJ1xyXG4gICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlJFR0lTVEVSRURfRU1BSUwsXHJcbiAgICAgICAgICBdfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPElucHV0XHJcbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICBpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9J2J0bidcclxuICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNpZ251cH1cclxuICAgICAgICAgIGlkPSdzaWdudXAtYnRuJ1xyXG4gICAgICAgICAgdGl0bGU9J1NpZ251cCdcclxuICAgICAgICAvPlxyXG4gICAgICA8L0Zvcm0+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJTaWdudXAiLCJmb3JtIiwiYXV0aCIsInVzZUFwcENvbnRleHQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZW1haWwiLCJzdGF0ZSIsImhhbmRsZVNpZ251cCIsImRpc3BhdGNoIiwiYWN0aW9ucyIsImZvcm1EaXNwYXRjaCIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX0ZPUk1BVF9WQUxJREFUSU9OIiwiVVNFUk5BTUVfVEFLRU4iLCJFTUFJTF9GT1JNQVRfVkFMSURBVElPTiIs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
