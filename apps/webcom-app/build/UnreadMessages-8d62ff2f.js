import { m, l, h, L as List, w as ListItem } from './index-be0ed64e.js';

function UnreadMessages({
  unreadmessages
}) {
  const [items, setItems] = m([]);
  l(() => {
    const reducerItems = unreadmessages.reduce((accumulator, current, index) => {
      if (index === 0) {
        return accumulator = [{ ...current,
          messageCount: 1
        }];
      } else {
        const obj = accumulator.find(a => a.username === current.username && current.state === 'MESSANGER');

        if (obj) {
          const index = accumulator.findIndex(a => a.username === current.username); //if current exist inside accumilator map it to that object

          accumulator.splice(index, 1, { ...obj,
            messageCount: ++obj.messageCount
          });
        } else {
          //if current exist inside accumilator map it to that object
          accumulator.push({ ...current,
            messageCount: 1
          });
        }
      }

      return accumulator;
    }, []); //   console.log('reducerItems', reducerItems);

    setItems(reducerItems);
  }, [unreadmessages]);
  return h("div", null, h(List, null, items && items.length > 0 && items.map(u => {
    return h(ListItem, null, u.username, " ", h("div", {
      style: {
        color: '#737373'
      }
    }, "messages: ", u.messageCount));
  })));
}

export default UnreadMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5yZWFkTWVzc2FnZXMtOGQ2MmZmMmYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9VbnJlYWRNZXNzYWdlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHsgTGlzdCwgTGlzdEl0ZW0gfSBmcm9tICcuLi9sYXlvdXQvTmF2TGlzdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVbnJlYWRNZXNzYWdlcyh7IHVucmVhZG1lc3NhZ2VzIH0pIHtcbiAgY29uc3QgW2l0ZW1zLCBzZXRJdGVtc10gPSB1c2VTdGF0ZShbXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICBjb25zdCByZWR1Y2VySXRlbXMgPSB1bnJlYWRtZXNzYWdlcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiAoYWNjdW11bGF0b3IgPSBbeyAuLi5jdXJyZW50LCBtZXNzYWdlQ291bnQ6IDEgfV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb2JqID0gYWNjdW11bGF0b3IuZmluZChcbiAgICAgICAgICAoYSkgPT5cbiAgICAgICAgICAgIGEudXNlcm5hbWUgPT09IGN1cnJlbnQudXNlcm5hbWUgJiYgY3VycmVudC5zdGF0ZSA9PT0gJ01FU1NBTkdFUidcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWNjdW11bGF0b3IuZmluZEluZGV4KFxuICAgICAgICAgICAgKGEpID0+IGEudXNlcm5hbWUgPT09IGN1cnJlbnQudXNlcm5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIC8vaWYgY3VycmVudCBleGlzdCBpbnNpZGUgYWNjdW1pbGF0b3IgbWFwIGl0IHRvIHRoYXQgb2JqZWN0XG4gICAgICAgICAgYWNjdW11bGF0b3Iuc3BsaWNlKGluZGV4LCAxLCB7XG4gICAgICAgICAgICAuLi5vYmosXG4gICAgICAgICAgICBtZXNzYWdlQ291bnQ6ICsrb2JqLm1lc3NhZ2VDb3VudCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2lmIGN1cnJlbnQgZXhpc3QgaW5zaWRlIGFjY3VtaWxhdG9yIG1hcCBpdCB0byB0aGF0IG9iamVjdFxuICAgICAgICAgIGFjY3VtdWxhdG9yLnB1c2goeyAuLi5jdXJyZW50LCBtZXNzYWdlQ291bnQ6IDEgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0sIFtdKTtcbiAvLyAgIGNvbnNvbGUubG9nKCdyZWR1Y2VySXRlbXMnLCByZWR1Y2VySXRlbXMpO1xuICAgIHNldEl0ZW1zKHJlZHVjZXJJdGVtcyk7XG4gIH0sIFt1bnJlYWRtZXNzYWdlc10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxMaXN0PlxuICAgICAgICB7aXRlbXMgJiZcbiAgICAgICAgICBpdGVtcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgaXRlbXMubWFwKCh1KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIDxMaXN0SXRlbT57dS51c2VybmFtZX0gPGRpdiBzdHlsZT17e2NvbG9yOicjNzM3MzczJ319Pm1lc3NhZ2VzOiB7dS5tZXNzYWdlQ291bnR9PC9kaXY+PC9MaXN0SXRlbT47XG4gICAgICAgICAgfSl9XG4gICAgICA8L0xpc3Q+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiVW5yZWFkTWVzc2FnZXMiLCJ1bnJlYWRtZXNzYWdlcyIsIml0ZW1zIiwic2V0SXRlbXMiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInJlZHVjZXJJdGVtcyIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY3VycmVudCIsImluZGV4IiwibWVzc2FnZUNvdW50Iiwib2JqIiwiZmluZCIsImEiLCJ1c2VybmFtZSIsInN0YXRlIiwiZmluZEluZGV4Iiwic3BsaWNlIiwicHVzaCIsImxlbmd0aCIsIm1hcCIsInUiLCJjb2xvciJdLCJtYXBwaW5ncyI6Ijs7QUFHZSxTQUFTQSxjQUFULENBQXdCO0FBQUVDLEVBQUFBO0FBQUYsQ0FBeEIsRUFBNEM7QUFDekQsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLENBQVEsQ0FBQyxFQUFELENBQWxDO0FBQ0FDLEVBQUFBLENBQVMsQ0FBQyxNQUFNO0FBRWQsVUFBTUMsWUFBWSxHQUFHTCxjQUFjLENBQUNNLE1BQWYsQ0FBc0IsQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLEVBQXVCQyxLQUF2QixLQUFpQztBQUMxRSxVQUFJQSxLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNmLGVBQVFGLFdBQVcsR0FBRyxDQUFDLEVBQUUsR0FBR0MsT0FBTDtBQUFjRSxVQUFBQSxZQUFZLEVBQUU7QUFBNUIsU0FBRCxDQUF0QjtBQUNELE9BRkQsTUFFTztBQUNMLGNBQU1DLEdBQUcsR0FBR0osV0FBVyxDQUFDSyxJQUFaLENBQ1RDLENBQUQsSUFDRUEsQ0FBQyxDQUFDQyxRQUFGLEtBQWVOLE9BQU8sQ0FBQ00sUUFBdkIsSUFBbUNOLE9BQU8sQ0FBQ08sS0FBUixLQUFrQixXQUY3QyxDQUFaOztBQUlBLFlBQUlKLEdBQUosRUFBUztBQUNQLGdCQUFNRixLQUFLLEdBQUdGLFdBQVcsQ0FBQ1MsU0FBWixDQUNYSCxDQUFELElBQU9BLENBQUMsQ0FBQ0MsUUFBRixLQUFlTixPQUFPLENBQUNNLFFBRGxCLENBQWQsQ0FETzs7QUFLUFAsVUFBQUEsV0FBVyxDQUFDVSxNQUFaLENBQW1CUixLQUFuQixFQUEwQixDQUExQixFQUE2QixFQUMzQixHQUFHRSxHQUR3QjtBQUUzQkQsWUFBQUEsWUFBWSxFQUFFLEVBQUVDLEdBQUcsQ0FBQ0Q7QUFGTyxXQUE3QjtBQUlELFNBVEQsTUFTTztBQUNMO0FBQ0FILFVBQUFBLFdBQVcsQ0FBQ1csSUFBWixDQUFpQixFQUFFLEdBQUdWLE9BQUw7QUFBY0UsWUFBQUEsWUFBWSxFQUFFO0FBQTVCLFdBQWpCO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPSCxXQUFQO0FBQ0QsS0F4Qm9CLEVBd0JsQixFQXhCa0IsQ0FBckIsQ0FGYzs7QUE0QmRMLElBQUFBLFFBQVEsQ0FBQ0csWUFBRCxDQUFSO0FBQ0QsR0E3QlEsRUE2Qk4sQ0FBQ0wsY0FBRCxDQTdCTSxDQUFUO0FBK0JBLFNBQ0UsZUFDRSxFQUFDLElBQUQsUUFDR0MsS0FBSyxJQUNKQSxLQUFLLENBQUNrQixNQUFOLEdBQWUsQ0FEaEIsSUFFQ2xCLEtBQUssQ0FBQ21CLEdBQU4sQ0FBV0MsQ0FBRCxJQUFPO0FBQ2pCLFdBQU8sRUFBQyxRQUFELFFBQVdBLENBQUMsQ0FBQ1AsUUFBYixPQUF1QjtBQUFLLE1BQUEsS0FBSyxFQUFFO0FBQUNRLFFBQUFBLEtBQUssRUFBQztBQUFQO0FBQVoscUJBQTBDRCxDQUFDLENBQUNYLFlBQTVDLENBQXZCLENBQVA7QUFDQyxHQUZELENBSEosQ0FERixDQURGO0FBV0Q7Ozs7In0=
