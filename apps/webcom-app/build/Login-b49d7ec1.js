import { a as useAppRoute, b as useMediaQuery, c as useAuthContext, d as useFormContext, p, h, v as validationTypes, e as valueChanged } from './index-58f1b195.js';
import { P as Paper, F as Form, I as Input, G as Grid } from './Grid-2301840b.js';
import { A as AsyncButton } from './index-d62add4f.js';

function Login({
  login
}) {
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    emailorusername,
    password,
    error,
    loading
  } = state;
  p(() => {
    if (state.user && state.user.token) {
      onAppRoute({
        featureRoute: '/',
        route: '/'
      });
    }
  }, [state.user]);

  function handleRoute(e) {
    e.preventDefault();
    onAppRoute({
      featureRoute: '/forgotpassword',
      route: '/auth'
    });
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Login",
    error: error
  }, h(Input, {
    value: emailorusername,
    onChange: handleChange,
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS, validationTypes.EMAIL_NOT_REGISTERED, validationTypes.USERNAME_NOT_REGISTERED]
  }), h(Input, {
    value: password,
    onChange: handleChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(AsyncButton, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: login,
    loading: loading
  }, "LOGIN"), h("a", {
    href: "/",
    onClick: handleRoute,
    id: "forgotpassword",
    "data-testid": "forgotpassword"
  }, "Forgot Password!"))));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tYjQ5ZDdlYzEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgQXN5bmNCdXR0b24gZnJvbSAnLi4vY29tcG9uZW50cy9hc3luYy1idXR0b24nXHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHt1c2VGb3JtQ29udGV4dH0gZnJvbSAnLi4vZm9ybS9mb3JtLWNvbnRleHQnXHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XHJcbmltcG9ydCB7dXNlQXBwUm91dGV9IGZyb20gJy4uL2FwcC1yb3V0ZS9BcHBSb3V0ZVByb3ZpZGVyJ1xyXG5pbXBvcnQgeyBQYXBlciB9IGZyb20gJy4uL2xheW91dC9QYXBlcic7XHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuLi9sYXlvdXQvR3JpZCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luKHtsb2dpbn0pIHtcclxuICBjb25zdCB7b25BcHBSb3V0ZX0gPSB1c2VBcHBSb3V0ZSgpO1xyXG5cclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIGNvbnN0IHtzdGF0ZSwgZGlzcGF0Y2h9ID0gdXNlQXV0aENvbnRleHQoKTtcclxuICBjb25zdCB7ZGlzcGF0Y2g6Zm9ybURpc3BhdGNofT11c2VGb3JtQ29udGV4dCgpXHJcblxyXG4gIGNvbnN0IHsgZW1haWxvcnVzZXJuYW1lLCBwYXNzd29yZCwgZXJyb3IsbG9hZGluZyB9ID1zdGF0ZTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS51c2VyJiYgc3RhdGUudXNlci50b2tlbikge1xyXG4gICAgXHJcbiAgICAgIG9uQXBwUm91dGUoe2ZlYXR1cmVSb3V0ZTogJy8nLHJvdXRlOicvJ30pO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS51c2VyXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVJvdXRlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgXHJcbiAgICBvbkFwcFJvdXRlKHtmZWF0dXJlUm91dGU6ICcvZm9yZ290cGFzc3dvcmQnLHJvdXRlOicvYXV0aCd9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuIFxyXG5cclxuICByZXR1cm4gKFxyXG5cclxuXHJcbiBcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J0xvZ2luJyBlcnJvcj17ZXJyb3J9PlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbG9ydXNlcm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIG5hbWU9J2VtYWlsb3J1c2VybmFtZSdcclxuICAgICAgICAgICAgdHlwZT0ndGV4dCdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0VudGVyIGVtYWlsIG9yIHVzZXJuYW1lJ1xyXG4gICAgICAgICAgICBpZD0nZW1haWxPclVzZXJuYW1lJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nZW1haWxPclVzZXJuYW1lJ1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfT1JfRU1BSUxfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX05PVF9SRUdJU1RFUkVELFxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nZW50ZXIgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXHJcbiAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgIDxBc3luY0J1dHRvblxyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIGlkPSdsb2dpbi1idG4nXHJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdsb2dpbi1idG4nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2xvZ2lufVxyXG4gICAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBMT0dJTlxyXG4gICAgICAgICAgPC9Bc3luY0J1dHRvbj5cclxuICAgICAgICAgIDxhIGhyZWY9Jy8nIG9uQ2xpY2s9e2hhbmRsZVJvdXRlfSBpZD0nZm9yZ290cGFzc3dvcmQnIGRhdGEtdGVzdGlkPSdmb3Jnb3RwYXNzd29yZCc+XHJcbiAgICAgICAgICAgIEZvcmdvdCBQYXNzd29yZCFcclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiTG9naW4iLCJsb2dpbiIsIm9uQXBwUm91dGUiLCJ1c2VBcHBSb3V0ZSIsImRldmljZSIsInVzZU1lZGlhUXVlcnkiLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlQXV0aENvbnRleHQiLCJmb3JtRGlzcGF0Y2giLCJ1c2VGb3JtQ29udGV4dCIsImVtYWlsb3J1c2VybmFtZSIsInBhc3N3b3JkIiwiZXJyb3IiLCJsb2FkaW5nIiwidXNlRWZmZWN0IiwidXNlciIsInRva2VuIiwiZmVhdHVyZVJvdXRlIiwicm91dGUiLCJoYW5kbGVSb3V0ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZUNoYW5nZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsImFjdGlvbnMiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX09SX0VNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiSU5WQUxJRF9DUkVERU5USUFMUyIsIkVNQUlMX05PVF9SRUdJU1RFUkVEIiwiVVNFUk5BTUVfTk9UX1JFR0lTVEVSRUQiLCJFTVBUWV9TVFJJTkdfVkFMSURBVElPTiJdLCJtYXBwaW5ncyI6Ijs7OztBQWVlLFNBQVNBLEtBQVQsQ0FBZTtBQUFDQyxFQUFBQTtBQUFELENBQWYsRUFBd0I7QUFDckMsUUFBTTtBQUFDQyxJQUFBQTtBQUFELE1BQWVDLFdBQVcsRUFBaEM7QUFFQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBQ0MsSUFBQUEsS0FBRDtBQUFRQyxJQUFBQTtBQUFSLE1BQW9CQyxjQUFjLEVBQXhDO0FBQ0EsUUFBTTtBQUFDRCxJQUFBQSxRQUFRLEVBQUNFO0FBQVYsTUFBd0JDLGNBQWMsRUFBNUM7QUFFQSxRQUFNO0FBQUVDLElBQUFBLGVBQUY7QUFBbUJDLElBQUFBLFFBQW5CO0FBQTZCQyxJQUFBQSxLQUE3QjtBQUFtQ0MsSUFBQUE7QUFBbkMsTUFBOENSLEtBQXBEO0FBRUFTLEVBQUFBLENBQVMsQ0FBQyxNQUFNO0FBQ2QsUUFBSVQsS0FBSyxDQUFDVSxJQUFOLElBQWFWLEtBQUssQ0FBQ1UsSUFBTixDQUFXQyxLQUE1QixFQUFtQztBQUVqQ2YsTUFBQUEsVUFBVSxDQUFDO0FBQUNnQixRQUFBQSxZQUFZLEVBQUUsR0FBZjtBQUFtQkMsUUFBQUEsS0FBSyxFQUFDO0FBQXpCLE9BQUQsQ0FBVjtBQUNEO0FBQ0YsR0FMUSxFQUtOLENBQUNiLEtBQUssQ0FBQ1UsSUFBUCxDQUxNLENBQVQ7O0FBT0EsV0FBU0ksV0FBVCxDQUFxQkMsQ0FBckIsRUFBd0I7QUFDdEJBLElBQUFBLENBQUMsQ0FBQ0MsY0FBRjtBQUVBcEIsSUFBQUEsVUFBVSxDQUFDO0FBQUNnQixNQUFBQSxZQUFZLEVBQUUsaUJBQWY7QUFBaUNDLE1BQUFBLEtBQUssRUFBQztBQUF2QyxLQUFELENBQVY7QUFDRDs7QUFFRCxXQUFTSSxZQUFULENBQXNCRixDQUF0QixFQUF5QjtBQUN2QixVQUFNO0FBQUVHLE1BQUFBLElBQUY7QUFBUUMsTUFBQUE7QUFBUixRQUFrQkosQ0FBQyxDQUFDSyxNQUExQjtBQUNBbkIsSUFBQUEsUUFBUSxDQUNOb0IsWUFBQSxDQUFxQjtBQUNuQkMsTUFBQUEsUUFBUSxFQUFFSixJQURTO0FBRW5CQyxNQUFBQSxLQUZtQjtBQUduQmxCLE1BQUFBLFFBSG1CO0FBSW5CRCxNQUFBQTtBQUptQixLQUFyQixDQURNLENBQVI7QUFRRDs7QUFHRCxTQUlFLEVBQUMsSUFBRDtBQUFNLElBQUEsS0FBSyxFQUFFRixNQUFNLEtBQUssT0FBWCxHQUFxQixHQUFyQixHQUEyQjtBQUF4QyxLQUNFLEVBQUMsS0FBRCxRQUNFLEVBQUMsSUFBRDtBQUFNLElBQUEsU0FBUyxFQUFDLE9BQWhCO0FBQXdCLElBQUEsS0FBSyxFQUFFUztBQUEvQixLQUNFLEVBQUMsS0FBRDtBQUNFLElBQUEsS0FBSyxFQUFFRixlQURUO0FBRUUsSUFBQSxRQUFRLEVBQUVZLFlBRlo7QUFHRSxJQUFBLElBQUksRUFBQyxpQkFIUDtBQUlFLElBQUEsSUFBSSxFQUFDLE1BSlA7QUFLRSxJQUFBLFdBQVcsRUFBQyx5QkFMZDtBQU1FLElBQUEsRUFBRSxFQUFDLGlCQU5MO0FBT0UsbUJBQVksaUJBUGQ7QUFRRSxJQUFBLGVBQWUsRUFBRSxDQUNmTSxlQUFlLENBQUNDLG1DQURELEVBRWZELGVBQWUsQ0FBQ0UsbUJBRkQsRUFHZkYsZUFBZSxDQUFDRyxvQkFIRCxFQUlmSCxlQUFlLENBQUNJLHVCQUpEO0FBUm5CLElBREYsRUFpQkUsRUFBQyxLQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVyQixRQURUO0FBRUUsSUFBQSxRQUFRLEVBQUVXLFlBRlo7QUFHRSxJQUFBLElBQUksRUFBQyxVQUhQO0FBSUUsSUFBQSxJQUFJLEVBQUMsVUFKUDtBQUtFLElBQUEsV0FBVyxFQUFDLGdCQUxkO0FBTUUsSUFBQSxFQUFFLEVBQUMsVUFOTDtBQU9FLG1CQUFZLFVBUGQ7QUFRRSxJQUFBLGVBQWUsRUFBRSxDQUNmTSxlQUFlLENBQUNLLHVCQURELEVBRWZMLGVBQWUsQ0FBQ0UsbUJBRkQ7QUFSbkIsSUFqQkYsRUErQkUsRUFBQyxXQUFEO0FBQ0UsSUFBQSxJQUFJLEVBQUMsUUFEUDtBQUVFLElBQUEsRUFBRSxFQUFDLFdBRkw7QUFHRSxtQkFBWSxXQUhkO0FBSUUsSUFBQSxPQUFPLEVBQUU5QixLQUpYO0FBS0UsSUFBQSxPQUFPLEVBQUVhO0FBTFgsYUEvQkYsRUF3Q0U7QUFBRyxJQUFBLElBQUksRUFBQyxHQUFSO0FBQVksSUFBQSxPQUFPLEVBQUVNLFdBQXJCO0FBQWtDLElBQUEsRUFBRSxFQUFDLGdCQUFyQztBQUFzRCxtQkFBWTtBQUFsRSx3QkF4Q0YsQ0FERixDQURGLENBSkY7QUFxREQ7Ozs7In0=
