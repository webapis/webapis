import { j as v, p, h, n as List, o as ListItem } from './index-a9837338.js';

function reducerUnreadhangouts({
  unreadhangouts
}) {
  return unreadhangouts.reduce((accumulator, current, index) => {
    if (index === 0) {
      return accumulator = [{ ...current,
        messageCount: 1
      }];
    } else {
      const obj = accumulator.find(a => a.username === current.username && current.state === 'MESSANGER');

      if (obj) {
        const index = accumulator.findIndex(a => a.username === current.username); //if current exist inside accumilator map it to that object

        accumulator.splice(index, 1, { ...obj,
          messageCount: ++obj.messageCount
        });
      } else {
        //if current exist inside accumilator map it to that object
        accumulator.push({ ...current,
          messageCount: 1
        });
      }
    }

    return accumulator;
  }, []);
}

function UnreadHangouts({
  unreadhangouts,
  onSelectUnread,
  onRemoveUnread
}) {
  const [items, setItems] = v([]);
  p(() => {
    if (unreadhangouts) {
      const reduced = reducerUnreadhangouts({
        unreadhangouts
      });
      setItems(reduced);
    }
  }, [unreadhangouts]);
  return h("div", {
    "data-testid": "unreadhangouts",
    style: {
      paddingTop: 68
    }
  }, h(List, null, items && items.length > 0 && items.map(u => {
    return h("div", {
      style: {
        display: 'flex'
      }
    }, h(ListItem, {
      onClick: onSelectUnread,
      id: u.username,
      style: {
        flex: 5
      },
      "data-testid": `${u.username}-select`
    }, u.username, " messages: ", u.messageCount), h(ListItem, {
      onClick: onRemoveUnread,
      id: u.username,
      style: {
        color: 'red'
      },
      "data-testid": `${u.username}-remove`
    }, "x"));
  })));
}

export default UnreadHangouts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5yZWFkSGFuZ291dHMtNTRlODg4NjIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9zdGF0ZS9yZWR1Y2VVbnJlYWRoYW5nb3V0cy5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9VbnJlYWRIYW5nb3V0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVkdWNlclVucmVhZGhhbmdvdXRzKHt1bnJlYWRoYW5nb3V0c30pe1xyXG4gICAgcmV0dXJuIHVucmVhZGhhbmdvdXRzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gKGFjY3VtdWxhdG9yID0gW3sgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH1dKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3Qgb2JqID0gYWNjdW11bGF0b3IuZmluZChcclxuICAgICAgICAgICAgKGEpID0+IGEudXNlcm5hbWUgPT09IGN1cnJlbnQudXNlcm5hbWUgJiYgY3VycmVudC5zdGF0ZSA9PT0gJ01FU1NBTkdFUidcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWNjdW11bGF0b3IuZmluZEluZGV4KFxyXG4gICAgICAgICAgICAgIChhKSA9PiBhLnVzZXJuYW1lID09PSBjdXJyZW50LnVzZXJuYW1lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIC8vaWYgY3VycmVudCBleGlzdCBpbnNpZGUgYWNjdW1pbGF0b3IgbWFwIGl0IHRvIHRoYXQgb2JqZWN0XHJcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yLnNwbGljZShpbmRleCwgMSwge1xyXG4gICAgICAgICAgICAgIC4uLm9iaixcclxuICAgICAgICAgICAgICBtZXNzYWdlQ291bnQ6ICsrb2JqLm1lc3NhZ2VDb3VudCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL2lmIGN1cnJlbnQgZXhpc3QgaW5zaWRlIGFjY3VtaWxhdG9yIG1hcCBpdCB0byB0aGF0IG9iamVjdFxyXG4gICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKHsgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XHJcbiAgICAgIH0sIFtdKTtcclxufSIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgTGlzdCwgTGlzdEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL2xpc3QnO1xyXG5pbXBvcnQge3JlZHVjZXJVbnJlYWRoYW5nb3V0c30gZnJvbSAnLi4vaGFuZ291dHMvc3RhdGUvcmVkdWNlVW5yZWFkaGFuZ291dHMnXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFVucmVhZEhhbmdvdXRzKHsgdW5yZWFkaGFuZ291dHMsb25TZWxlY3RVbnJlYWQsb25SZW1vdmVVbnJlYWQgfSkge1xyXG5cclxuICBjb25zdCBbaXRlbXMsc2V0SXRlbXNdID11c2VTdGF0ZShbXSlcclxudXNlRWZmZWN0KCgpPT57XHJcbmlmKHVucmVhZGhhbmdvdXRzKXtcclxuXHJcbiAgY29uc3QgcmVkdWNlZCA9cmVkdWNlclVucmVhZGhhbmdvdXRzKHt1bnJlYWRoYW5nb3V0c30pXHJcbiBcclxuICBzZXRJdGVtcyhyZWR1Y2VkKVxyXG59XHJcblxyXG59LFt1bnJlYWRoYW5nb3V0c10pXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGRhdGEtdGVzdGlkPSd1bnJlYWRoYW5nb3V0cycgc3R5bGU9e3twYWRkaW5nVG9wOjY4fX0+XHJcbiAgICAgIDxMaXN0PlxyXG4gICAgICAgIHtpdGVtcyAmJlxyXG4gICAgICAgICAgaXRlbXMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgaXRlbXMubWFwKCh1KSA9PiB7XHJcbiAgICAgICBcclxuICAgICAgICAgIHJldHVybiAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6J2ZsZXgnfX0+XHJcbiAgICAgICAgICAgIDxMaXN0SXRlbSBvbkNsaWNrPXtvblNlbGVjdFVucmVhZH0gaWQ9e3UudXNlcm5hbWV9IHN0eWxlPXt7ZmxleDo1fX0gZGF0YS10ZXN0aWQ9e2Ake3UudXNlcm5hbWV9LXNlbGVjdGB9Pnt1LnVzZXJuYW1lfSBtZXNzYWdlczoge3UubWVzc2FnZUNvdW50fTwvTGlzdEl0ZW0+XHJcbiAgICAgICAgICAgIDxMaXN0SXRlbSBvbkNsaWNrPXtvblJlbW92ZVVucmVhZH0gaWQ9e3UudXNlcm5hbWV9IHN0eWxlPXt7Y29sb3I6J3JlZCd9fSBkYXRhLXRlc3RpZD17YCR7dS51c2VybmFtZX0tcmVtb3ZlYH0+eDwvTGlzdEl0ZW0+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgfSl9XHJcbiAgICAgIDwvTGlzdD5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbInJlZHVjZXJVbnJlYWRoYW5nb3V0cyIsInVucmVhZGhhbmdvdXRzIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50IiwiaW5kZXgiLCJtZXNzYWdlQ291bnQiLCJvYmoiLCJmaW5kIiwiYSIsInVzZXJuYW1lIiwic3RhdGUiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJwdXNoIiwiVW5yZWFkSGFuZ291dHMiLCJvblNlbGVjdFVucmVhZCIsIm9uUmVtb3ZlVW5yZWFkIiwiaXRlbXMiLCJzZXRJdGVtcyIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVkdWNlZCIsInBhZGRpbmdUb3AiLCJsZW5ndGgiLCJtYXAiLCJ1IiwiZGlzcGxheSIsImZsZXgiLCJjb2xvciJdLCJtYXBwaW5n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
