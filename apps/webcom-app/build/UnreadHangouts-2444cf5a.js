import { j as v, p, h, w as List, x as ListItem } from './index-7541e898.js';

function reducerUnreadhangouts({
  unreadhangouts
}) {
  return unreadhangouts.reduce((accumulator, current, index) => {
    if (index === 0) {
      return accumulator = [{ ...current,
        messageCount: 1
      }];
    } else {
      const obj = accumulator.find(a => a.username === current.username && current.state === 'MESSANGER');

      if (obj) {
        const index = accumulator.findIndex(a => a.username === current.username); //if current exist inside accumilator map it to that object

        accumulator.splice(index, 1, { ...obj,
          messageCount: ++obj.messageCount
        });
      } else {
        //if current exist inside accumilator map it to that object
        accumulator.push({ ...current,
          messageCount: 1
        });
      }
    }

    return accumulator;
  }, []);
}

function UnreadHangouts({
  unreadhangouts,
  onSelectUnread,
  onRemoveUnread
}) {
  const [items, setItems] = v([]);
  p(() => {
    if (unreadhangouts) {
      const reduced = reducerUnreadhangouts({
        unreadhangouts
      });
      setItems(reduced);
    }
  }, [unreadhangouts]);
  return h("div", {
    "data-testid": "unreadhangouts",
    style: {
      paddingTop: 68
    }
  }, h(List, null, items && items.length > 0 && items.map(u => {
    return h("div", {
      style: {
        display: 'flex'
      }
    }, h(ListItem, {
      onClick: onSelectUnread,
      id: u.username,
      style: {
        flex: 5
      },
      "data-testid": `${u.username}-select`
    }, u.username, " messages: ", u.messageCount), h(ListItem, {
      onClick: onRemoveUnread,
      id: u.username,
      style: {
        color: 'red'
      },
      "data-testid": `${u.username}-remove`
    }, "x"));
  })));
}

export default UnreadHangouts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5yZWFkSGFuZ291dHMtMjQ0NGNmNWEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9zdGF0ZS9yZWR1Y2VVbnJlYWRoYW5nb3V0cy5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9VbnJlYWRIYW5nb3V0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVkdWNlclVucmVhZGhhbmdvdXRzKHt1bnJlYWRoYW5nb3V0c30pe1xuICAgIHJldHVybiB1bnJlYWRoYW5nb3V0cy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50LCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gKGFjY3VtdWxhdG9yID0gW3sgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH1dKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBvYmogPSBhY2N1bXVsYXRvci5maW5kKFxuICAgICAgICAgICAgKGEpID0+IGEudXNlcm5hbWUgPT09IGN1cnJlbnQudXNlcm5hbWUgJiYgY3VycmVudC5zdGF0ZSA9PT0gJ01FU1NBTkdFUidcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWNjdW11bGF0b3IuZmluZEluZGV4KFxuICAgICAgICAgICAgICAoYSkgPT4gYS51c2VybmFtZSA9PT0gY3VycmVudC51c2VybmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vaWYgY3VycmVudCBleGlzdCBpbnNpZGUgYWNjdW1pbGF0b3IgbWFwIGl0IHRvIHRoYXQgb2JqZWN0XG4gICAgICAgICAgICBhY2N1bXVsYXRvci5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgICAgICAgLi4ub2JqLFxuICAgICAgICAgICAgICBtZXNzYWdlQ291bnQ6ICsrb2JqLm1lc3NhZ2VDb3VudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2lmIGN1cnJlbnQgZXhpc3QgaW5zaWRlIGFjY3VtaWxhdG9yIG1hcCBpdCB0byB0aGF0IG9iamVjdFxuICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaCh7IC4uLmN1cnJlbnQsIG1lc3NhZ2VDb3VudDogMSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfSwgW10pO1xufSIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XG5pbXBvcnQgeyBMaXN0LCBMaXN0SXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGlzdCc7XG5pbXBvcnQge3JlZHVjZXJVbnJlYWRoYW5nb3V0c30gZnJvbSAnLi4vaGFuZ291dHMvc3RhdGUvcmVkdWNlVW5yZWFkaGFuZ291dHMnXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVbnJlYWRIYW5nb3V0cyh7IHVucmVhZGhhbmdvdXRzLG9uU2VsZWN0VW5yZWFkLG9uUmVtb3ZlVW5yZWFkIH0pIHtcblxuICBjb25zdCBbaXRlbXMsc2V0SXRlbXNdID11c2VTdGF0ZShbXSlcbnVzZUVmZmVjdCgoKT0+e1xuaWYodW5yZWFkaGFuZ291dHMpe1xuXG4gIGNvbnN0IHJlZHVjZWQgPXJlZHVjZXJVbnJlYWRoYW5nb3V0cyh7dW5yZWFkaGFuZ291dHN9KVxuIFxuICBzZXRJdGVtcyhyZWR1Y2VkKVxufVxuXG59LFt1bnJlYWRoYW5nb3V0c10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGRhdGEtdGVzdGlkPSd1bnJlYWRoYW5nb3V0cycgc3R5bGU9e3twYWRkaW5nVG9wOjY4fX0+XG4gICAgICA8TGlzdD5cbiAgICAgICAge2l0ZW1zICYmXG4gICAgICAgICAgaXRlbXMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgIGl0ZW1zLm1hcCgodSkgPT4ge1xuICAgICAgIFxuICAgICAgICAgIHJldHVybiAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6J2ZsZXgnfX0+XG4gICAgICAgICAgICA8TGlzdEl0ZW0gb25DbGljaz17b25TZWxlY3RVbnJlYWR9IGlkPXt1LnVzZXJuYW1lfSBzdHlsZT17e2ZsZXg6NX19IGRhdGEtdGVzdGlkPXtgJHt1LnVzZXJuYW1lfS1zZWxlY3RgfT57dS51c2VybmFtZX0gbWVzc2FnZXM6IHt1Lm1lc3NhZ2VDb3VudH08L0xpc3RJdGVtPlxuICAgICAgICAgICAgPExpc3RJdGVtIG9uQ2xpY2s9e29uUmVtb3ZlVW5yZWFkfSBpZD17dS51c2VybmFtZX0gc3R5bGU9e3tjb2xvcjoncmVkJ319IGRhdGEtdGVzdGlkPXtgJHt1LnVzZXJuYW1lfS1yZW1vdmVgfT54PC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH0pfVxuICAgICAgPC9MaXN0PlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbInJlZHVjZXJVbnJlYWRoYW5nb3V0cyIsInVucmVhZGhhbmdvdXRzIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50IiwiaW5kZXgiLCJtZXNzYWdlQ291bnQiLCJvYmoiLCJmaW5kIiwiYSIsInVzZXJuYW1lIiwic3RhdGUiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJwdXNoIiwiVW5yZWFkSGFuZ291dHMiLCJvblNlbGVjdFVucmVhZCIsIm9uUmVtb3ZlVW5yZWFkIiwiaXRlbXMiLCJzZXRJdGVtcyIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicmVkdWNlZCIsInBhZGRpbmdUb3AiLCJsZW5ndGgiLCJtYXAiLCJ1IiwiZGlzcGxheSIsImZsZXgiLCJjb2xvciJdLCJtYXBwaW5ncyI6Ijs7QUFBTyxTQUFTQSxxQkFBVCxDQUErQjtBQUFDQyxFQUFBQTtBQUFELENBQS9CLEVBQWdEO0FBQ25ELFNBQU9BLGNBQWMsQ0FBQ0MsTUFBZixDQUFzQixDQUFDQyxXQUFELEVBQWNDLE9BQWQs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
