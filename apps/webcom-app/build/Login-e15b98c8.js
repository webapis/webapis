import { u as useAuthContext, h } from './index-e8a622fb.js';
import { B as Button, v as validationTypes, I as Input, F as Form, a as valueChanged, l as login } from './actions-b0074093.js';

function Login() {
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    emailorusername,
    password,
    error
  } = state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName,
      value,
      dispatch,
      state
    }));
  }

  function handleLogin() {
    dispatch(login({
      dispatch,
      state
    }));
  }

  return h("div", {
    "data-testid": "loginform",
    className: "auth-form"
  }, h(Form, {
    formTitle: "Login",
    error: error
  }, h(Input, {
    value: emailorusername,
    onChange: handleChange,
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS, validationTypes.EMAIL_NOT_REGISTERED, validationTypes.USERNAME_NOT_REGISTERED]
  }), h(Input, {
    value: password,
    onChange: handleChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Button, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: handleLogin,
    title: "Login"
  }), h("a", {
    href: "#/requestpasschange"
  }, "Forgot Password!")));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tZTE1Yjk4YzguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dpbigpIHtcclxuICBjb25zdCB7IGRpc3BhdGNoLCBzdGF0ZSB9ID0gdXNlQXV0aENvbnRleHQoKTtcclxuXHJcbiAgY29uc3QgeyBlbWFpbG9ydXNlcm5hbWUsIHBhc3N3b3JkLCBlcnJvciB9ID0gc3RhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMudmFsdWVDaGFuZ2VkKHsgcHJvcE5hbWUsIHZhbHVlLCBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVMb2dpbigpIHtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMubG9naW4oeyBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJsb2dpbmZvcm1cIiBjbGFzc05hbWU9XCJhdXRoLWZvcm1cIj5cclxuICAgICAgPEZvcm0gZm9ybVRpdGxlPVwiTG9naW5cIiBlcnJvcj17ZXJyb3J9PlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgdmFsdWU9e2VtYWlsb3J1c2VybmFtZX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICBuYW1lPVwiZW1haWxvcnVzZXJuYW1lXCJcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgZW1haWwgb3IgdXNlcm5hbWVcIlxyXG4gICAgICAgICAgaWQ9XCJlbWFpbE9yVXNlcm5hbWVcIlxyXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJlbWFpbE9yVXNlcm5hbWVcIlxyXG4gICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX05PVF9SRUdJU1RFUkVELFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICA8SW5wdXRcclxuICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZW50ZXIgcGFzc3dvcmRcIlxyXG4gICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5JTlZBTElEX0NSRURFTlRJQUxTLFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgIGlkPVwibG9naW4tYnRuXCJcclxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwibG9naW4tYnRuXCJcclxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUxvZ2lufVxyXG4gICAgICAgICAgdGl0bGU9XCJMb2dpblwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8YSBocmVmPVwiIy9yZXF1ZXN0cGFzc2NoYW5nZVwiPkZvcmdvdCBQYXNzd29yZCE8L2E+XHJcbiAgICAgIDwvRm9ybT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkxvZ2luIiwiZGlzcGF0Y2giLCJzdGF0ZSIsInVzZUF1dGhDb250ZXh0IiwiZW1haWxvcnVzZXJuYW1lIiwicGFzc3dvcmQiLCJlcnJvciIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJhY3Rpb25zIiwicHJvcE5hbWUiLCJoYW5kbGVMb2dpbiIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX09SX0VNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiSU5WQUxJRF9DUkVERU5USUFMUyIsIkVNQUlMX05PVF9SRUdJU1RFUkVEIiwiVVNFUk5BTUVfTk9UX1JFR0lTVEVSRUQiLCJFTVBUWV9TVFJJTkdfVkFMSURBVElPTiJdLCJtYXBwaW5ncyI6Ijs7O0FBUWUsU0FBU0EsS0FBVCxHQUFpQjtBQUM5QixRQUFNO0FBQUVDLElBQUFBLFFBQUY7QUFBWUMsSUFBQUE7QUFBWixNQUFzQkMsY0FBYyxFQUExQztBQUVBLFFBQU07QUFBRUMsSUFBQUEsZUFBRjtBQUFtQkMsSUFBQUEsUUFBbkI7QUFBNkJDLElBQUFBO0FBQTdCLE1BQXVDSixLQUE3Qzs7QUFFQSxXQUFTSyxZQUFULENBQXNCQyxDQUF0QixFQUF5QjtBQUN2QixVQUFNO0FBQUVDLE1BQUFBLElBQUY7QUFBUUMsTUFBQUE7QUFBUixRQUFrQkYsQ0FBQyxDQUFDRyxNQUExQjtBQUNBVixJQUFBQSxRQUFRLENBQUNXLFlBQUEsQ0FBcUI7QUFBRUMsTUFBQUEsUUFBRjtBQUFZSCxNQUFBQSxLQUFaO0FBQW1CVCxNQUFBQSxRQUFuQjtBQUE2QkMsTUFBQUE7QUFBN0IsS0FBckIsQ0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsV0FBU1ksV0FBVCxHQUF1QjtBQUNyQmIsSUFBQUEsUUFBUSxDQUFDVyxLQUFBLENBQWM7QUFBRVgsTUFBQUEsUUFBRjtBQUFZQyxNQUFBQTtBQUFaLEtBQWQsQ0FBRCxDQUFSO0FBQ0Q7O0FBRUQsU0FDRTtBQUFLLG1CQUFZLFdBQWpCO0FBQTZCLElBQUEsU0FBUyxFQUFDO0FBQXZDLEtBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUMsT0FBaEI7QUFBd0IsSUFBQSxLQUFLLEVBQUVJO0FBQS9CLEtBQ0UsRUFBQyxLQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVGLGVBRFQ7QUFFRSxJQUFBLFFBQVEsRUFBRUcsWUFGWjtBQUdFLElBQUEsSUFBSSxFQUFDLGlCQUhQO0FBSUUsSUFBQSxJQUFJLEVBQUMsTUFKUDtBQUtFLElBQUEsV0FBVyxFQUFDLHlCQUxkO0FBTUUsSUFBQSxFQUFFLEVBQUMsaUJBTkw7QUFPRSxtQkFBWSxpQkFQZDtBQVFFLElBQUEsZUFBZSxFQUFFLENBQ2ZRLGVBQWUsQ0FBQ0MsbUNBREQsRUFFZkQsZUFBZSxDQUFDRSxtQkFGRCxFQUdmRixlQUFlLENBQUNHLG9CQUhELEVBSWZILGVBQWUsQ0FBQ0ksdUJBSkQ7QUFSbkIsSUFERixFQWlCRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRWQsUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFRSxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsVUFIUDtBQUlFLElBQUEsSUFBSSxFQUFDLFVBSlA7QUFLRSxJQUFBLFdBQVcsRUFBQyxnQkFMZDtBQU1FLElBQUEsRUFBRSxFQUFDLFVBTkw7QUFPRSxtQkFBWSxVQVBkO0FBUUUsSUFBQSxlQUFlLEVBQUUsQ0FDZlEsZUFBZSxDQUFDSyx1QkFERCxFQUVmTCxlQUFlLENBQUNFLG1CQUZEO0FBUm5CLElBakJGLEVBK0JFLEVBQUMsTUFBRDtBQUNFLElBQUEsSUFBSSxFQUFDLFFBRFA7QUFFRSxJQUFBLEVBQUUsRUFBQyxXQUZMO0FBR0UsbUJBQVksV0FIZDtBQUlFLElBQUEsT0FBTyxFQUFFSCxXQUpYO0FBS0UsSUFBQSxLQUFLLEVBQUM7QUFMUixJQS9CRixFQXNDRTtBQUFHLElBQUEsSUFBSSxFQUFDO0FBQVIsd0JBdENGLENBREYsQ0FERjtBQTRDRDs7OzsifQ==
