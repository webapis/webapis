import {
  u as useRouteContext,
  a as useMediaQuery,
  b as useAuthContext,
  c as useFormContext,
  p,
  h,
  v as validationTypes,
  o as forgotPassword,
  d as valueChanged,
} from "./index-a45f22ef.js";
import {
  P as Paper,
  F as Form,
  I as Input,
  B as Button,
  G as Grid,
} from "./Grid-5c4f045b.js";
import "./style-0252033b.js";

function RequestPassChange() {
  const [route, setRoute] = useRouteContext();
  const { device } = useMediaQuery();
  const { dispatch, state } = useAuthContext();
  const { dispatch: formDispatch } = useFormContext();
  const { email } = state;

  function handleForgotPassword() {
    dispatch(
      forgotPassword({
        dispatch,
        state,
        formDispatch,
      })
    );
  }

  function handleChange(e) {
    const { name, value } = e.target;
    dispatch(
      valueChanged({
        propName: name,
        value,
        dispatch,
        state,
      })
    );
  }

  p(() => {
    if (state.authFeedback) {
      debugger;
      setRoute("/authfeedback");
    }
  }, [state.authFeedback]);
  return h(
    Grid,
    {
      width: device === "phone" ? 100 : 25,
    },
    h(
      Paper,
      null,
      h(
        Form,
        {
          formTitle: "Forgot Password",
        },
        h(Input, {
          value: email,
          placeholder: "email",
          name: "email",
          onChange: handleChange,
          type: "email",
          id: "email",
          validationTypes: [
            validationTypes.EMAIL_FORMAT_VALIDATION,
            validationTypes.EMAIL_NOT_REGISTERED,
          ],
        }),
        h(Button, {
          className: "btn",
          type: "button",
          onClick: handleForgotPassword,
          id: "requestpasschange-btn",
          title: "Send",
        })
      )
    )
  );
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtNjdjZjA5ZDguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xuaW1wb3J0IHsgdXNlQXV0aENvbnRleHQgfSBmcm9tICcuL2F1dGgtY29udGV4dCc7XG5pbXBvcnQgeyB1c2VGb3JtQ29udGV4dCB9IGZyb20gJy4uL2Zvcm0vZm9ybS1jb250ZXh0JztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XG5pbXBvcnQgeyBQYXBlciB9IGZyb20gJy4uL2xheW91dC9QYXBlcic7XG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xuaW1wb3J0IHsgdXNlUm91dGVDb250ZXh0IH0gZnJvbSAnLi4vcm91dGUvcm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlcXVlc3RQYXNzQ2hhbmdlKCkge1xuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVJvdXRlQ29udGV4dCgpO1xuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xuICBjb25zdCB7IGRpc3BhdGNoLCBzdGF0ZSB9ID0gdXNlQXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xuICBjb25zdCB7IGVtYWlsIH0gPSBzdGF0ZTtcblxuICBmdW5jdGlvbiBoYW5kbGVGb3Jnb3RQYXNzd29yZCgpIHtcbiAgICBkaXNwYXRjaChhY3Rpb25zLmZvcmdvdFBhc3N3b3JkKHsgZGlzcGF0Y2gsIHN0YXRlLCBmb3JtRGlzcGF0Y2ggfSkpO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XG4gICAgZGlzcGF0Y2goYWN0aW9ucy52YWx1ZUNoYW5nZWQoeyBwcm9wTmFtZTogbmFtZSwgdmFsdWUsIGRpc3BhdGNoLCBzdGF0ZSB9KSk7XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGF0ZS5hdXRoRmVlZGJhY2spIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgc2V0Um91dGUoJy9hdXRoZmVlZGJhY2snKTtcbiAgICB9XG4gIH0sIFtzdGF0ZS5hdXRoRmVlZGJhY2tdKTtcblxuICByZXR1cm4gKFxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XG4gICAgICA8UGFwZXI+XG4gICAgICAgIDxGb3JtIGZvcm1UaXRsZT0nRm9yZ290IFBhc3N3b3JkJz5cbiAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcbiAgICAgICAgICAgIG5hbWU9J2VtYWlsJ1xuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIHR5cGU9J2VtYWlsJ1xuICAgICAgICAgICAgaWQ9J2VtYWlsJ1xuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX05PVF9SRUdJU1RFUkVELFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRm9yZ290UGFzc3dvcmR9XG4gICAgICAgICAgICBpZD0ncmVxdWVzdHBhc3NjaGFuZ2UtYnRuJ1xuICAgICAgICAgICAgdGl0bGU9J1NlbmQnXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Gb3JtPlxuICAgICAgPC9QYXBlcj5cbiAgICA8L0dyaWQ+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiUmVxdWVzdFBhc3NDaGFuZ2UiLCJyb3V0ZSIsInNldFJvdXRlIiwidXNlUm91dGVDb250ZXh0IiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsImRpc3BhdGNoIiwic3RhdGUiLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwiZW1haWwiLCJoYW5kbGVGb3Jnb3RQYXNzd29yZCIsImFjdGlvbnMiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJ1c2VFZmZlY3QiLCJhdXRoRmVlZGJhY2siLCJ2YWxpZGF0aW9uVHlwZXMiLCJFTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIkVNQUlMX05PVF9SRUdJU1RFUkVEIl0sIm1hcHBpbmdzIjoiOzs7O0FBY2UsU0FBU0EsaUJBQVQsR0FBNkI7QUFDMUMsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLGVBQWUsRUFBekM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQTtBQUFaLE1BQXNCQyxjQUFjLEVBQTFDO0FBQ0EsUUFBTTtBQUFFRixJQUFBQSxRQUFRLEVBQUVHO0FBQVosTUFBNkJDLGNBQWMsRUFBakQ7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBWUosS0FBbEI7O0FBRUEsV0FBU0ssb0JBQVQsR0FBZ0M7QUFDOUJOLElBQUFBLFFBQVEsQ0FBQ08sY0FBQSxDQUF1QjtBQUFFUCxNQUFBQSxRQUFGO0FBQVlDLE1BQUFBLEtBQVo7QUFBbUJFLE1BQUFBO0FBQW5CLEtBQXZCLENBQUQsQ0FBUjtBQUNEOztBQUNELFdBQVNLLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU07QUFBRUMsTUFBQUEsSUFBRjtBQUFRQyxNQUFBQTtBQUFSLFFBQWtCRixDQUFDLENBQUNHLE1BQTFCO0FBQ0FaLElBQUFBLFFBQVEsQ0FBQ08sWUFBQSxDQUFxQjtBQUFFTSxNQUFBQSxRQUFRLEVBQUVILElBQVo7QUFBa0JDLE1BQUFBLEtBQWxCO0FBQXlCWCxNQUFBQSxRQUF6QjtBQUFtQ0MsTUFBQUE7QUFBbkMsS0FBckIsQ0FBRCxDQUFSO0FBQ0Q7O0FBRURhLEVBQUFBLENBQVMsQ0FBQyxNQUFNO0FBQ2QsUUFBSWIsS0FBSyxDQUFDYyxZQUFWLEVBQXdCO0FBQ3RCO0FBQ0FuQixNQUFBQSxRQUFRLENBQUMsZUFBRCxDQUFSO0FBQ0Q7QUFDRixHQUxRLEVBS04sQ0FBQ0ssS0FBSyxDQUFDYyxZQUFQLENBTE0sQ0FBVDtBQU9BLFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVqQixNQUFNLEtBQUssT0FBWCxHQUFxQixHQUFyQixHQUEyQjtBQUF4QyxLQUNFLEVBQUMsS0FBRCxRQUNFLEVBQUMsSUFBRDtBQUFNLElBQUEsU0FBUyxFQUFDO0FBQWhCLEtBQ0UsRUFBQyxLQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVPLEtBRFQ7QUFFRSxJQUFBLFdBQVcsRUFBQyxPQUZkO0FBR0UsSUFBQSxJQUFJLEVBQUMsT0FIUDtBQUlFLElBQUEsUUFBUSxFQUFFRyxZQUpaO0FBS0UsSUFBQSxJQUFJLEVBQUMsT0FMUDtBQU1FLElBQUEsRUFBRSxFQUFDLE9BTkw7QUFPRSxJQUFBLGVBQWUsRUFBRSxDQUNmUSxlQUFlLENBQUNDLHVCQURELEVBRWZELGVBQWUsQ0FBQ0Usb0JBRkQ7QUFQbkIsSUFERixFQWFFLEVBQUMsTUFBRDtBQUNFLElBQUEsU0FBUyxFQUFDLEtBRFo7QUFFRSxJQUFBLElBQUksRUFBQyxRQUZQO0FBR0UsSUFBQSxPQUFPLEVBQUVaLG9CQUhYO0FBSUUsSUFBQSxFQUFFLEVBQUMsdUJBSkw7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBYkYsQ0FERixDQURGLENBREY7QUEyQkQ7Ozs7In0=
