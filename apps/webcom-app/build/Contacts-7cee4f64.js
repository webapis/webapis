import { h, _ as _extends, a as actionTypes, u as useContactsContext, p, L as ListItem, b as List, v } from './index-719da01f.js';
import { P as Paper } from './Paper-7af408e2.js';

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  const {
    id
  } = props;
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props, {
    "data-testid": id
  })));
}

const style$1 = {
  width: 56,
  height: 56,
  backgroundColor: 'yellow',
  borderRadius: '50%',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
};
function Fab({
  children
}) {
  return h("div", null, h("div", {
    style: style$1
  }, children));
}

function AddIcon() {
  return h("svg", {
    height: "24",
    viewBox: "0 0 24 24",
    width: "24"
  }, h("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), h("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }));
}

async function fetchUsersInContact({
  dispatch
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_USERS_IN_CONTACT_STARTED
    });
    const response = await fetch('http://localhost:3000/contacts/find');
    const {
      contacts
    } = await response.json();
    localStorage.setItem('contacts', JSON.stringify(contacts));
    dispatch({
      type: actionTypes.FETCH_USERS_IN_CONTACT_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_USERS_IN_CONTACT_FAILED,
      error
    });
  }
}
async function fetchUsers({
  dispatch,
  filter
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_USERS_STARTED
    });
    const response = await fetch(`http://localhost:3000/users/find?filter=${filter}`);
    const {
      users
    } = await response.json();
    debugger;
    dispatch({
      type: actionTypes.FETCH_USERS_SUCCESS,
      users
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_USERS_FAILED,
      error
    });
  }
}
function getLocalContacts({
  dispatch
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_LOCAL_CONTACTS_STARTED
    });
    const contacts = JSON.parse(localStorage.getItem('contacts')) ? JSON.parse(localStorage.getItem('contacts')) : [];
    dispatch({
      type: actionTypes.FETCH_LOCAL_CONTACTS_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_LOCAL_CONTACTS_FAILED,
      error
    });
  }
}
function findLocalContact({
  dispatch,
  filter
}) {
  try {
    dispatch({
      type: actionTypes.FIND_LOCAL_CONTACT_STARTED
    });
    const query = JSON.parse(localStorage.getItem('contacts')).filter(c => c.username.includes(filter));
    const filtered = query ? query : [];
    dispatch({
      type: actionTypes.FIND_LOCAL_CONTACT_SUCCESS,
      contacts: filtered
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FIND_LOCAL_CONTACT_FAILED,
      error
    });
  }
}
function selectUser({
  dispatch,
  userName
}) {
  dispatch({
    type: actionTypes.USER_SELECTED,
    userName
  });
}
function selectContact({
  dispatch,
  contactName
}) {
  dispatch({
    type: actionTypes.CONTACT_SELECTED,
    contactName
  });
}

function Users({
  filter
}) {
  const {
    state,
    dispatch
  } = useContactsContext();
  const {
    users
  } = state;
  p(() => {
    if (state.contacts.length === 0 && filter && filter.length >= 4) {
      fetchUsers({
        dispatch,
        filter
      });
    }
  }, [state.contacts, filter]);

  function handleSelectUser(e) {
    selectUser({
      dispatch,
      userName: e.target.id
    });
  }

  return h(List, {
    id: "users"
  }, users && users.length > 0 && users.map(c => {
    return h(ListItem, {
      id: c.username,
      onClick: handleSelectUser
    }, c.username);
  }));
}

function UsersInContact({
  filter
}) {
  const {
    state,
    dispatch
  } = useContactsContext();
  const {
    contacts
  } = state;
  p(() => {
    if (localStorage.getItem('contacts')) {
      getLocalContacts({
        dispatch
      });
    } else {
      fetchUsersInContact({
        dispatch
      });
    }
  }, []);
  p(() => {
    if (filter) {
      findLocalContact({
        dispatch,
        filter
      });
    }
  }, [filter]);

  function handleSelectContact(e) {
    selectContact({
      dispatch,
      contactName: e.target.id
    });
  }

  return h(List, {
    id: "usersincontact"
  }, contacts && contacts.length > 0 && contacts.map(c => {
    return h(ListItem, {
      id: c.username,
      onClick: handleSelectContact
    }, c.username);
  }));
}

function Contacts() {
  const {
    state
  } = useContactsContext();
  const [filter, setFilter] = v(null);

  function handleFilter(e) {
    setFilter(e.target.value);
  }

  return h("div", {
    style: {
      display: 'flex'
    },
    "data-testid": "contact-list"
  }, h(Paper, null, h(NewConversation, {
    onChange: handleFilter
  }), h(UsersInContact, {
    filter: filter
  }), h(Users, {
    filter: filter
  })));
}

function NewConversation({
  onChange
}) {
  const [newConversation, setNewConversation] = v(false);

  function handleNewConversation() {
    setNewConversation(true);
  }

  return h(List, null, newConversation ? h(TextInput, {
    onChange: onChange,
    placeholder: "Enter username or email",
    id: "contactsearch"
  }) : h(ListItem, {
    onClick: handleNewConversation,
    id: "conversation"
  }, h(Fab, null, h(AddIcon, null)), h("div", null, "New Conversation")));
}

export default Contacts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdHMtN2NlZTRmNjQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9sYXlvdXQvVGV4dElucHV0LmpzIiwiLi4vLi4vLi4vY2xpZW50L2xheW91dC9GYWIuanMiLCIuLi8uLi8uLi9jbGllbnQvbGF5b3V0L2ljb25zL0FkZEljb24uanMiLCIuLi8uLi8uLi9jbGllbnQvY2hhdC9jb250YWN0cy9hY3Rpb25zLmpzIiwiLi4vLi4vLi4vY2xpZW50L2NoYXQvdXNlcnMvVXNlcnMuanMiLCIuLi8uLi8uLi9jbGllbnQvY2hhdC91c2Vycy1pbi1jb250YWN0L1VzZXJzSW5Db250YWN0LmpzIiwiLi4vLi4vLi4vY2xpZW50L2NoYXQvY29udGFjdHMvQ29udGFjdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcblxyXG5jb25zdCBzdHlsZSA9IHtcclxuICBwYWRkaW5nOiA4LFxyXG4gIG1hcmdpbkxlZnQ6IDE2LFxyXG4gIG1hcmdpblJpZ2h0OiAxNixcclxuICBtYXJnaW5Ub3A6IDgsXHJcbiAgbWFyZ2luQm90dG9tOiA4LFxyXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxyXG4gIGZsZXg6IDEsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVGV4dElucHV0KHByb3BzKSB7XHJcbiAgY29uc3QgeyBpZCB9ID0gcHJvcHM7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCB3aWR0aDogJzEwMCUnIH19PlxyXG4gICAgICA8aW5wdXQgc3R5bGU9e3N0eWxlfSB7Li4ucHJvcHN9IGRhdGEtdGVzdGlkPXtpZH0gLz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcblxyXG5jb25zdCBzdHlsZSA9IHtcclxuICB3aWR0aDogNTYsXHJcbiAgaGVpZ2h0OiA1NixcclxuICBiYWNrZ3JvdW5kQ29sb3I6ICd5ZWxsb3cnLFxyXG4gIGJvcmRlclJhZGl1czogJzUwJScsXHJcbiAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBGYWIoeyBjaGlsZHJlbiB9KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlfT57Y2hpbGRyZW59PC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5leHBvcnQgIGZ1bmN0aW9uIEFkZEljb24oKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxzdmdcclxuICAgICAgaGVpZ2h0PScyNCdcclxuICAgICAgdmlld0JveD0nMCAwIDI0IDI0J1xyXG4gICAgICB3aWR0aD0nMjQnXHJcbiAgICA+XHJcbiAgICAgIDxwYXRoIGQ9J00xOSAxM2gtNnY2aC0ydi02SDV2LTJoNlY1aDJ2Nmg2djJ6JyAvPlxyXG4gICAgICA8cGF0aCBkPSdNMCAwaDI0djI0SDB6JyBmaWxsPSdub25lJyAvPlxyXG4gICAgPC9zdmc+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgYWN0aW9uVHlwZXMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hVc2Vyc0luQ29udGFjdCh7IGRpc3BhdGNoIH0pIHtcclxuICB0cnkge1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9VU0VSU19JTl9DT05UQUNUX1NUQVJURUQgfSk7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvY29udGFjdHMvZmluZCcpO1xyXG5cclxuICAgIGNvbnN0IHsgY29udGFjdHMgfSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjb250YWN0cycsIEpTT04uc3RyaW5naWZ5KGNvbnRhY3RzKSk7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX1VTRVJTX0lOX0NPTlRBQ1RfU1VDQ0VTUywgY29udGFjdHMgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogYWN0aW9uVHlwZXMuRkVUQ0hfVVNFUlNfSU5fQ09OVEFDVF9GQUlMRUQsIGVycm9yIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoVXNlcnMoeyBkaXNwYXRjaCwgZmlsdGVyIH0pIHtcclxuICB0cnkge1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9VU0VSU19TVEFSVEVEIH0pO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2Vycy9maW5kP2ZpbHRlcj0ke2ZpbHRlcn1gXHJcbiAgICApO1xyXG4gICAgY29uc3QgeyB1c2VycyB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgZGVidWdnZXI7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX1VTRVJTX1NVQ0NFU1MsIHVzZXJzIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX1VTRVJTX0ZBSUxFRCwgZXJyb3IgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWxDb250YWN0cyh7IGRpc3BhdGNoIH0pIHtcclxuICB0cnkge1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9MT0NBTF9DT05UQUNUU19TVEFSVEVEIH0pO1xyXG4gICAgY29uc3QgY29udGFjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb250YWN0cycpKVxyXG4gICAgICA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NvbnRhY3RzJykpXHJcbiAgICAgIDogW107XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX0xPQ0FMX0NPTlRBQ1RTX1NVQ0NFU1MsIGNvbnRhY3RzIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX0xPQ0FMX0NPTlRBQ1RTX0ZBSUxFRCwgZXJyb3IgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZExvY2FsQ29udGFjdCh7IGRpc3BhdGNoLCBmaWx0ZXIgfSkge1xyXG4gIHRyeSB7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZJTkRfTE9DQUxfQ09OVEFDVF9TVEFSVEVEIH0pO1xyXG4gICAgY29uc3QgcXVlcnkgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb250YWN0cycpKS5maWx0ZXIoKGMpID0+XHJcbiAgICAgIGMudXNlcm5hbWUuaW5jbHVkZXMoZmlsdGVyKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGZpbHRlcmVkID0gcXVlcnkgPyBxdWVyeSA6IFtdO1xyXG4gICAgZGlzcGF0Y2goe1xyXG4gICAgICB0eXBlOiBhY3Rpb25UeXBlcy5GSU5EX0xPQ0FMX0NPTlRBQ1RfU1VDQ0VTUyxcclxuICAgICAgY29udGFjdHM6IGZpbHRlcmVkLFxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGRpc3BhdGNoKHsgdHlwZTogYWN0aW9uVHlwZXMuRklORF9MT0NBTF9DT05UQUNUX0ZBSUxFRCwgZXJyb3IgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0VXNlcih7IGRpc3BhdGNoLCB1c2VyTmFtZSB9KSB7XHJcbiAgZGlzcGF0Y2goe1xyXG4gICAgdHlwZTogYWN0aW9uVHlwZXMuVVNFUl9TRUxFQ1RFRCxcclxuICAgIHVzZXJOYW1lLFxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0Q29udGFjdCh7IGRpc3BhdGNoLCBjb250YWN0TmFtZSB9KSB7XHJcbiAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5DT05UQUNUX1NFTEVDVEVELCBjb250YWN0TmFtZSB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgTGlzdCwgTGlzdEl0ZW0gfSBmcm9tICcuLi8uLi9sYXlvdXQvTmF2TGlzdCc7XHJcbmltcG9ydCB7IHVzZUNvbnRhY3RzQ29udGV4dCB9IGZyb20gJy4uL2NvbnRhY3RzL2NvbnRhY3RzLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBmZXRjaFVzZXJzLCBzZWxlY3RVc2VyIH0gZnJvbSAnLi4vY29udGFjdHMvYWN0aW9ucyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVc2Vycyh7IGZpbHRlciB9KSB7XHJcbiAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IHVzZUNvbnRhY3RzQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgdXNlcnMgfSA9IHN0YXRlO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLmNvbnRhY3RzLmxlbmd0aCA9PT0gMCAmJiBmaWx0ZXIgJiYgZmlsdGVyLmxlbmd0aCA+PSA0KSB7XHJcbiAgICAgIGZldGNoVXNlcnMoeyBkaXNwYXRjaCwgZmlsdGVyIH0pO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5jb250YWN0cywgZmlsdGVyXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdFVzZXIoZSkge1xyXG4gICAgc2VsZWN0VXNlcih7IGRpc3BhdGNoLCB1c2VyTmFtZTogZS50YXJnZXQuaWQgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPExpc3QgaWQ9J3VzZXJzJz5cclxuICAgICAge3VzZXJzICYmXHJcbiAgICAgICAgdXNlcnMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIHVzZXJzLm1hcCgoYykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPExpc3RJdGVtIGlkPXtjLnVzZXJuYW1lfSBvbkNsaWNrPXtoYW5kbGVTZWxlY3RVc2VyfT5cclxuICAgICAgICAgICAgICB7Yy51c2VybmFtZX1cclxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSl9XHJcbiAgICA8L0xpc3Q+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgdXNlQ29udGFjdHNDb250ZXh0IH0gZnJvbSAnLi4vY29udGFjdHMvY29udGFjdHMtY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgZmV0Y2hVc2Vyc0luQ29udGFjdCxcclxuICBnZXRMb2NhbENvbnRhY3RzLFxyXG4gIGZpbmRMb2NhbENvbnRhY3QsXHJcbiAgc2VsZWN0Q29udGFjdCxcclxufSBmcm9tICcuLi9jb250YWN0cy9hY3Rpb25zJztcclxuaW1wb3J0IHsgTGlzdCwgTGlzdEl0ZW0gfSBmcm9tICcuLi8uLi9sYXlvdXQvTmF2TGlzdCc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFVzZXJzSW5Db250YWN0KHsgZmlsdGVyIH0pIHtcclxuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdXNlQ29udGFjdHNDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBjb250YWN0cyB9ID0gc3RhdGU7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NvbnRhY3RzJykpIHtcclxuICAgICAgZ2V0TG9jYWxDb250YWN0cyh7IGRpc3BhdGNoIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmV0Y2hVc2Vyc0luQ29udGFjdCh7IGRpc3BhdGNoIH0pO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChmaWx0ZXIpIHtcclxuICAgICAgZmluZExvY2FsQ29udGFjdCh7IGRpc3BhdGNoLCBmaWx0ZXIgfSk7XHJcbiAgICB9XHJcbiAgfSwgW2ZpbHRlcl0pO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVTZWxlY3RDb250YWN0KGUpIHtcclxuICAgIHNlbGVjdENvbnRhY3QoeyBkaXNwYXRjaCwgY29udGFjdE5hbWU6IGUudGFyZ2V0LmlkIH0pO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPExpc3QgaWQ9J3VzZXJzaW5jb250YWN0Jz5cclxuICAgICAge2NvbnRhY3RzICYmXHJcbiAgICAgICAgY29udGFjdHMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIGNvbnRhY3RzLm1hcCgoYykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPExpc3RJdGVtIGlkPXtjLnVzZXJuYW1lfSBvbkNsaWNrPXtoYW5kbGVTZWxlY3RDb250YWN0fT5cclxuICAgICAgICAgICAgICB7Yy51c2VybmFtZX1cclxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSl9XHJcbiAgICA8L0xpc3Q+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgeyBMaXN0LCBMaXN0SXRlbSB9IGZyb20gJy4uLy4uL2xheW91dC9OYXZMaXN0JztcclxuaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSAnLi4vLi4vbGF5b3V0L1RleHRJbnB1dCc7XHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSAnLi4vLi4vbGF5b3V0L1BhcGVyJztcclxuaW1wb3J0IHsgRmFiIH0gZnJvbSAnLi4vLi4vbGF5b3V0L0ZhYic7XHJcbmltcG9ydCB7IEFkZEljb24gfSBmcm9tICcuLi8uLi9sYXlvdXQvaWNvbnMvQWRkSWNvbic7XHJcbmltcG9ydCBVc2VycyBmcm9tICcuLi91c2Vycy9Vc2Vycyc7XHJcbmltcG9ydCBVc2Vyc0luQ29udGFjdCBmcm9tICcuLi91c2Vycy1pbi1jb250YWN0L1VzZXJzSW5Db250YWN0JztcclxuaW1wb3J0IHsgdXNlQ29udGFjdHNDb250ZXh0IH0gZnJvbSAnLi9jb250YWN0cy1jb250ZXh0JztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udGFjdHMoKSB7XHJcbiAgY29uc3QgeyBzdGF0ZSB9ID0gdXNlQ29udGFjdHNDb250ZXh0KCk7XHJcbiAgY29uc3QgW2ZpbHRlciwgc2V0RmlsdGVyXSA9IHVzZVN0YXRlKG51bGwpO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVGaWx0ZXIoZSkge1xyXG4gICAgc2V0RmlsdGVyKGUudGFyZ2V0LnZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JyB9fSBkYXRhLXRlc3RpZD1cImNvbnRhY3QtbGlzdFwiPlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPE5ld0NvbnZlcnNhdGlvbiBvbkNoYW5nZT17aGFuZGxlRmlsdGVyfSAvPlxyXG4gICAgICAgIHs8VXNlcnNJbkNvbnRhY3QgZmlsdGVyPXtmaWx0ZXJ9ICAvPn1cclxuICAgICAgICB7IDxVc2VycyBmaWx0ZXI9e2ZpbHRlcn0gLz59XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBOZXdDb252ZXJzYXRpb24oeyBvbkNoYW5nZSB9KSB7XHJcbiAgY29uc3QgW25ld0NvbnZlcnNhdGlvbiwgc2V0TmV3Q29udmVyc2F0aW9uXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlTmV3Q29udmVyc2F0aW9uKCkge1xyXG4gICAgc2V0TmV3Q29udmVyc2F0aW9uKHRydWUpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxMaXN0PlxyXG4gICAgICB7bmV3Q29udmVyc2F0aW9uID8gKFxyXG4gICAgICAgIDxUZXh0SW5wdXQgb25DaGFuZ2U9e29uQ2hhbmdlfSBwbGFjZWhvbGRlcj0nRW50ZXIgdXNlcm5hbWUgb3IgZW1haWwnIGlkPSdjb250YWN0c2VhcmNoJyAvPlxyXG4gICAgICApIDogKFxyXG4gICAgICAgIDxMaXN0SXRlbSBvbkNsaWNrPXtoYW5kbGVOZXdDb252ZXJzYXRpb259IGlkPSdjb252ZXJzYXRpb24nPlxyXG4gICAgICAgICAgPEZhYj5cclxuICAgICAgICAgICAgPEFkZEljb24gLz5cclxuICAgICAgICAgIDwvRmFiPlxyXG4gICAgICAgICAgPGRpdj5OZXcgQ29udmVyc2F0aW9uPC9kaXY+XHJcbiAgICAgICAgPC9MaXN0SXRlbT5cclxuICAgICAgKX1cclxuICAgIDwvTGlzdD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJzdHlsZSIsInBhZGRpbmciLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3hTaXppbmciLCJmbGV4IiwiVGV4dElucHV0IiwicHJvcHMiLCJpZCIsImRpc3BsYXkiLCJ3aWR0aCIsImhlaWdodCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlclJhZGl1cyIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsIkZhYiIsImNoaWxkcmVuIiwiQWRkSWNvbiIsImZldGNoVXNlcnNJbkNvbnRhY3QiLCJkaXNwYXRjaCIsInR5cGUiLCJhY3Rpb25UeXBlcyIsIkZFVENIX1VTRVJTX0lOX0NPTlRBQ1RfU1RBUlRFRCIsInJlc3BvbnNlIiwiZmV0Y2giLCJjb250YWN0cyIsImpzb24iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIkZFVENIX1VTRVJTX0lOX0NPTlRBQ1RfU1VDQ0VTUyIsImVycm9yIiwiRkVUQ0hfVVNFUlNfSU5fQ09OVEFDVF9GQUlMRUQiLCJmZXRjaFVzZXJzIiwiZmlsdGVyIiwiRkVUQ0hfVVNFUlNfU1RBUlRFRCIsInVzZXJzIiwiRkVUQ0hfVVNFUlNfU1VDQ0VTUyIsIkZFVENIX1VTRVJTX0ZBSUxFRCIsImdldExvY2FsQ29udGFjdHMiLCJGRVRDSF9MT0NBTF9DT05UQUNUU19TVEFSVEVEIiwicGFyc2UiLCJnZXRJdGVtIiwiRkVUQ0hfTE9DQUxfQ09OVEFDVFNfU1VDQ0VTUyIsIkZFVENIX0xPQ0FMX0NPTlRBQ1RTX0ZBSUxFRCIsImZpbmRMb2NhbENvbnRhY3QiLCJGSU5EX0xPQ0FMX0NPTlRBQ1RfU1RBUlRFRCIsInF1ZXJ5IiwiYyIsInVzZXJuYW1lIiwiaW5jbHVkZXMiLCJmaWx0ZXJlZCIsIkZJTkRfTE9DQUxfQ09OVEFDVF9TVUNDRVNTIiwiRklORF9MT0NBTF9DT05UQUNUX0ZBSUxFRCIsInNlbGVjdFVzZXIiLCJ1c2VyTmFtZSIsIlVTRVJfU0VMRUNURUQiLCJzZWxlY3RDb250YWN0IiwiY29udGFjdE5hbWUiLCJDT05UQUNUX1NFTEVDVEVEIiwiVXNlcnMiLCJzdGF0ZSIsInVzZUNvbnRhY3RzQ29udGV4dCIsInVzZUVmZmVjdCIsImxlbmd0aCIsImhhbmRsZVNlbGVjdFVzZXIiLCJlIiwidGFyZ2V0IiwibWFwIiwiVXNlcnNJbkNvbnRhY3QiLCJoYW5kbGVTZWxlY3RDb250YWN0IiwiQ29udGFjdHMiLCJzZXRGaWx0ZXIiLCJ1c2VTdGF0ZSIsImhhbmRsZUZpbHRlciIsInZhbHVlIiwiTmV3Q29udmVyc2F0aW9uIiwib25DaGFuZ2UiLCJuZXdDb252ZXJzYXRpb24iLCJzZXROZXdDb252ZXJzYXRpb24iLCJoYW5kbGVOZXdDb252ZXJzYXRpb24iXSwibWFwcGluZ3Mi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
