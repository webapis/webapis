import { h, v, p, _ as _extends } from './index-ca5036af.js';

const DateLinebreak = ({
  datetime
}) => {
  return h("div", {
    style: {
      display: 'flex'
    }
  }, h("div", {
    style: {
      flex: '1'
    }
  }, h("hr", null)), h("div", {
    style: {
      fontSize: 10,
      color: '#737373'
    }
  }, new Date(datetime).toLocaleDateString()), h("div", {
    style: {
      flex: 1
    }
  }, h("hr", null)));
};

const MessageAligner = ({
  children,
  side,
  style
}) => {
  const alignment = side === "left" ? "flex-start" : "flex-end";
  return h("div", {
    style: {
      display: "flex",
      justifyContent: alignment,
      ...style
    }
  }, children);
};

const MessageView = ({
  message,
  datetime
}) => h("div", {
  style: {
    borderRadius: 15,
    //borderColor: '#9E9E9E',
    //borderStyle: 'solid',
    //borderWidth: 2,
    maxWidth: '100%',
    wordWrap: 'break-word',
    wordBreak: 'break-all',
    minWidth: '30%'
  }
}, h("div", {
  style: {
    backgroundColor: '#ffffff',
    padding: 5,
    margin: 2,
    borderRadius: 50
  }
}, message), h("div", {
  style: {
    fontSize: 10,
    paddingTop: 2,
    textAlign: 'end'
  }
}, h("i", {
  style: {
    backgroundColor: 'transparent',
    color: '#737373'
  }
}, new Date(datetime).toLocaleTimeString())));

const SubsequentMessage = ({
  message,
  datetime
}) => {
  return h("div", {
    style: {
      display: "flex",
      alignItems: "center",
      marginLeft: 45
    }
  }, h(MessageView, {
    message: message,
    datetime: datetime,
    backgroundColor: "#FFECB3"
  }));
};

const style = {
  height: 30,
  width: 40,
  padding: 3,
  borderRadius: 30,
  backgroundColor: 'darkSmoke',
  borderStyle: 'solid',
  borderWidth: 2,
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  color: '#009688',
  borderColor: '#80cbc4'
};

const MessageAvatar = ({
  letter = 'U'
}) => h("div", {
  style: style
}, h("div", null, letter.toUpperCase()));

const FirstMessage = ({
  message,
  datetime,
  letter,
  local
}) => {
  return h("div", {
    style: {
      display: "flex",
      alignItems: "center"
    }
  }, !local && h(MessageAvatar, {
    letter: letter
  }), h(MessageView, {
    message: message,
    datetime: datetime,
    backgroundColor: "#FFECB3"
  }));
};

/* eslint-disable react/jsx-props-no-spreading */

const MessageObjectMappter = props => {
  const {
    order,
    dateSpace
  } = props;
  return h("div", null, dateSpace && h(DateLinebreak, props), h(MessageAligner, props, order === 'F' ? h(FirstMessage, props) : h(SubsequentMessage, props)));
};

const useMessageSorter = messages => {
  const [sortedMessages, setSortedMessages] = v(messages);
  p(() => {
    setSortedMessages(messages.sort((a, b) => a.datetime - b.datetime));
  }, [messages]);
  return {
    sortedMessages
  };
};

const useMessagesMapper = messages => {
  const [mappedMessages, setMappedMessages] = v(messages);

  const mapMessages = () => {
    const localSide = "right";
    const remoteSide = "left";

    if (messages.length === 0) {
      return [];
    }

    let email = messages[0].from;
    let lastDatetime = messages[0].datetime;
    return messages.map((m, i) => {
      if (i === 0 && m.local) {
        return { ...m,
          side: localSide,
          order: "F",
          dateSpace: true
        };
      }

      if (i === 0 && !m.local) {
        const letter = m.from[0] !== undefined ? m.from[0] : "";
        return { ...m,
          side: remoteSide,
          order: "F",
          dateSpace: true,
          letter
        };
      }

      if (i > 0 && email === m.from && m.local) {
        if (new Date(lastDatetime).getDate() !== new Date(m.datetime).getDate()) {
          email = m.from;
          lastDatetime = m.datetime;
          return { ...m,
            side: localSide,
            order: "S",
            dateSpace: true
          };
        }

        email = m.from;
        lastDatetime = m.datetime;
        return { ...m,
          side: localSide,
          order: "S",
          dateSpace: false
        };
      }

      if (i > 0 && email !== m.from && m.local) {
        if (new Date(lastDatetime).getDate() === new Date(m.datetime).getDate()) {
          email = m.from;
          lastDatetime = m.datetime;
          return { ...m,
            side: localSide,
            order: "F",
            dateSpace: false
          };
        }

        email = m.from;
        lastDatetime = m.datetime;
        return { ...m,
          side: localSide,
          order: "F",
          dateSpace: true
        };
      }

      if (i > 0 && email === m.from && !m.local) {
        if (new Date(lastDatetime).getDate() !== new Date(m.datetime).getDate()) {
          const letter = m.from[0] !== undefined ? m.from[0] : "";
          lastDatetime = m.datetime;
          return { ...m,
            side: remoteSide,
            order: "S",
            dateSpace: true,
            letter
          };
        }

        const letter = m.from[0] !== undefined ? m.from[0] : "";
        lastDatetime = m.datetime;
        return { ...m,
          side: remoteSide,
          order: "S",
          dateSpace: false,
          letter
        };
      }

      if (i > 0 && email !== m.from && !m.local) {
        if (new Date(lastDatetime).getDate() === new Date(m.datetime).getDate()) {
          const letter = m.from[0] !== undefined ? m.from[0] : "";
          email = m.from;
          lastDatetime = m.datetime;
          return { ...m,
            side: remoteSide,
            order: "F",
            dateSpace: false,
            letter
          };
        }

        const letter = m.from[0] !== undefined ? m.from[0] : "";
        email = m.from;
        lastDatetime = m.datetime;
        return { ...m,
          side: remoteSide,
          order: "F",
          dateSpace: true,
          letter
        };
      }

      return null;
    });
  };

  p(() => {
    setMappedMessages(mapMessages());
  }, [messages]);
  return {
    mappedMessages
  };
};

const MessageCollectionView = ({
  messages
}) => {
  if (messages.length > 0) {
    return messages.map((message, i) => h(MessageObjectMappter, _extends({}, message, {
      key: i
    })));
  }

  return null;
};

/* eslint-disable react/no-deprecated */

const MessageViewScroller = ({
  children
}) => {
  return h("div", {
    style: {
      transform: 'rotate(180deg)',
      height: '85%',
      backgroundColor: '#eeeeee',
      overflow: 'auto',
      width: '100%'
    }
  }, h("div", {
    style: {
      transform: 'rotate(180deg)'
    }
  }, children));
};

const MessageEditorDisplayer = ({
  onMessageChange,
  message,
  sendMessage,
  id = 0,
  disabled
}) => h("div", {
  style: {
    display: 'flex'
  }
}, h("input", {
  style: {
    flex: 1
  },
  "data-testid": `message${id}`,
  onInput: onMessageChange,
  value: message,
  name: "message",
  type: "text",
  placeholder: "Enter message text"
}), h("div", {
  style: {
    display: 'flex'
  }
}, h("button", {
  "data-testid": `sendMessage${id}`,
  disabled: message === '' || disabled,
  style: {
    marginLeft: 2,
    width: '100%'
  },
  onClick: sendMessage
}, h("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}, h("path", {
  d: "M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"
}), h("path", {
  d: "M0 0h24v24H0z",
  fill: "none"
})))));

/* eslint-disable no-shadow */

const MessagesDisplayer = ({
  messages,
  socket,
  id,
  messageText,
  sendMessage,
  handleMessageChange
}) => {
  const {
    sortedMessages
  } = useMessageSorter(messages);
  const {
    mappedMessages
  } = useMessagesMapper(sortedMessages);
  return [h(MessageViewScroller, null, h(MessageCollectionView, {
    messages: mappedMessages
  })), h(MessageEditorDisplayer, {
    disabled: socket === null,
    id: id,
    message: messageText,
    sendMessage: sendMessage,
    onMessageChange: handleMessageChange
  })];
};

function Settings({
  height = 24,
  width = 24,
  fill = 'none',
  color = 'black'
}) {
  return h("svg", {
    height: height,
    viewBox: "0 0 24 24",
    width: width
  }, h("path", {
    d: "M0 0h24v24H0V0z",
    fill: fill
  }), h("path", {
    color: color,
    d: "M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"
  }));
}

function Chat({
  contact,
  onSetting
}) {
  const {
    messages
  } = contact;
  return h("div", {
    className: "chat-state-view",
    style: {
      margin: 8,
      height: '100%'
    },
    "data-testid": "chat"
  }, h("div", {
    style: {
      display: 'flex',
      justifyContent: 'flex-end',
      width: '100%'
    }
  }, h("div", {
    style: {
      paddingRight: 8,
      paddingTop: 8
    },
    onClick: onSetting,
    "data-testid": "setting"
  }, h(Settings, null))), h("hr", {
    style: {
      width: '99%'
    }
  }), h(MessagesDisplayer, {
    messages: messages
  }));
}

export default Chat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhdC0wNzU2MjI1Zi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3ZpZXdzL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZS1vYmplY3QtbWFwcGVyL2RhdGUtbGluZWJyZWFrLmpzIiwiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3ZpZXdzL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZS1vYmplY3QtbWFwcGVyL21lc3NhZ2UtYWxpZ25lci5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy92aWV3cy9tZXNzYWdlcy1kaXNwbGF5ZXIvbGliL21lc3NhZ2Utb2JqZWN0LW1hcHBlci9tZXNzYWdlLXZpZXcuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvdmlld3MvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLW9iamVjdC1tYXBwZXIvc3Vic2VxdWVudC1tZXNzYWdlLmpzIiwiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3ZpZXdzL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZS1vYmplY3QtbWFwcGVyL21lc3NhZ2UtYXZhdGFyLmpzIiwiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3ZpZXdzL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZS1vYmplY3QtbWFwcGVyL2ZpcnN0LW1lc3NhZ2UuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvdmlld3MvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLW9iamVjdC1tYXBwZXIvbWVzc2FnZS1vYmplY3QtbWFwcGVyLmpzIiwiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3ZpZXdzL21lc3NhZ2VzLWRpc3BsYXllci9saWIvdXNlTWVzc2FnZVNvcnRlci5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy92aWV3cy9tZXNzYWdlcy1kaXNwbGF5ZXIvbGliL3VzZU1lc3NhZ2VNYXBwZXIuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvdmlld3MvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLWNvbGxlY3Rpb24tdmlldy5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy92aWV3cy9tZXNzYWdlcy1kaXNwbGF5ZXIvbGliL21lc3NhZ2VzLXZpZXctc2Nyb2xsZXIuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvdmlld3MvbWVzc2FnZS1lZGl0b3ItZGlzcGxheWVyL2luZGV4LmpzIiwiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL3ZpZXdzL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZXMtZGlzcGxheWVyLmpzIiwiLi4vLi4vLi4vY2xpZW50L2xheW91dC9pY29ucy9TZXR0xLFuZ3MuanMiLCIuLi8uLi8uLi9jbGllbnQvaGFuZ291dHMvdmlld3MvQ2hhdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuXHJcbmNvbnN0IERhdGVMaW5lYnJlYWsgPSAoeyBkYXRldGltZSB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxyXG4gICAgICA8ZGl2IHN0eWxlPXt7IGZsZXg6ICcxJyB9fT5cclxuICAgICAgICA8aHIgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgZm9udFNpemU6IDEwLCBjb2xvcjogJyM3MzczNzMnIH19PlxyXG4gICAgICAgIHtuZXcgRGF0ZShkYXRldGltZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IHN0eWxlPXt7IGZsZXg6IDEgfX0+XHJcbiAgICAgICAgPGhyIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERhdGVMaW5lYnJlYWs7XHJcbiIsImltcG9ydCB7aH0gZnJvbSAncHJlYWN0J1xyXG5cclxuY29uc3QgTWVzc2FnZUFsaWduZXIgPSAoeyBjaGlsZHJlbiwgc2lkZSwgc3R5bGUgfSkgPT4ge1xyXG4gICAgY29uc3QgYWxpZ25tZW50ID0gc2lkZSA9PT0gXCJsZWZ0XCIgPyBcImZsZXgtc3RhcnRcIiA6IFwiZmxleC1lbmRcIlxyXG4gICAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGp1c3RpZnlDb250ZW50OiBhbGlnbm1lbnQsIC4uLnN0eWxlIH19PntjaGlsZHJlbn08L2Rpdj5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VBbGlnbmVyIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcblxyXG5jb25zdCBNZXNzYWdlVmlldyA9ICh7IG1lc3NhZ2UsIGRhdGV0aW1lIH0pID0+IChcclxuICA8ZGl2XHJcbiAgICBzdHlsZT17e1xyXG4gICAgICBib3JkZXJSYWRpdXM6IDE1LFxyXG4gICAgICAvL2JvcmRlckNvbG9yOiAnIzlFOUU5RScsXHJcbiAgICAgIC8vYm9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcbiAgICAgIC8vYm9yZGVyV2lkdGg6IDIsXHJcbiAgICAgIG1heFdpZHRoOiAnMTAwJScsXHJcbiAgICAgIHdvcmRXcmFwOiAnYnJlYWstd29yZCcsXHJcbiAgICAgIHdvcmRCcmVhazogJ2JyZWFrLWFsbCcsXHJcbiAgICAgIG1pbldpZHRoOiAnMzAlJyxcclxuICAgIH19XHJcbiAgPlxyXG4gICAgPGRpdlxyXG4gICAgICBzdHlsZT17e1xyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnLFxyXG4gICAgICAgIHBhZGRpbmc6IDUsXHJcbiAgICAgICAgbWFyZ2luOiAyLFxyXG4gICAgICAgIGJvcmRlclJhZGl1czogNTAsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIHttZXNzYWdlfVxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2XHJcbiAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgZm9udFNpemU6IDEwLFxyXG4gICAgICAgIHBhZGRpbmdUb3A6IDIsXHJcbiAgICAgICAgdGV4dEFsaWduOiAnZW5kJyxcclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAgPGkgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLCBjb2xvcjogJyM3MzczNzMnIH19PlxyXG4gICAgICAgIHtuZXcgRGF0ZShkYXRldGltZSkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9XHJcbiAgICAgIDwvaT5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZVZpZXc7XHJcbiIsImltcG9ydCB7aH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuL21lc3NhZ2UtdmlldydcclxuXHJcbmNvbnN0IFN1YnNlcXVlbnRNZXNzYWdlID0gKHsgbWVzc2FnZSwgZGF0ZXRpbWUgfSkgPT4ge1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsIG1hcmdpbkxlZnQ6NDUgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZXNzYWdlIG1lc3NhZ2U9e21lc3NhZ2V9IGRhdGV0aW1lPXtkYXRldGltZX0gYmFja2dyb3VuZENvbG9yPVwiI0ZGRUNCM1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdWJzZXF1ZW50TWVzc2FnZSIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5cclxuY29uc3Qgc3R5bGUgPSB7XHJcbiAgaGVpZ2h0OiAzMCxcclxuICB3aWR0aDogNDAsXHJcbiAgcGFkZGluZzogMyxcclxuICBib3JkZXJSYWRpdXM6IDMwLFxyXG4gIGJhY2tncm91bmRDb2xvcjogJ2RhcmtTbW9rZScsXHJcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcbiAgYm9yZGVyV2lkdGg6IDIsXHJcbiAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICBjb2xvcjogJyMwMDk2ODgnLFxyXG4gIGJvcmRlckNvbG9yOiAnIzgwY2JjNCcsXHJcbn07XHJcblxyXG5cclxuY29uc3QgTWVzc2FnZUF2YXRhciA9ICh7IGxldHRlciA9ICdVJyB9KSA9PiAoPGRpdiBzdHlsZT17c3R5bGV9PjxkaXY+e2xldHRlci50b1VwcGVyQ2FzZSgpfTwvZGl2PjwvZGl2Pik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQXZhdGFyO1xyXG4iLCJpbXBvcnQge2h9IGZyb20gJ3ByZWFjdCdcclxuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi9tZXNzYWdlLXZpZXcnXHJcbmltcG9ydCBNZXNzYWdlQXZhdGFyIGZyb20gJy4vbWVzc2FnZS1hdmF0YXInXHJcblxyXG5jb25zdCBGaXJzdE1lc3NhZ2UgPSAoeyBtZXNzYWdlLCBkYXRldGltZSxsZXR0ZXIsbG9jYWwgfSkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIgfX0+XHJcbiAgICAgICAgICAgIHshbG9jYWwgJiY8TWVzc2FnZUF2YXRhciBsZXR0ZXI9e2xldHRlcn0gLz59XHJcbiAgICAgICAgICAgIDxNZXNzYWdlIG1lc3NhZ2U9e21lc3NhZ2V9IGRhdGV0aW1lPXtkYXRldGltZX0gYmFja2dyb3VuZENvbG9yPVwiI0ZGRUNCM1wiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaXJzdE1lc3NhZ2UiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9qc3gtcHJvcHMtbm8tc3ByZWFkaW5nICovXHJcbmltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgTWVzc2FnZUFsaWduZXIgZnJvbSAnLi9tZXNzYWdlLWFsaWduZXInO1xyXG5pbXBvcnQgRmlyc3RNZXNzYWdlIGZyb20gJy4vZmlyc3QtbWVzc2FnZSc7XHJcbmltcG9ydCBTdWJzZXF1ZW50TWVzc2FnZSBmcm9tICcuL3N1YnNlcXVlbnQtbWVzc2FnZSc7XHJcbmltcG9ydCBEYXRlTGluZWJyZWFrIGZyb20gJy4vZGF0ZS1saW5lYnJlYWsnO1xyXG5cclxuY29uc3QgTWVzc2FnZU9iamVjdE1hcHB0ZXIgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHsgb3JkZXIsIGRhdGVTcGFjZSB9ID0gcHJvcHM7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIHtkYXRlU3BhY2UgJiYgPERhdGVMaW5lYnJlYWsgey4uLnByb3BzfSAvPn1cclxuICAgICAgICAgICAgPE1lc3NhZ2VBbGlnbmVyIHsuLi5wcm9wc30+XHJcbiAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyID09PSAnRicgPyA8Rmlyc3RNZXNzYWdlIHsuLi5wcm9wc30gLz4gOiA8U3Vic2VxdWVudE1lc3NhZ2Ugey4uLnByb3BzfSAvPlxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPC9NZXNzYWdlQWxpZ25lcj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlT2JqZWN0TWFwcHRlcjtcclxuIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7dXNlRWZmZWN0LHVzZVN0YXRlfSBmcm9tICdwcmVhY3QvaG9va3MnXHJcblxyXG5jb25zdCB1c2VNZXNzYWdlU29ydGVyID0obWVzc2FnZXMpPT57XHJcbmNvbnN0IFtzb3J0ZWRNZXNzYWdlcyxzZXRTb3J0ZWRNZXNzYWdlc109dXNlU3RhdGUobWVzc2FnZXMpXHJcbnVzZUVmZmVjdCgoKT0+e1xyXG5cclxuICAgIHNldFNvcnRlZE1lc3NhZ2VzKG1lc3NhZ2VzLnNvcnQoKGEsIGIpPT4gYS5kYXRldGltZSAtIGIuZGF0ZXRpbWUpKVxyXG59LFttZXNzYWdlc10pXHJcblxyXG5yZXR1cm57c29ydGVkTWVzc2FnZXN9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZU1lc3NhZ2VTb3J0ZXJcclxuXHJcbiIsImltcG9ydCB7aH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQge3VzZVN0YXRlLHVzZUVmZmVjdH0gZnJvbSAncHJlYWN0L2hvb2tzJ1xyXG5cclxuY29uc3QgdXNlTWVzc2FnZXNNYXBwZXIgPShtZXNzYWdlcyk9PntcclxuICBjb25zdCBbbWFwcGVkTWVzc2FnZXMsc2V0TWFwcGVkTWVzc2FnZXNdPXVzZVN0YXRlKG1lc3NhZ2VzKVxyXG4gIGNvbnN0IG1hcE1lc3NhZ2VzID0oKT0+e1xyXG4gICAgY29uc3QgbG9jYWxTaWRlID1cInJpZ2h0XCJcclxuICAgIGNvbnN0IHJlbW90ZVNpZGU9XCJsZWZ0XCJcclxuICAgIGlmKG1lc3NhZ2VzLmxlbmd0aD09PTApe1xyXG4gICAgICByZXR1cm4gW11cclxuICAgIH1cclxuICAgICAgbGV0IGVtYWlsID0gbWVzc2FnZXNbMF0uZnJvbVxyXG4gICAgICBsZXQgbGFzdERhdGV0aW1lID0gbWVzc2FnZXNbMF0uZGF0ZXRpbWVcclxuICAgIHJldHVybiBtZXNzYWdlcy5tYXAoKG0sIGkpID0+IHtcclxuICBcclxuICAgICAgaWYgKGkgPT09IDAgJiYgbS5sb2NhbCkge1xyXG4gICAgICBcclxuICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IGxvY2FsU2lkZSwgb3JkZXI6IFwiRlwiLCBkYXRlU3BhY2U6IHRydWUgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChpID09PSAwICYmICFtLmxvY2FsKSB7XHJcbiAgICAgXHJcbiAgICAgICAgY29uc3QgbGV0dGVyID0gbS5mcm9tWzBdICE9PXVuZGVmaW5lZCA/IG0uZnJvbVswXTpcIlwiXHJcbiAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiByZW1vdGVTaWRlLCBvcmRlcjogXCJGXCIsIGRhdGVTcGFjZTogdHJ1ZSxsZXR0ZXIgfVxyXG4gICAgICB9XHJcbiAgIFxyXG4gICAgICBpZiAoaSA+IDAgJiYgZW1haWwgPT09IG0uZnJvbSAmJiBtLmxvY2FsKSB7XHJcbiAgICAgICAgICBpZiAobmV3IERhdGUobGFzdERhdGV0aW1lKS5nZXREYXRlKCkgIT09IG5ldyBEYXRlKG0uZGF0ZXRpbWUpLmdldERhdGUoKSkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgZW1haWwgPSBtLmZyb21cclxuICAgICAgICAgICAgICBsYXN0RGF0ZXRpbWUgPSBtLmRhdGV0aW1lXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubSwgc2lkZTogbG9jYWxTaWRlLCBvcmRlcjogXCJTXCIsIGRhdGVTcGFjZTogdHJ1ZSB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgICBlbWFpbCA9IG0uZnJvbVxyXG4gICAgICAgICAgICAgIGxhc3REYXRldGltZSA9IG0uZGF0ZXRpbWVcclxuICAgICAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiBsb2NhbFNpZGUsIG9yZGVyOiBcIlNcIiwgZGF0ZVNwYWNlOiBmYWxzZSB9XHJcbiAgICAgICAgICBcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICBpZiAoaSA+IDAgJiYgZW1haWwgIT09IG0uZnJvbSAmJiBtLmxvY2FsKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICBpZiAobmV3IERhdGUobGFzdERhdGV0aW1lKS5nZXREYXRlKCkgPT09IG5ldyBEYXRlKG0uZGF0ZXRpbWUpLmdldERhdGUoKSkge1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgICBlbWFpbCA9IG0uZnJvbVxyXG4gICAgICAgICAgICAgIGxhc3REYXRldGltZSA9IG0uZGF0ZXRpbWVcclxuICAgICAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiBsb2NhbFNpZGUsIG9yZGVyOiBcIkZcIiwgZGF0ZVNwYWNlOiBmYWxzZSB9XHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgIGVtYWlsID0gbS5mcm9tXHJcbiAgICAgICAgICAgICAgbGFzdERhdGV0aW1lID0gbS5kYXRldGltZVxyXG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IGxvY2FsU2lkZSwgb3JkZXI6IFwiRlwiLCBkYXRlU3BhY2U6IHRydWUgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaSA+IDAgJiYgZW1haWwgPT09IG0uZnJvbSAmJiAhbS5sb2NhbCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgaWYgKG5ldyBEYXRlKGxhc3REYXRldGltZSkuZ2V0RGF0ZSgpICE9PSBuZXcgRGF0ZShtLmRhdGV0aW1lKS5nZXREYXRlKCkpIHtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgIGNvbnN0IGxldHRlciA9IG0uZnJvbVswXSAhPT11bmRlZmluZWQgPyBtLmZyb21bMF06XCJcIlxyXG4gICAgICAgICAgICAgIGxhc3REYXRldGltZSA9IG0uZGF0ZXRpbWVcclxuICAgICAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiByZW1vdGVTaWRlLCBvcmRlcjogXCJTXCIsIGRhdGVTcGFjZTogdHJ1ZSxsZXR0ZXIgfVxyXG4gICAgICAgICAgfSBcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBsZXR0ZXIgPSBtLmZyb21bMF0gIT09dW5kZWZpbmVkID8gbS5mcm9tWzBdOlwiXCJcclxuICAgICAgICAgICAgICBsYXN0RGF0ZXRpbWUgPSBtLmRhdGV0aW1lXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubSwgc2lkZTogcmVtb3RlU2lkZSwgb3JkZXI6IFwiU1wiLCBkYXRlU3BhY2U6IGZhbHNlLGxldHRlciB9XHJcbiAgICAgICAgICBcclxuICAgICAgfVxyXG4gICAgICBpZiAoaSA+IDAgJiYgZW1haWwgIT09IG0uZnJvbSAmJiAhbS5sb2NhbCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgaWYgKG5ldyBEYXRlKGxhc3REYXRldGltZSkuZ2V0RGF0ZSgpID09PSBuZXcgRGF0ZShtLmRhdGV0aW1lKS5nZXREYXRlKCkpIHtcclxuICAgICAgICAgXHJcbiAgICAgICAgICAgICBjb25zdCBsZXR0ZXIgPSBtLmZyb21bMF0gIT09dW5kZWZpbmVkID8gbS5mcm9tWzBdOlwiXCJcclxuICAgICAgICAgICAgICBlbWFpbCA9IG0uZnJvbVxyXG4gICAgICAgICAgICAgIGxhc3REYXRldGltZSA9IG0uZGF0ZXRpbWVcclxuICAgICAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiByZW1vdGVTaWRlLCBvcmRlcjogXCJGXCIsIGRhdGVTcGFjZTogZmFsc2UsbGV0dGVyIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgICAgIGNvbnN0IGxldHRlciA9IG0uZnJvbVswXSAhPT11bmRlZmluZWQgPyBtLmZyb21bMF06XCJcIlxyXG4gICAgICAgICAgICAgIGVtYWlsID0gbS5mcm9tXHJcbiAgICAgICAgICAgICAgbGFzdERhdGV0aW1lID0gbS5kYXRldGltZVxyXG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IHJlbW90ZVNpZGUsIG9yZGVyOiBcIkZcIiwgZGF0ZVNwYWNlOiB0cnVlLGxldHRlciB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGxcclxuICB9KVxyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpPT57XHJcbiAgICBzZXRNYXBwZWRNZXNzYWdlcyhtYXBNZXNzYWdlcygpKVxyXG4gIH0sW21lc3NhZ2VzXSlcclxucmV0dXJuIHttYXBwZWRNZXNzYWdlc31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlTWVzc2FnZXNNYXBwZXJcclxuIiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5ICovXHJcbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2pzeC1wcm9wcy1uby1zcHJlYWRpbmcgKi9cclxuaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCBNZXNzYWdlT2JqZWN0TWFwcGVyIGZyb20gJy4vbWVzc2FnZS1vYmplY3QtbWFwcGVyJ1xyXG5cclxuY29uc3QgTWVzc2FnZUNvbGxlY3Rpb25WaWV3ID0gKHsgbWVzc2FnZXMgfSkgPT57XHJcblxyXG4gICAgaWYobWVzc2FnZXMubGVuZ3RoPjApe1xyXG4gICAgICAgXHJcbiAgICAgICAgcmV0dXJuICBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UsIGkpID0+IDxNZXNzYWdlT2JqZWN0TWFwcGVyIHsuLi5tZXNzYWdlfSBrZXk9e2l9IC8+KVxyXG4gICAgfVxyXG4gICAgIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VDb2xsZWN0aW9uVmlldyIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLWRlcHJlY2F0ZWQgKi9cclxuaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcblxyXG5jb25zdCBNZXNzYWdlVmlld1Njcm9sbGVyID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknLFxyXG4gICAgICAgIGhlaWdodDogJzg1JScsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2VlZWVlZScsXHJcbiAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICA8ZGl2IHN0eWxlPXt7IHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJyB9fT57Y2hpbGRyZW59PC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZVZpZXdTY3JvbGxlcjtcclxuIiwiXHJcbmltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5cclxuY29uc3QgTWVzc2FnZUVkaXRvckRpc3BsYXllciA9ICh7XHJcbiAgb25NZXNzYWdlQ2hhbmdlLCBtZXNzYWdlLCBzZW5kTWVzc2FnZSwgaWQgPSAwLCBkaXNhYmxlZCxcclxufSkgPT4gKFxyXG4gIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxyXG4gICAgPGlucHV0IHN0eWxlPXt7IGZsZXg6IDEgfX0gZGF0YS10ZXN0aWQ9e2BtZXNzYWdlJHtpZH1gfSBvbklucHV0PXtvbk1lc3NhZ2VDaGFuZ2V9IHZhbHVlPXttZXNzYWdlfSBuYW1lPVwibWVzc2FnZVwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbnRlciBtZXNzYWdlIHRleHRcIiAvPlxyXG4gICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcgfX0+XHJcbiAgICAgICAgICA8YnV0dG9uIGRhdGEtdGVzdGlkPXtgc2VuZE1lc3NhZ2Uke2lkfWB9IGRpc2FibGVkPXttZXNzYWdlID09PSAnJyB8fCBkaXNhYmxlZH0gc3R5bGU9e3sgbWFyZ2luTGVmdDogMiwgd2lkdGg6ICcxMDAlJyB9fSBvbkNsaWNrPXtzZW5kTWVzc2FnZX0+XHJcblxyXG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMi4wMSAyMUwyMyAxMiAyLjAxIDMgMiAxMGwxNSAyLTE1IDJ6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuKTtcclxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZUVkaXRvckRpc3BsYXllcjtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tc2hhZG93ICovXHJcbmltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB1c2VNZXNzYWdlU29ydGVyIGZyb20gXCIuL3VzZU1lc3NhZ2VTb3J0ZXJcIjtcclxuaW1wb3J0IHVzZU1lc3NhZ2VNYXBwZXIgZnJvbSBcIi4vdXNlTWVzc2FnZU1hcHBlclwiO1xyXG5pbXBvcnQgTWVzc2FnZUNvbGxlY3Rpb25WaWV3IGZyb20gXCIuL21lc3NhZ2UtY29sbGVjdGlvbi12aWV3XCI7XHJcbmltcG9ydCBNZXNzYWdlVmlld1Njcm9sbGVyIGZyb20gXCIuL21lc3NhZ2VzLXZpZXctc2Nyb2xsZXJcIjtcclxuaW1wb3J0IE1lc3NhZ2VFZGl0b3JEaXNwbGF5ZXIgZnJvbSBcIi4uLy4uL21lc3NhZ2UtZWRpdG9yLWRpc3BsYXllclwiO1xyXG5cclxuY29uc3QgTWVzc2FnZXNEaXNwbGF5ZXIgPSAoe1xyXG4gIG1lc3NhZ2VzLFxyXG4gIHNvY2tldCxcclxuICBpZCxcclxuICBtZXNzYWdlVGV4dCxcclxuICBzZW5kTWVzc2FnZSxcclxuICBoYW5kbGVNZXNzYWdlQ2hhbmdlXHJcbn0pID0+IHtcclxuICBjb25zdCB7IHNvcnRlZE1lc3NhZ2VzIH0gPSB1c2VNZXNzYWdlU29ydGVyKG1lc3NhZ2VzKTtcclxuICBjb25zdCB7IG1hcHBlZE1lc3NhZ2VzIH0gPSB1c2VNZXNzYWdlTWFwcGVyKHNvcnRlZE1lc3NhZ2VzKTtcclxuICByZXR1cm4gW1xyXG5cclxuICAgICAgPE1lc3NhZ2VWaWV3U2Nyb2xsZXI+XHJcbiAgICAgICAgPE1lc3NhZ2VDb2xsZWN0aW9uVmlldyBtZXNzYWdlcz17bWFwcGVkTWVzc2FnZXN9IC8+XHJcbiAgICAgIDwvTWVzc2FnZVZpZXdTY3JvbGxlcj4sXHJcbiAgICAgIDxNZXNzYWdlRWRpdG9yRGlzcGxheWVyXHJcbiAgICAgICAgZGlzYWJsZWQ9e3NvY2tldCA9PT0gbnVsbH1cclxuICAgICAgICBpZD17aWR9XHJcbiAgICAgICAgbWVzc2FnZT17bWVzc2FnZVRleHR9XHJcbiAgICAgICAgc2VuZE1lc3NhZ2U9e3NlbmRNZXNzYWdlfVxyXG4gICAgICAgIG9uTWVzc2FnZUNoYW5nZT17aGFuZGxlTWVzc2FnZUNoYW5nZX1cclxuICAgICAgLz5cclxuXHJcbiAgXTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VzRGlzcGxheWVyO1xyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTZXR0aW5ncyh7XHJcbiAgaGVpZ2h0ID0gMjQsXHJcbiAgd2lkdGggPSAyNCxcclxuICBmaWxsID0gJ25vbmUnLFxyXG4gIGNvbG9yID0gJ2JsYWNrJyxcclxufSkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8c3ZnIGhlaWdodD17aGVpZ2h0fSB2aWV3Qm94PScwIDAgMjQgMjQnIHdpZHRoPXt3aWR0aH0+XHJcbiAgICAgIDxwYXRoIGQ9J00wIDBoMjR2MjRIMFYweicgZmlsbD17ZmlsbH0gLz5cclxuICAgICAgPHBhdGhcclxuICAgICAgICBjb2xvcj17Y29sb3J9XHJcbiAgICAgICAgZD0nTTE5LjQzIDEyLjk4Yy4wNC0uMzIuMDctLjY0LjA3LS45OHMtLjAzLS42Ni0uMDctLjk4bDIuMTEtMS42NWMuMTktLjE1LjI0LS40Mi4xMi0uNjRsLTItMy40NmMtLjEyLS4yMi0uMzktLjMtLjYxLS4yMmwtMi40OSAxYy0uNTItLjQtMS4wOC0uNzMtMS42OS0uOThsLS4zOC0yLjY1QzE0LjQ2IDIuMTggMTQuMjUgMiAxNCAyaC00Yy0uMjUgMC0uNDYuMTgtLjQ5LjQybC0uMzggMi42NWMtLjYxLjI1LTEuMTcuNTktMS42OS45OGwtMi40OS0xYy0uMjMtLjA5LS40OSAwLS42MS4yMmwtMiAzLjQ2Yy0uMTMuMjItLjA3LjQ5LjEyLjY0bDIuMTEgMS42NWMtLjA0LjMyLS4wNy42NS0uMDcuOThzLjAzLjY2LjA3Ljk4bC0yLjExIDEuNjVjLS4xOS4xNS0uMjQuNDItLjEyLjY0bDIgMy40NmMuMTIuMjIuMzkuMy42MS4yMmwyLjQ5LTFjLjUyLjQgMS4wOC43MyAxLjY5Ljk4bC4zOCAyLjY1Yy4wMy4yNC4yNC40Mi40OS40Mmg0Yy4yNSAwIC40Ni0uMTguNDktLjQybC4zOC0yLjY1Yy42MS0uMjUgMS4xNy0uNTkgMS42OS0uOThsMi40OSAxYy4yMy4wOS40OSAwIC42MS0uMjJsMi0zLjQ2Yy4xMi0uMjIuMDctLjQ5LS4xMi0uNjRsLTIuMTEtMS42NXpNMTIgMTUuNWMtMS45MyAwLTMuNS0xLjU3LTMuNS0zLjVzMS41Ny0zLjUgMy41LTMuNSAzLjUgMS41NyAzLjUgMy41LTEuNTcgMy41LTMuNSAzLjV6J1xyXG4gICAgICAvPlxyXG4gICAgPC9zdmc+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0IE1lc3NhZ2VzRGlzcGFsZXIgZnJvbSAnLi9tZXNzYWdlcy1kaXNwbGF5ZXInO1xyXG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2xheW91dC9pY29ucy9TZXR0xLFuZ3MnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDaGF0KHsgY29udGFjdCwgb25TZXR0aW5nIH0pIHtcclxuICBjb25zdCB7IG1lc3NhZ2VzIH0gPSBjb250YWN0O1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzTmFtZT0nY2hhdC1zdGF0ZS12aWV3J1xyXG4gICAgICBzdHlsZT17eyBtYXJnaW46IDgsIGhlaWdodDogJzEwMCUnIH19XHJcbiAgICAgIGRhdGEtdGVzdGlkPSdjaGF0J1xyXG4gICAgPlxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxyXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICB9fVxyXG4gICAgICA+XHJcbiAgICAgICAgPGRpdiBzdHlsZT17eyBwYWRkaW5nUmlnaHQ6IDgsIHBhZGRpbmdUb3A6IDggfX0gb25DbGljaz17b25TZXR0aW5nfWRhdGEtdGVzdGlkPSdzZXR0aW5nJz5cclxuICAgICAgICAgIDxTZXR0aW5ncyAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGhyIHN0eWxlPXt7IHdpZHRoOiAnOTklJyB9fSAvPlxyXG4gICAgICA8TWVzc2FnZXNEaXNwYWxlciBtZXNzYWdlcz17bWVzc2FnZXN9IC8+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJEYXRlTGluZWJyZWFrIiwiZGF0ZXRpbWUiLCJkaXNwbGF5IiwiZmxleCIsImZvbnRTaXplIiwiY29sb3IiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiTWVzc2FnZUFsaWduZXIiLCJjaGlsZHJlbiIsInNpZGUiLCJzdHlsZSIsImFsaWdubWVudCIsImp1c3RpZnlDb250ZW50IiwiTWVzc2FnZVZpZXciLCJtZXNzYWdlIiwiYm9yZGVyUmFkaXVzIiwibWF4V2lkdGgiLCJ3b3JkV3JhcCIsIndvcmRCcmVhayIsIm1pbldpZHRoIiwiYmFja2dyb3VuZENvbG9yIiwicGFkZGluZyIsIm1hcmdpbiIsInBhZGRpbmdUb3AiLCJ0ZXh0QWxpZ24iLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJTdWJzZXF1ZW50TWVzc2FnZSIsImFsaWduSXRlbXMiLCJtYXJnaW5MZWZ0IiwiTWVzc2FnZSIsImhlaWdodCIsIndpZHRoIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiTWVzc2FnZUF2YXRhciIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiRmlyc3RNZXNzYWdlIiwibG9jYWwiLCJNZXNzYWdlT2JqZWN0TWFwcHRlciIsInByb3BzIiwib3JkZXIiLCJkYXRlU3BhY2UiLCJ1c2VNZXNzYWdlU29ydGVyIiwibWVzc2FnZXMiLCJzb3J0ZWRNZXNzYWdlcyIsInNldFNvcnRlZE1lc3NhZ2VzIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJzb3J0IiwiYSIsImIiLCJ1c2VNZXNzYWdlc01hcHBlciIsIm1hcHBlZE1lc3NhZ2VzIiwic2V0TWFwcGVkTWVzc2FnZXMiLCJtYXBNZXNzYWdlcyIsImxvY2FsU2lkZSIsInJlbW90ZVNpZGUiLCJsZW5ndGgiLCJlbWFpbCIsImZyb20iLCJsYXN0RGF0ZXRpbWUiLCJtYXAiLCJtIiwiaSIsInVuZGVmaW5lZCIsImdldERhdGUiLCJNZXNzYWdlQ29sbGVjdGlvblZpZXciLCJNZXNzYWdlT2JqZWN0TWFwcGVyIiwiTWVzc2FnZVZpZXdTY3JvbGxlciIsInRyYW5zZm9ybSIsIm92ZXJmbG93IiwiTWVzc2FnZUVkaXRvckRpc3BsYXllciIsIm9uTWVzc2FnZUNoYW5nZSIsInNlbmRNZXNzYWdlIiwiaWQiLCJkaXNhYmxlZCIsIk1lc3NhZ2VzRGlzcGxheWVyIiwic29ja2V0IiwibWVzc2FnZVRleHQiLCJoYW5kbGVNZXNzYWdlQ2hhbmdlIiwidXNlTWVzc2FnZU1hcHBlciIsIlNldHRpbmdzIiwiZmlsbCIsIkNoYXQiLCJjb250YWN0Iiwib25TZXR0aW5nIiwicGFkZGluZ1JpZ2h0IiwiTWVzc2FnZXNEaXNwYWxlciJdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFNQSxhQUFhLEdBQUcsQ0FBQztBQUFFQyxFQUFBQTtBQUFGLENBQUQsS0FBa0I7QUFDdEMsU0FDRTtBQUFLLElBQUEsS0FBSyxFQUFFO0FBQUVDLE1BQUFBLE9BQU8sRUFBRTtBQUFYO0FBQVosS0FDRTtBQUFLLElBQUEsS0FBSyxFQUFFO0FBQUVDLE1BQUFBLElBQUksRUFBRTtBQUFSO0FBQVosS0FDRSxhQURGLENBREYsRUFJRTtBQUFLLElBQUEsS0FBSyxFQUFFO0FBQUVDLE1BQUFBLFFBQVEsRUFBRSxFQUFaO0FBQWdCQyxNQUFBQSxLQUFLLEVBQUU7QUFBdkI7QUFBWixLQUNHLElB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
