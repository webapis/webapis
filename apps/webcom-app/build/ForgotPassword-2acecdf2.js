import { a as useAppRoute, b as useMediaQuery, c as useAuthContext, d as useFormContext, p, h, v as validationTypes, e as valueChanged } from './index-58f1b195.js';
import { P as Paper, F as Form, I as Input, G as Grid } from './Grid-2301840b.js';
import { B as Button } from './Button-27a43db7.js';
import './style-632926cc.js';

function RequestPassChange({
  forgotPassword
}) {
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    email
  } = state;

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  p(() => {
    if (state.authFeedback) {
      debugger;
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);
  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Forgot Password"
  }, h(Input, {
    value: email,
    placeholder: "email",
    name: "email",
    onChange: handleChange,
    type: "email",
    id: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.EMAIL_NOT_REGISTERED]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: forgotPassword,
    id: "requestpasschange-btn",
    title: "Send"
  }))));
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtMmFjZWNkZjIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQge3VzZUFwcFJvdXRlfSBmcm9tICcuLi9hcHAtcm91dGUvQXBwUm91dGVQcm92aWRlcidcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVxdWVzdFBhc3NDaGFuZ2Uoe2ZvcmdvdFBhc3N3b3JkfSkge1xyXG4gIGNvbnN0IHtvbkFwcFJvdXRlfT0gdXNlQXBwUm91dGUoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIGNvbnN0IHsgZGlzcGF0Y2gsIHN0YXRlIH0gPSB1c2VBdXRoQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGlzcGF0Y2g6IGZvcm1EaXNwYXRjaCB9ID0gdXNlRm9ybUNvbnRleHQoKTtcclxuICBjb25zdCB7IGVtYWlsIH0gPSBzdGF0ZTtcclxuXHJcbiBcclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBkaXNwYXRjaChhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7IHByb3BOYW1lOiBuYW1lLCB2YWx1ZSwgZGlzcGF0Y2gsIHN0YXRlIH0pKTtcclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoc3RhdGUuYXV0aEZlZWRiYWNrKSB7XHJcbiAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICBvbkFwcFJvdXRlKHtmZWF0dXJlUm91dGU6ICcvYXV0aGZlZWRiYWNrJyxyb3V0ZTonL2F1dGgnfSk7XHJcbiAgICB9XHJcbiAgfSwgW3N0YXRlLmF1dGhGZWVkYmFja10pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEdyaWQgd2lkdGg9e2RldmljZSA9PT0gJ3Bob25lJyA/IDEwMCA6IDI1fT5cclxuICAgICAgPFBhcGVyPlxyXG4gICAgICAgIDxGb3JtIGZvcm1UaXRsZT0nRm9yZ290IFBhc3N3b3JkJz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcclxuICAgICAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHR5cGU9J2VtYWlsJ1xyXG4gICAgICAgICAgICBpZD0nZW1haWwnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfTk9UX1JFR0lTVEVSRUQsXHJcbiAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2J0bidcclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtmb3Jnb3RQYXNzd29yZH1cclxuICAgICAgICAgICAgaWQ9J3JlcXVlc3RwYXNzY2hhbmdlLWJ0bidcclxuICAgICAgICAgICAgdGl0bGU9J1NlbmQnXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvRm9ybT5cclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvR3JpZD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJSZXF1ZXN0UGFzc0NoYW5nZSIsImZvcmdvdFBhc3N3b3JkIiwib25BcHBSb3V0ZSIsInVzZUFwcFJvdXRlIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsImRpc3BhdGNoIiwic3RhdGUiLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwiZW1haWwiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwiYWN0aW9ucyIsInByb3BOYW1lIiwidXNlRWZmZWN0IiwiYXV0aEZlZWRiYWNrIiwiZmVhdHVyZVJvdXRlIiwicm91dGUiLCJ2YWxpZGF0aW9uVHlwZXMiLCJFTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIkVNQUlMX05PVF9SRUdJU1RFUkVEIl0sIm1hcHBpbmdzIjoiOzs7OztBQWNlLFNBQVNBLGlCQUFULENBQTJCO0FBQUNDLEVBQUFBO0FBQUQsQ0FBM0IsRUFBNkM7QUFDMUQsUUFBTTtBQUFDQyxJQUFBQTtBQUFELE1BQWNDLFdBQVcsRUFBL0I7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQTtBQUFaLE1BQXNCQyxjQUFjLEVBQTFDO0FBQ0EsUUFBTTtBQUFFRixJQUFBQSxRQUFRLEVBQUVHO0FBQVosTUFBNkJDLGNBQWMsRUFBakQ7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBWUosS0FBbEI7O0FBR0EsV0FBU0ssWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQVYsSUFBQUEsUUFBUSxDQUFDVyxZQUFBLENBQXFCO0FBQUVDLE1BQUFBLFFBQVEsRUFBRUosSUFBWjtBQUFrQkMsTUFBQUEsS0FBbEI7QUFBeUJULE1BQUFBLFFBQXpCO0FBQW1DQyxNQUFBQTtBQUFuQyxLQUFyQixDQUFELENBQVI7QUFDRDs7QUFFRFksRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJWixLQUFLLENBQUNhLFlBQVYsRUFBd0I7QUFDdEI7QUFDQWxCLE1BQUFBLFVBQVUsQ0FBQztBQUFDbUIsUUFBQUEsWUFBWSxFQUFFLGVBQWY7QUFBK0JDLFFBQUFBLEtBQUssRUFBQztBQUFyQyxPQUFELENBQVY7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDZixLQUFLLENBQUNhLFlBQVAsQ0FMTSxDQUFUO0FBT0EsU0FDRSxFQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRWhCLE1BQU0sS0FBSyxPQUFYLEdBQXFCLEdBQXJCLEdBQTJCO0FBQXhDLEtBQ0UsRUFBQyxLQUFELFFBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRU8sS0FEVDtBQUVFLElBQUEsV0FBVyxFQUFDLE9BRmQ7QUFHRSxJQUFBLElBQUksRUFBQyxPQUhQO0FBSUUsSUFBQSxRQUFRLEVBQUVDLFlBSlo7QUFLRSxJQUFBLElBQUksRUFBQyxPQUxQO0FBTUUsSUFBQSxFQUFFLEVBQUMsT0FOTDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZXLGVBQWUsQ0FBQ0MsdUJBREQsRUFFZkQsZUFBZSxDQUFDRSxvQkFGRDtBQVBuQixJQURGLEVBYUUsRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRXhCLGNBSFg7QUFJRSxJQUFBLEVBQUUsRUFBQyx1QkFKTDtBQUtFLElBQUEsS0FBSyxFQUFDO0FBTFIsSUFiRixDQURGLENBREYsQ0FERjtBQTJCRDs7OzsifQ==
