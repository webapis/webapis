import { M, u as useContactsContext, m, p, s, h, _ as _extends, T, a as useMediaQuery, U, R as RouteProvider, L } from './index-5ddb3fa4.js';

const P2PDesktopContext = M();
const actionTypes = {
  ADD_INVITATION: 'ADD_INVITATION',
  REMOVE_INVITATION: 'REMOVE_INVITATION',
  ADD_CHAT: 'ADD_CHAT',
  REMOVE_CHAT: 'REMOVE_CHAT'
};

function useP2PDesktopContext() {
  const context = T(P2PDesktopContext);

  if (!context) {
    throw new Error('useP2PDesktopContext must be used with P2PDesktopProvider');
  }

  return context;
}

function reducer(state, action) {
  switch (action.type) {
    case actionTypes.ADD_CHAT:
      debugger;
      return { ...state,
        chats: [...state.chats, action.contact]
      };

    case actionTypes.REMOVE_CHAT:
      return { ...state,
        chats: state.chats.filter(chat => chat.room !== action.room)
      };

    case actionTypes.ADD_INVITATION:
      debugger;
      return { ...state,
        invitations: [...state.invitations, action.contact]
      };

    case actionTypes.REMOVE_INVITATION:
      return { ...state,
        invitations: state.filter(inv => inv.username !== action.username)
      };

    default:
      return state;
  }
}

function P2PDesktopProvider(props) {
  const context = useContactsContext();
  const [state, dispatch] = m(reducer, {
    invitations: [],
    chats: []
  });
  const {
    contact
  } = context[0];
  const {
    chats,
    invitations
  } = state;
  p(() => {
    if (contact) {
      if (contact.room) {
        if (chats.length === 0) {
          debugger;
          dispatch({
            type: actionTypes.ADD_CHAT,
            contact
          });
        } else if (chats.length > 0 && !chats.find(chat => chat.room === contact.room)) {
          dispatch({
            type: actionTypes.ADD_CHAT,
            contact
          });
        }
      } else {
        if (invitations.length === 0) {
          debugger;
          dispatch({
            type: actionTypes.ADD_INVITATION,
            contact
          });
        } else if (invitations.length > 0 && !invitations.find(inv => inv.username === contact.username)) {
          dispatch({
            type: actionTypes.ADD_INVITATION,
            contact
          });
        }
      }
    }
  }, [contact]);
  const value = s(() => [state, dispatch], [state]);
  return h(P2PDesktopContext.Provider, _extends({
    value: value
  }, props));
}

const PeerToPeerDesktop = L(() => import('./p2p-desktop-49f8e6d2.js'));
const PeerToPeerMobile = L(() => import('./p2p-mobile-a01ae016.js'));
function PeerToPeer() {
  const {
    width
  } = useMediaQuery();

  if (width > 0 && width < 800) {
    return h(RouteProvider, {
      initialRoute: "/contacts"
    }, h(U, {
      fallback: h("div", null, "Loading...")
    }, h(PeerToPeerMobile, null)));
  }

  if (width > 800) {
    return h(U, {
      fallback: h("div", null, "Loading...")
    }, h(P2PDesktopProvider, null, h(PeerToPeerDesktop, null)));
  }
}

export { PeerToPeer as P, useP2PDesktopContext as u };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
