import { a as useAppRoute, b as useMediaQuery, c as useAuthContext, d as useFormContext, l, h, v as validationTypes, q as forgotPassword, e as valueChanged } from './index-d2040346.js';
import { P as Paper, F as Form, I as Input, B as Button, G as Grid } from './Grid-a4cd8f52.js';
import './style-c00e4a9d.js';

function RequestPassChange() {
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    email
  } = state;

  function handleForgotPassword() {
    dispatch(forgotPassword({
      dispatch,
      state,
      formDispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  l(() => {
    if (state.authFeedback) {
      debugger;
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);
  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Forgot Password"
  }, h(Input, {
    value: email,
    placeholder: "email",
    name: "email",
    onChange: handleChange,
    type: "email",
    id: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.EMAIL_NOT_REGISTERED]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleForgotPassword,
    id: "requestpasschange-btn",
    title: "Send"
  }))));
}

export default RequestPassChange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZ290UGFzc3dvcmQtYmJmM2MyZWIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0ZvcmdvdFBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0ICcuL2Nzcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQge3VzZUFwcFJvdXRlfSBmcm9tICcuLi9hcHAtcm91dGUvQXBwUm91dGVQcm92aWRlcidcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVxdWVzdFBhc3NDaGFuZ2UoKSB7XHJcbiAgY29uc3Qge29uQXBwUm91dGV9PSB1c2VBcHBSb3V0ZSgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZW1haWwgfSA9IHN0YXRlO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVGb3Jnb3RQYXNzd29yZCgpIHtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMuZm9yZ290UGFzc3dvcmQoeyBkaXNwYXRjaCwgc3RhdGUsIGZvcm1EaXNwYXRjaCB9KSk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMudmFsdWVDaGFuZ2VkKHsgcHJvcE5hbWU6IG5hbWUsIHZhbHVlLCBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChzdGF0ZS5hdXRoRmVlZGJhY2spIHtcclxuICAgICAgZGVidWdnZXI7XHJcbiAgICAgIG9uQXBwUm91dGUoe2ZlYXR1cmVSb3V0ZTogJy9hdXRoZmVlZGJhY2snLHJvdXRlOicvYXV0aCd9KTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUuYXV0aEZlZWRiYWNrXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPEZvcm0gZm9ybVRpdGxlPSdGb3Jnb3QgUGFzc3dvcmQnPlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J2VtYWlsJ1xyXG4gICAgICAgICAgICBuYW1lPSdlbWFpbCdcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUZvcmdvdFBhc3N3b3JkfVxyXG4gICAgICAgICAgICBpZD0ncmVxdWVzdHBhc3NjaGFuZ2UtYnRuJ1xyXG4gICAgICAgICAgICB0aXRsZT0nU2VuZCdcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Gb3JtPlxyXG4gICAgICA8L1BhcGVyPlxyXG4gICAgPC9HcmlkPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlJlcXVlc3RQYXNzQ2hhbmdlIiwib25BcHBSb3V0ZSIsInVzZUFwcFJvdXRlIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsImRpc3BhdGNoIiwic3RhdGUiLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwiZW1haWwiLCJoYW5kbGVGb3Jnb3RQYXNzd29yZCIsImFjdGlvbnMiLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJ1c2VFZmZlY3QiLCJhdXRoRmVlZGJhY2siLCJmZWF0dXJlUm91dGUiLCJyb3V0ZSIsInZhbGlkYXRpb25UeXBlcyIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiRU1BSUxfTk9UX1JFR0lTVEVSRUQiXSwibWFwcGluZ3MiOiI7Ozs7QUFjZSxTQUFTQSxpQkFBVCxHQUE2QjtBQUMxQyxRQUFNO0FBQUNDLElBQUFBO0FBQUQsTUFBY0MsV0FBVyxFQUEvQjtBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBO0FBQVosTUFBc0JDLGNBQWMsRUFBMUM7QUFDQSxRQUFNO0FBQUVGLElBQUFBLFFBQVEsRUFBRUc7QUFBWixNQUE2QkMsY0FBYyxFQUFqRDtBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFZSixLQUFsQjs7QUFFQSxXQUFTSyxvQkFBVCxHQUFnQztBQUM5Qk4sSUFBQUEsUUFBUSxDQUFDTyxjQUFBLENBQXVCO0FBQUVQLE1BQUFBLFFBQUY7QUFBWUMsTUFBQUEsS0FBWjtBQUFtQkUsTUFBQUE7QUFBbkIsS0FBdkIsQ0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsV0FBU0ssWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQVosSUFBQUEsUUFBUSxDQUFDTyxZQUFBLENBQXFCO0FBQUVNLE1BQUFBLFFBQVEsRUFBRUgsSUFBWjtBQUFrQkMsTUFBQUEsS0FBbEI7QUFBeUJYLE1BQUFBLFFBQXpCO0FBQW1DQyxNQUFBQTtBQUFuQyxLQUFyQixDQUFELENBQVI7QUFDRDs7QUFFRGEsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJYixLQUFLLENBQUNjLFlBQVYsRUFBd0I7QUFDdEI7QUFDQW5CLE1BQUFBLFVBQVUsQ0FBQztBQUFDb0IsUUFBQUEsWUFBWSxFQUFFLGVBQWY7QUFBK0JDLFFBQUFBLEtBQUssRUFBQztBQUFyQyxPQUFELENBQVY7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDaEIsS0FBSyxDQUFDYyxZQUFQLENBTE0sQ0FBVDtBQU9BLFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVqQixNQUFNLEtBQUssT0FBWCxHQUFxQixHQUFyQixHQUEyQjtBQUF4QyxLQUNFLEVBQUMsS0FBRCxRQUNFLEVBQUMsSUFBRDtBQUFNLElBQUEsU0FBUyxFQUFDO0FBQWhCLEtBQ0UsRUFBQyxLQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUVPLEtBRFQ7QUFFRSxJQUFBLFdBQVcsRUFBQyxPQUZkO0FBR0UsSUFBQSxJQUFJLEVBQUMsT0FIUDtBQUlFLElBQUEsUUFBUSxFQUFFRyxZQUpaO0FBS0UsSUFBQSxJQUFJLEVBQUMsT0FMUDtBQU1FLElBQUEsRUFBRSxFQUFDLE9BTkw7QUFPRSxJQUFBLGVBQWUsRUFBRSxDQUNmVSxlQUFlLENBQUNDLHVCQURELEVBRWZELGVBQWUsQ0FBQ0Usb0JBRkQ7QUFQbkIsSUFERixFQWFFLEVBQUMsTUFBRDtBQUNFLElBQUEsU0FBUyxFQUFDLEtBRFo7QUFFRSxJQUFBLElBQUksRUFBQyxRQUZQO0FBR0UsSUFBQSxPQUFPLEVBQUVkLG9CQUhYO0FBSUUsSUFBQSxFQUFFLEVBQUMsdUJBSkw7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBYkYsQ0FERixDQURGLENBREY7QUEyQkQ7Ozs7In0=
