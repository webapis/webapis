import { s as styleInject, j as v, b as useMediaQuery, p, h } from './index-efca8ae3.js';

var css_248z = ".message-font-phone-size {\r\n  font-size: 13px;\r\n}\r\n\r\n.message-font-tablet-size {\r\n  font-size: 15px;\r\n}\r\n\r\n.font-font-laptop-size {\r\n  font-size: 20px;\r\n}\r\n\r\n.message-font-desktop-size {\r\n  font-size: 30px;\r\n}";
styleInject(css_248z);

const style = {
  root: {
    borderColor: '#eeeeee',
    borderStyle: 'solid',
    borderWidth: 1,
    borderRadius: 5,
    padding: 3,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    minHeight: 35,
    backgroundColor: 'white'
  },
  username: {
    marginRight: 8
  },
  log: {
    display: 'flex',
    color: '#737373',
    fontSize: 10
  },
  message: {}
}; //

function Message(props) {
  const {
    message
  } = props;
  const {
    float,
    username
  } = message;
  const [days, setDays] = v(0);
  const [hours, setHours] = v(0);
  const [minutes, setMinutes] = v(0);
  const [seconds, setSeconds] = v(0);
  const {
    device
  } = useMediaQuery();

  function convertMS(ms) {
    var d, h, m, s;
    s = Math.floor(ms / 1000);
    m = Math.floor(s / 60);
    s = s % 60;
    h = Math.floor(m / 60);
    m = m % 60;
    d = Math.floor(h / 24);
    h = h % 24;
    setDays(d);
    setHours(h);
    setMinutes(m);
    setSeconds(s);
  }

  p(() => {
    setTimeout(() => {
      convertMS(Date.now() - message.timestamp);
    }, 0);
    setInterval(() => {
      convertMS(Date.now() - message.timestamp);
    }, 60000);
  }, []);
  return h("div", {
    style: {
      width: '100%',
      marginBottom: 3
    }
  }, h("div", {
    style: { ...style.root,
      float
    }
  }, h("div", {
    "data-testid": "message",
    style: style.message,
    className: `message-font-${device}-size`
  }, message && message.text), h("div", {
    style: style.log
  }, h("div", {
    style: style.username
  }, username && username, ":"), h("div", null, minutes === 0 && h("div", null, "Now"), hours === 0 && minutes > 0 && h("div", null, minutes, " minutes ago "), hours > 0 && days === 0 && h("div", null, hours, " hours ", minutes, " minutes ago", ' '), days <= 10 && days > 1 && h("div", null, days, " days ago"), days > 10 && new Date(message.timestamp)))));
}

export { Message as M };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZS1kYjFjODZkOC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL21lc3NhZ2UtdWkvTWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi8uLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuY29uc3Qgc3R5bGUgPSB7XHJcbiAgcm9vdDoge1xyXG4gICAgYm9yZGVyQ29sb3I6ICcjZWVlZWVlJyxcclxuICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxyXG4gICAgYm9yZGVyV2lkdGg6IDEsXHJcbiAgICBib3JkZXJSYWRpdXM6IDUsXHJcbiAgICBwYWRkaW5nOiAzLFxyXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxyXG4gICAgbWluSGVpZ2h0OiAzNSxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcclxuICB9LFxyXG4gIHVzZXJuYW1lOiB7IG1hcmdpblJpZ2h0OiA4IH0sXHJcbiAgbG9nOiB7XHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICBjb2xvcjogJyM3MzczNzMnLFxyXG4gICAgZm9udFNpemU6IDEwLFxyXG4gIH0sXHJcbiAgbWVzc2FnZToge30sXHJcbn07XHJcbi8vXHJcbmV4cG9ydCBmdW5jdGlvbiBNZXNzYWdlKHByb3BzKSB7XHJcbiAgY29uc3QgeyBtZXNzYWdlIH0gPSBwcm9wcztcclxuICBjb25zdCB7IGZsb2F0LCB1c2VybmFtZSB9ID0gbWVzc2FnZTtcclxuICBjb25zdCBbZGF5cywgc2V0RGF5c10gPSB1c2VTdGF0ZSgwKTtcclxuICBjb25zdCBbaG91cnMsIHNldEhvdXJzXSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFttaW51dGVzLCBzZXRNaW51dGVzXSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFtzZWNvbmRzLCBzZXRTZWNvbmRzXSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgZnVuY3Rpb24gY29udmVydE1TKG1zKSB7XHJcbiAgICB2YXIgZCwgaCwgbSwgcztcclxuICAgIHMgPSBNYXRoLmZsb29yKG1zIC8gMTAwMCk7XHJcbiAgICBtID0gTWF0aC5mbG9vcihzIC8gNjApO1xyXG4gICAgcyA9IHMgJSA2MDtcclxuICAgIGggPSBNYXRoLmZsb29yKG0gLyA2MCk7XHJcbiAgICBtID0gbSAlIDYwO1xyXG4gICAgZCA9IE1hdGguZmxvb3IoaCAvIDI0KTtcclxuICAgIGggPSBoICUgMjQ7XHJcbiAgICBzZXREYXlzKGQpO1xyXG4gICAgc2V0SG91cnMoaCk7XHJcbiAgICBzZXRNaW51dGVzKG0pO1xyXG4gICAgc2V0U2Vjb25kcyhzKTtcclxuICB9XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb252ZXJ0TVMoRGF0ZS5ub3coKSAtIG1lc3NhZ2UudGltZXN0YW1wKTtcclxuICAgIH0sIDApO1xyXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICBjb252ZXJ0TVMoRGF0ZS5ub3coKSAtIG1lc3NhZ2UudGltZXN0YW1wKTtcclxuICAgIH0sIDYwMDAwKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIG1hcmdpbkJvdHRvbTogMyB9fT5cclxuICAgICAgPGRpdiBzdHlsZT17eyAuLi5zdHlsZS5yb290LCBmbG9hdCB9fT5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cIm1lc3NhZ2VcIlxyXG4gICAgICAgICAgc3R5bGU9e3N0eWxlLm1lc3NhZ2V9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2BtZXNzYWdlLWZvbnQtJHtkZXZpY2V9LXNpemVgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHttZXNzYWdlICYmIG1lc3NhZ2UudGV4dH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZS5sb2d9PlxyXG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGUudXNlcm5hbWV9Pnt1c2VybmFtZSAmJiB1c2VybmFtZX06PC9kaXY+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICB7bWludXRlcyA9PT0gMCAmJiA8ZGl2Pk5vdzwvZGl2Pn1cclxuICAgICAgICAgICAge2hvdXJzID09PSAwICYmIG1pbnV0ZXMgPiAwICYmIDxkaXY+e21pbnV0ZXN9IG1pbnV0ZXMgYWdvIDwvZGl2Pn1cclxuICAgICAgICAgICAge2hvdXJzID4gMCAmJiBkYXlzID09PSAwICYmIChcclxuICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAge2hvdXJzfSBob3VycyB7bWludXRlc30gbWludXRlcyBhZ297JyAnfVxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgICAgICB7ZGF5cyA8PSAxMCAmJiBkYXlzID4gMSAmJiA8ZGl2PntkYXlzfSBkYXlzIGFnbzwvZGl2Pn1cclxuICAgICAgICAgICAge2RheXMgPiAxMCAmJiBuZXcgRGF0ZShtZXNzYWdlLnRpbWVzdGFtcCl9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJzdHlsZSIsInJvb3QiLCJib3JkZXJDb2xvciIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJqdXN0aWZ5Q29udGVudCIsIm1pbkhlaWdodCIsImJhY2tncm91bmRDb2xvciIsInVzZXJuYW1lIiwibWFyZ2luUmlnaHQiLCJsb2ciLCJjb2xvciIsImZvbnRTaXplIiwibWVzc2FnZSIsIk1lc3NhZ2UiLCJwcm9wcyIsImZsb2F0IiwiZGF5cyIsInNldERheXMiLCJ1c2VTdGF0ZSIsImhvdXJzIiwic2V0SG91cnMiLCJtaW51dGVzIiwic2V0TWludXRlcyIsInNlY29uZHMiLCJzZXRTZWNvbmRzIiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsImNvbnZlcnRNUyIsIm1zIiwiZCIsImgiLCJtIiwicyIsIk1hdGgiLCJmbG9vciIsInVzZUVmZmVjdCIsInNldFRpbWVvdXQiLCJEYXRlIiwibm93IiwidGltZXN0YW1wIiwic2V0SW50ZXJ2YWwiLCJ3aWR0aCIsIm1hcmdpbkJvdHRvbSIsInRleHQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsTUFBTUEsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxXQUFXLEVBQUUsU0FEVDtBQUVKQyxJQUFBQSxXQUFXLEVBQUUsT0FGVDtBQUdKQyxJQUFBQSxXQUFXLEVBQUUsQ0FIVDtBQUlKQyxJQUFBQSxZQUFZLEVBQUUsQ0FKVjtBQUtKQyxJQUFBQSxPQUFPLEVBQUUsQ0FMTDtBQU1KQyxJQUFBQSxPQUFPLEVBQUUsTUFOTDtBQU9KQyxJQUFBQSxhQUFhLEVBQUUsUUFQWDtBQVFKQyxJQUFBQSxjQUFjLEVBQUUsZUFSWjtBQVNKQyxJQUFBQSxTQUFTLEVBQUUsRUFUUDtBQVVKQyxJQUFBQSxlQUFlLEVBQUU7QUFWYixHQURNO0FBYVpDLEVBQUFBLFFBQVEsRUFBRTtBQUFFQyxJQUFBQSxXQUFXLEVBQUU7QUFBZixHQWJFO0FBY1pDLEVBQUFBLEdBQUcsRUFBRTtBQUNIUCxJQUFBQSxPQUFPLEVBQUUsTUFETjtBQUVIUSxJQUFBQSxLQUFLLEVBQUUs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
