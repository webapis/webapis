import { u as useRouteContext, a as useMediaQuery, b as useAppContext, p, h, v as validationTypes, c as valueChanged, l as login } from './index-bb26dde7.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-5cecc622.js';

function Login() {
  const [route, setRoute] = useRouteContext();
  const {
    device
  } = useMediaQuery();
  const {
    auth,
    form
  } = useAppContext();
  const {
    emailorusername,
    password,
    error
  } = auth.state;
  p(() => {
    if (auth.state.token) {
      setRoute('/');
    }
  }, [auth.state.token]);

  function handleRoute(e) {
    e.preventDefault();
    const {
      id
    } = e.target;
    setRoute(`/${id}`);
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  function handleLogin() {
    auth.dispatch(login({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Login",
    error: error
  }, h(Input, {
    value: emailorusername,
    onChange: handleChange,
    name: "emailorusername",
    type: "text",
    placeholder: "Enter email or username",
    id: "emailOrUsername",
    "data-testid": "emailOrUsername",
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS, validationTypes.EMAIL_NOT_REGISTERED, validationTypes.USERNAME_NOT_REGISTERED]
  }), h(Input, {
    value: password,
    onChange: handleChange,
    name: "password",
    type: "password",
    placeholder: "enter password",
    id: "password",
    "data-testid": "password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Button, {
    type: "button",
    id: "login-btn",
    "data-testid": "login-btn",
    onClick: handleLogin,
    title: "LOGIN"
  }), h("a", {
    href: "/",
    onClick: handleRoute,
    id: "forgotpassword",
    "data-testid": "forgotpassword"
  }, "Forgot Password!"))));
}

export default Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW4tYjMwYmE5MTguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0xvZ2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vZm9ybS9JbnB1dCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vZm9ybS9CdXR0b24nO1xyXG5pbXBvcnQgRm9ybSBmcm9tICcuLi9mb3JtL0Zvcm0nO1xyXG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcclxuaW1wb3J0IHsgdXNlQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgdXNlUm91dGVDb250ZXh0IH0gZnJvbSAnLi4vcm91dGUvcm91dGVyJztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dpbigpIHtcclxuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVJvdXRlQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyBhdXRoLCBmb3JtIH0gPSB1c2VBcHBDb250ZXh0KCk7XHJcblxyXG4gIGNvbnN0IHsgZW1haWxvcnVzZXJuYW1lLCBwYXNzd29yZCwgZXJyb3IgfSA9IGF1dGguc3RhdGU7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoYXV0aC5zdGF0ZS50b2tlbikge1xyXG4gICAgICBzZXRSb3V0ZSgnLycpO1xyXG4gICAgfVxyXG4gIH0sIFthdXRoLnN0YXRlLnRva2VuXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVJvdXRlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHsgaWQgfSA9IGUudGFyZ2V0O1xyXG4gICAgc2V0Um91dGUoYC8ke2lkfWApO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgYXV0aC5kaXNwYXRjaChcclxuICAgICAgYWN0aW9ucy52YWx1ZUNoYW5nZWQoe1xyXG4gICAgICAgIHByb3BOYW1lOiBuYW1lLFxyXG4gICAgICAgIHZhbHVlLFxyXG4gICAgICAgIGRpc3BhdGNoOiBhdXRoLmRpc3BhdGNoLFxyXG4gICAgICAgIHN0YXRlOiBhdXRoLnN0YXRlLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gaGFuZGxlTG9naW4oKSB7XHJcbiAgICBhdXRoLmRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLmxvZ2luKHtcclxuICAgICAgICBkaXNwYXRjaDogYXV0aC5kaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcclxuICAgICAgICBmb3JtRGlzcGF0Y2g6IGZvcm0uZGlzcGF0Y2gsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J0xvZ2luJyBlcnJvcj17ZXJyb3J9PlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbG9ydXNlcm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIG5hbWU9J2VtYWlsb3J1c2VybmFtZSdcclxuICAgICAgICAgICAgdHlwZT0ndGV4dCdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0VudGVyIGVtYWlsIG9yIHVzZXJuYW1lJ1xyXG4gICAgICAgICAgICBpZD0nZW1haWxPclVzZXJuYW1lJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nZW1haWxPclVzZXJuYW1lJ1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfT1JfRU1BSUxfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX05PVF9SRUdJU1RFUkVELFxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9OT1RfUkVHSVNURVJFRCxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0nZW50ZXIgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLklOVkFMSURfQ1JFREVOVElBTFMsXHJcbiAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBpZD0nbG9naW4tYnRuJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nbG9naW4tYnRuJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVMb2dpbn1cclxuICAgICAgICAgICAgdGl0bGU9J0xPR0lOJ1xyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxhIGhyZWY9Jy8nIG9uQ2xpY2s9e2hhbmRsZVJvdXRlfSBpZD0nZm9yZ290cGFzc3dvcmQnIGRhdGEtdGVzdGlkPSdmb3Jnb3RwYXNzd29yZCc+XHJcbiAgICAgICAgICAgIEZvcmdvdCBQYXNzd29yZCFcclxuICAgICAgICAgIDwvYT5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiTG9naW4iLCJyb3V0ZSIsInNldFJvdXRlIiwidXNlUm91dGVDb250ZXh0IiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsImF1dGgiLCJmb3JtIiwidXNlQXBwQ29udGV4dCIsImVtYWlsb3J1c2VybmFtZSIsInBhc3N3b3JkIiwiZXJyb3IiLCJzdGF0ZSIsInVzZUVmZmVjdCIsInRva2VuIiwiaGFuZGxlUm91dGUiLCJlIiwicHJldmVudERlZmF1bHQiLCJpZCIsInRhcmdldCIsImhhbmRsZUNoYW5nZSIsIm5hbWUiLCJ2YWx1ZSIsImRpc3BhdGNoIiwiYWN0aW9ucyIsInByb3BOYW1lIiwiaGFuZGxlTG9naW4iLCJmb3JtRGlzcGF0Y2giLCJ2YWxpZGF0aW9uVHlwZXMiLCJVU0VSTkFNRV9PUl9FTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIklOVkFMSURfQ1JFREVOVElBTFMiLCJFTUFJTF9OT1RfUkVHSVNURVJFRCIsIlVTRVJOQU1FX05PVF9SRUdJU1RFUkVEIiwiRU1QVFlfU1RSSU5HX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7OztBQWFlLFNBQVNBLEtBQVQsR0FBaUI7QUFDOUIsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLGVBQWUsRUFBekM7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBYUMsYUFBYSxFQUFoQztBQUNBLFFBQU07QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQTtBQUFSLE1BQWlCQyxhQUFhLEVBQXBDO0FBRUEsUUFBTTtBQUFFQyxJQUFBQSxlQUFGO0FBQW1CQyxJQUFBQSxRQUFuQjtBQUE2QkMsSUFBQUE7QUFBN0IsTUFBdUNMLElBQUksQ0FBQ00sS0FBbEQ7QUFFQUMsRUFBQUEsQ0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJUCxJQUFJLENBQUNNLEtBQUwsQ0FBV0UsS0FBZixFQUFzQjtBQUNwQlosTUFBQUEsUUFBUSxDQUFDLEdBQUQsQ0FBUjtBQUNEO0FBQ0YsR0FKUSxFQUlOLENBQUNJLElBQUksQ0FBQ00sS0FBTCxDQUFXRSxLQUFaLENBSk0sQ0FBVDs7QUFNQSxXQUFTQyxXQUFULENBQXFCQyxDQUFyQixFQUF3QjtBQUN0QkEsSUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0EsVUFBTTtBQUFFQyxNQUFBQTtBQUFGLFFBQVNGLENBQUMsQ0FBQ0csTUFBakI7QUFDQWpCLElBQUFBLFFBQVEsQ0FBRSxJQUFHZ0IsRUFBRyxFQUFSLENBQVI7QUFDRDs7QUFFRCxXQUFTRSxZQUFULENBQXNCSixDQUF0QixFQUF5QjtBQUN2QixVQUFNO0FBQUVLLE1BQUFBLElBQUY7QUFBUUMsTUFBQUE7QUFBUixRQUFrQk4sQ0FBQyxDQUFDRyxNQUExQjtBQUNBYixJQUFBQSxJQUFJLENBQUNpQixRQUFMLENBQ0VDLFlBQUEsQ0FBcUI7QUFDbkJDLE1BQUFBLFFBQVEsRUFBRUosSUFEUztBQUVuQkMsTUFBQUEsS0FGbUI7QUFHbkJDLE1BQUFBLFFBQVEsRUFBRWpCLElBQUksQ0FBQ2lCLFFBSEk7QUFJbkJYLE1BQUFBLEtBQUssRUFBRU4sSUFBSSxDQUFDTTtBQUpPLEtBQXJCLENBREY7QUFRRDs7QUFDRCxXQUFTYyxXQUFULEdBQXVCO0FBQ3JCcEIsSUFBQUEsSUFBSSxDQUFDaUIsUUFBTCxDQUNFQyxLQUFBLENBQWM7QUFDWkQsTUFBQUEsUUFBUSxFQUFFakIsSUFBSSxDQUFDaUIsUUFESDtBQUVaWCxNQUFBQSxLQUFLLEVBQUVOLElBQUksQ0FBQ00sS0FGQTtBQUdaZSxNQUFBQSxZQUFZLEVBQUVwQixJQUFJLENBQUNnQjtBQUhQLEtBQWQsQ0FERjtBQU9EOztBQUVELFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVuQixNQUFNLEtBQUssT0FBWCxHQUFxQixHQUFyQixHQUEyQjtBQUF4QyxLQUNFLEVBQUMsS0FBRCxRQUNFLEVBQUMsSUFBRDtBQUFNLElBQUEsU0FBUyxFQUFDLE9BQWhCO0FBQXdCLElBQUEsS0FBSyxFQUFFTztBQUEvQixLQUNFLEVBQUMsS0FBRDtBQUNFLElBQUEsS0FBSyxFQUFFRixlQURUO0FBRUUsSUFBQSxRQUFRLEVBQUVXLFlBRlo7QUFHRSxJQUFBLElBQUksRUFBQyxpQkFIUDtBQUlFLElBQUEsSUFBSSxFQUFDLE1BSlA7QUFLRSxJQUFBLFdBQVcsRUFBQyx5QkFMZDtBQU1FLElBQUEsRUFBRSxFQUFDLGlCQU5MO0FBT0UsbUJBQVksaUJBUGQ7QUFRRSxJQUFBLGVBQWUsRUFBRSxDQUNmUSxlQUFlLENBQUNDLG1DQURELEVBRWZELGVBQWUsQ0FBQ0UsbUJBRkQsRUFHZkYsZUFBZSxDQUFDRyxvQkFIRCxFQUlmSCxlQUFlLENBQUNJLHVCQUpEO0FBUm5CLElBREYsRUFpQkUsRUFBQyxLQUFEO0FBQ0UsSUFBQSxLQUFLLEVBQUV0QixRQURUO0FBRUUsSUFBQSxRQUFRLEVBQUVVLFlBRlo7QUFHRSxJQUFBLElBQUksRUFBQyxVQUhQO0FBSUUsSUFBQSxJQUFJLEVBQUMsVUFKUDtBQUtFLElBQUEsV0FBVyxFQUFDLGdCQUxkO0FBTUUsSUFBQSxFQUFFLEVBQUMsVUFOTDtBQU9FLG1CQUFZLFVBUGQ7QUFRRSxJQUFBLGVBQWUsRUFBRSxDQUNmUSxlQUFlLENBQUNLLHVCQURELEVBRWZMLGVBQWUsQ0FBQ0UsbUJBRkQ7QUFSbkIsSUFqQkYsRUErQkUsRUFBQyxNQUFEO0FBQ0UsSUFBQSxJQUFJLEVBQUMsUUFEUDtBQUVFLElBQUEsRUFBRSxFQUFDLFdBRkw7QUFHRSxtQkFBWSxXQUhkO0FBSUUsSUFBQSxPQUFPLEVBQUVKLFdBSlg7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBL0JGLEVBc0NFO0FBQUcsSUFBQSxJQUFJLEVBQUMsR0FBUjtBQUFZLElBQUEsT0FBTyxFQUFFWCxXQUFyQjtBQUFrQyxJQUFBLEVBQUUsRUFBQyxnQkFBckM7QUFBc0QsbUJBQVk7QUFBbEUsd0JBdENGLENBREYsQ0FERixDQURGO0FBZ0REOzs7OyJ9
