import { u as useAuthContext, a as useFormContext, h } from './index-8f498f14.js';
import { B as Button, v as validationTypes, I as Input, F as Form, s as signup, a as valueChanged } from './actions-1edbab9c.js';

function Signup() {
  const {
    dispatch,
    state
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    username,
    password,
    email
  } = state;

  function handleSignup() {
    dispatch(signup({
      dispatch,
      state,
      formDispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h("div", {
    "data-testid": "signupform",
    className: "auth-form"
  }, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleSignup,
    id: "signup-btn",
    title: "Signup"
  })));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTdiMDYxZDUzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XHJcbmltcG9ydCB7IHVzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi9hdXRoLWNvbnRleHQnO1xyXG5pbXBvcnQgeyB1c2VGb3JtQ29udGV4dCB9IGZyb20gJy4uL2Zvcm0vZm9ybS1jb250ZXh0JztcclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWdudXAoKSB7XHJcbiAgY29uc3QgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHVzZUF1dGhDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBkaXNwYXRjaDogZm9ybURpc3BhdGNoIH0gPSB1c2VGb3JtQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbCB9ID0gc3RhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVNpZ251cCgpIHtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMuc2lnbnVwKHsgZGlzcGF0Y2gsIHN0YXRlLGZvcm1EaXNwYXRjaCB9KSk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKGFjdGlvbnMudmFsdWVDaGFuZ2VkKHsgcHJvcE5hbWU6IG5hbWUsIHZhbHVlLCBkaXNwYXRjaCwgc3RhdGUgfSkpO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBkYXRhLXRlc3RpZD1cInNpZ251cGZvcm1cIiBjbGFzc05hbWU9XCJhdXRoLWZvcm1cIj5cclxuICAgICAgPEZvcm0gZm9ybVRpdGxlPVwiU2lnbiB1cFwiPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIGlkPVwidXNlcm5hbWVcIlxyXG4gICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwidXNlcm5hbWVcIlxyXG4gICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX1RBS0VOLFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZW1haWxcIlxyXG4gICAgICAgICAgdHlwZT1cImVtYWlsXCJcclxuICAgICAgICAgIGlkPVwiZW1haWxcIlxyXG4gICAgICAgICAgbmFtZT1cImVtYWlsXCJcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuRU1BSUxfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5SRUdJU1RFUkVEX0VNQUlMLFxyXG4gICAgICAgICAgXX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTaWdudXB9XHJcbiAgICAgICAgICBpZD1cInNpZ251cC1idG5cIlxyXG4gICAgICAgICAgdGl0bGU9XCJTaWdudXBcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvRm9ybT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlNpZ251cCIsImRpc3BhdGNoIiwic3RhdGUiLCJ1c2VBdXRoQ29udGV4dCIsImZvcm1EaXNwYXRjaCIsInVzZUZvcm1Db250ZXh0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImVtYWlsIiwiaGFuZGxlU2lnbnVwIiwiYWN0aW9ucyIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX0ZPUk1BVF9WQUxJREFUSU9OIiwiVVNFUk5BTUVfVEFLRU4iLCJFTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIlJFR0lTVEVSRURfRU1BSUwiLCJQQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTiJdLCJtYXBwaW5ncyI6Ijs7O0FBU2UsU0FBU0EsTUFBVCxHQUFrQjtBQUMvQixRQUFNO0FBQUVDLElBQUFBLFFBQUY7QUFBWUMsSUFBQUE7QUFBWixNQUFzQkMsY0FBYyxFQUExQztBQUNBLFFBQU07QUFBRUYsSUFBQUEsUUFBUSxFQUFFRztBQUFaLE1BQTZCQyxjQUFjLEVBQWpEO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBLFFBQVo7QUFBc0JDLElBQUFBO0FBQXRCLE1BQWdDTixLQUF0Qzs7QUFFQSxXQUFTTyxZQUFULEdBQXdCO0FBQ3RCUixJQUFBQSxRQUFRLENBQUNTLE1BQUEsQ0FBZTtBQUFFVCxNQUFBQSxRQUFGO0FBQVlDLE1BQUFBLEtBQVo7QUFBa0JFLE1BQUFBO0FBQWxCLEtBQWYsQ0FBRCxDQUFSO0FBQ0Q7O0FBQ0QsV0FBU08sWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQWQsSUFBQUEsUUFBUSxDQUFDUyxZQUFBLENBQXFCO0FBQUVNLE1BQUFBLFFBQVEsRUFBRUgsSUFBWjtBQUFrQkMsTUFBQUEsS0FBbEI7QUFBeUJiLE1BQUFBLFFBQXpCO0FBQW1DQyxNQUFBQTtBQUFuQyxLQUFyQixDQUFELENBQVI7QUFDRDs7QUFDRCxTQUNFO0FBQUssbUJBQVksWUFBakI7QUFBOEIsSUFBQSxTQUFTLEVBQUM7QUFBeEMsS0FDRSxFQUFDLElBQUQ7QUFBTSxJQUFBLFNBQVMsRUFBQztBQUFoQixLQUNFLEVBQUMsS0FBRDtBQUNFLElBQUEsS0FBSyxFQUFFSSxRQURUO0FBRUUsSUFBQSxRQUFRLEVBQUVLLFlBRlo7QUFHRSxJQUFBLElBQUksRUFBQyxNQUhQO0FBSUUsSUFBQSxFQUFFLEVBQUMsVUFKTDtBQUtFLElBQUEsSUFBSSxFQUFDLFVBTFA7QUFNRSxJQUFBLFdBQVcsRUFBQyxVQU5kO0FBT0UsSUFBQSxlQUFlLEVBQUUsQ0FDZk0sZUFBZSxDQUFDQywwQkFERCxFQUVmRCxlQUFlLENBQUNFLGNBRkQ7QUFQbkIsSUFERixFQWFFLEVBQUMsS0FBRDtBQUNFLElBQUEsUUFBUSxFQUFFUixZQURaO0FBRUUsSUFBQSxLQUFLLEVBQUVILEtBRlQ7QUFHRSxJQUFBLFdBQVcsRUFBQyxPQUhkO0FBSUUsSUFBQSxJQUFJLEVBQUMsT0FKUDtBQUtFLElBQUEsRUFBRSxFQUFDLE9BTEw7QUFNRSxJQUFBLElBQUksRUFBQyxPQU5QO0FBT0UsSUFBQSxlQUFlLEVBQUUsQ0FDZlMsZUFBZSxDQUFDRyx1QkFERCxFQUVmSCxlQUFlLENBQUNJLGdCQUZEO0FBUG5CLElBYkYsRUF5QkUsRUFBQyxLQUFEO0FBQ0UsSUFBQSxRQUFRLEVBQUVWLFlBRFo7QUFFRSxJQUFBLEtBQUssRUFBRUosUUFGVDtBQUdFLElBQUEsV0FBVyxFQUFDLFVBSGQ7QUFJRSxJQUFBLElBQUksRUFBQyxVQUpQO0FBS0UsSUFBQSxFQUFFLEVBQUMsVUFMTDtBQU1FLElBQUEsSUFBSSxFQUFDLFVBTlA7QUFPRSxJQUFBLGVBQWUsRUFBRSxDQUFDVSxlQUFlLENBQUNLLDBCQUFqQjtBQVBuQixJQXpCRixFQWtDRSxFQUFDLE1BQUQ7QUFDRSxJQUFBLFNBQVMsRUFBQyxLQURaO0FBRUUsSUFBQSxJQUFJLEVBQUMsUUFGUDtBQUdFLElBQUEsT0FBTyxFQUFFYixZQUhYO0FBSUUsSUFBQSxFQUFFLEVBQUMsWUFKTDtBQUtFLElBQUEsS0FBSyxFQUFDO0FBTFIsSUFsQ0YsQ0FERixDQURGO0FBOENEOzs7OyJ9
