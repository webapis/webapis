import { j as useUserName, u as useRouteContext, a as useMediaQuery, b as useAppContext, p, k as getTokenFromUrl, h, v as validationTypes, c as valueChanged, m as changePassword } from './index-0fed73a4.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-e4874c3e.js';
import './style-413205b0.js';

function ChangePassword() {
  const {
    token
  } = useUserName();
  const [route, setRoute] = useRouteContext();
  const {
    device
  } = useMediaQuery();
  const {
    form,
    auth
  } = useAppContext();
  const {
    state,
    dispatch
  } = auth;
  const {
    password,
    confirm,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var urltoken = url.searchParams.get('token');
    debugger;

    if (urltoken) {
      auth.dispatch(getTokenFromUrl({
        token: urltoken
      }));
    }
  }, []);
  p(() => {
    if (auth.state.token) {
      debugger; //    setRoute('/');
    }
  }, [auth.state.token]);
  p(() => {
    if (state.authFeedback) {
      debugger;
      setRoute('/authfeedback');
    }
  }, [state.authFeedback]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  function handleChangePass() {
    dispatch(changePassword({
      dispatch,
      state,
      token,
      formDispatch: form.dispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Change Password",
    error: error
  }, h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: handleChangePass,
    title: "Change"
  }))));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtNDg5OTAzZjAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0NoYW5nZVBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBcHBDb250ZXh0IH0gZnJvbSAnLi4vYXBwLWNvbnRleHQnO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IHVzZU1lZGlhUXVlcnkgfSBmcm9tICcuLi9sYXlvdXQvdXNlTWVkaWFRdWVyeSc7XHJcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSAnLi4vbGF5b3V0L1BhcGVyJztcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4uL2xheW91dC9HcmlkJztcclxuaW1wb3J0IHsgdXNlUm91dGVDb250ZXh0IH0gZnJvbSAnLi4vcm91dGUvcm91dGVyJztcclxuaW1wb3J0IHsgdXNlVXNlck5hbWUgfSBmcm9tICcuL3VzZVVzZXJOYW1lJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2hhbmdlUGFzc3dvcmQoKSB7XHJcbiAgY29uc3QgeyB0b2tlbiB9ID0gdXNlVXNlck5hbWUoKTtcclxuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IHVzZVJvdXRlQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcbiAgY29uc3QgeyBmb3JtLCBhdXRoIH0gPSB1c2VBcHBDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBzdGF0ZSwgZGlzcGF0Y2ggfSA9IGF1dGg7XHJcbiAgY29uc3QgeyBwYXNzd29yZCwgY29uZmlybSwgZXJyb3IgfSA9IHN0YXRlO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgbGV0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG4gICAgdmFyIHVybHRva2VuID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Rva2VuJyk7XHJcbiAgICBkZWJ1Z2dlcjtcclxuICAgIGlmICh1cmx0b2tlbikge1xyXG4gICAgICBhdXRoLmRpc3BhdGNoKGFjdGlvbnMuZ2V0VG9rZW5Gcm9tVXJsKHsgdG9rZW46dXJsdG9rZW4gfSkpO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChhdXRoLnN0YXRlLnRva2VuKSB7XHJcbiAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAvLyAgICBzZXRSb3V0ZSgnLycpO1xyXG4gICAgfVxyXG4gIH0sIFthdXRoLnN0YXRlLnRva2VuXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoc3RhdGUuYXV0aEZlZWRiYWNrKSB7XHJcbiAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICBzZXRSb3V0ZSgnL2F1dGhmZWVkYmFjaycpO1xyXG4gICAgfVxyXG4gIH0sIFtzdGF0ZS5hdXRoRmVlZGJhY2tdKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VQYXNzKCkge1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMuY2hhbmdlUGFzc3dvcmQoe1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgICAgIHN0YXRlLFxyXG4gICAgICAgIHRva2VuLFxyXG4gICAgICAgIGZvcm1EaXNwYXRjaDogZm9ybS5kaXNwYXRjaCxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPEZvcm0gZm9ybVRpdGxlPSdDaGFuZ2UgUGFzc3dvcmQnIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICB0eXBlPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgaWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0VudGVyIG5ldyBwYXNzd29yZCdcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbdmFsaWRhdGlvblR5cGVzLlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2NvbmZpcm19XHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0nY29uZmlybSdcclxuICAgICAgICAgICAgbmFtZT0nY29uZmlybSdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0NvbmZpcm0gbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBpZD0nY2hhbmdlLXBhc3MtYnRuJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nY2hhbmdlLXBhc3MtYnRuJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDaGFuZ2VQYXNzfVxyXG4gICAgICAgICAgICB0aXRsZT0nQ2hhbmdlJ1xyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiQ2hhbmdlUGFzc3dvcmQiLCJ0b2tlbiIsInVzZVVzZXJOYW1lIiwicm91dGUiLCJzZXRSb3V0ZSIsInVzZVJvdXRlQ29udGV4dCIsImRldmljZSIsInVzZU1lZGlhUXVlcnkiLCJmb3JtIiwiYXV0aCIsInVzZUFwcENvbnRleHQiLCJzdGF0ZSIsImRpc3BhdGNoIiwicGFzc3dvcmQiLCJjb25maXJtIiwiZXJyb3IiLCJ1c2VFZmZlY3QiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ1cmx0b2tlbiIsInNlYXJjaFBhcmFtcyIsImdldCIsImFjdGlvbnMiLCJhdXRoRmVlZGJhY2siLCJoYW5kbGVDaGFuZ2UiLCJlIiwibmFtZSIsInZhbHVlIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJoYW5kbGVDaGFuZ2VQYXNzIiwiZm9ybURpc3BhdGNoIiwidmFsaWRhdGlvblR5cGVzIiwiUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT04iLCJQQVNTV09SRFNfTUFUQ0hfVkFMSURBVElPTiJdLCJt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
