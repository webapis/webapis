import { s as styleInject, j as v, b as useMediaQuery, p, h } from './index-ce6accae.js';

var css_248z = ".message-font-phone-size {\n  font-size: 10px;\n}\n\n.message-font-tablet-size {\n  font-size: 15px;\n}\n\n.font-laptop-size {\n  font-size: 20px;\n}\n\n.message-font-desktop-size {\n  font-size: 30px;\n}";
styleInject(css_248z);

const style = {
  root: {
    borderColor: '#eeeeee',
    borderStyle: 'solid',
    borderWidth: 1,
    borderRadius: 5,
    padding: 3,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    minHeight: 35,
    backgroundColor: 'white'
  },
  username: {
    marginRight: 8
  },
  log: {
    display: 'flex',
    color: '#737373',
    fontSize: 10
  },
  message: {}
}; //

function Message(props) {
  const {
    message
  } = props;
  const {
    float,
    username
  } = message;
  const [days, setDays] = v(0);
  const [hours, setHours] = v(0);
  const [minutes, setMinutes] = v(0);
  const [seconds, setSeconds] = v(0);
  const {
    device
  } = useMediaQuery();

  function convertMS(ms) {
    var d, h, m, s;
    s = Math.floor(ms / 1000);
    m = Math.floor(s / 60);
    s = s % 60;
    h = Math.floor(m / 60);
    m = m % 60;
    d = Math.floor(h / 24);
    h = h % 24;
    setDays(d);
    setHours(h);
    setMinutes(m);
    setSeconds(s);
  }

  p(() => {
    setTimeout(() => {
      convertMS(Date.now() - message.timestamp);
    }, 0);
    setInterval(() => {
      convertMS(Date.now() - message.timestamp);
    }, 60000);
  }, []);
  return h("div", {
    style: {
      width: '100%',
      marginBottom: 3
    }
  }, h("div", {
    style: { ...style.root,
      float
    }
  }, h("div", {
    "data-testid": "message",
    style: style.message,
    className: `message-font-${device}-size`
  }, message && message.text), h("div", {
    style: style.log
  }, h("div", {
    style: style.username
  }, username && username, ":"), h("div", null, minutes === 0 && h("div", null, "Now"), hours === 0 && minutes > 0 && h("div", null, minutes, " minutes ago "), hours > 0 && days === 0 && h("div", null, hours, " hours ", minutes, " minutes ago", ' '), days <= 10 && days > 1 && h("div", null, days, " days ago"), days > 10 && new Date(message.timestamp)))));
}

export { Message as M };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZS01ODE3MzA4MS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY2xpZW50L2hhbmdvdXRzL21lc3NhZ2UtdWkvTWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uLy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcbmNvbnN0IHN0eWxlID0ge1xuICByb290OiB7XG4gICAgYm9yZGVyQ29sb3I6ICcjZWVlZWVlJyxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBib3JkZXJSYWRpdXM6IDUsXG4gICAgcGFkZGluZzogMyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICBtaW5IZWlnaHQ6IDM1LFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgfSxcbiAgdXNlcm5hbWU6IHsgbWFyZ2luUmlnaHQ6IDggfSxcbiAgbG9nOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGNvbG9yOiAnIzczNzM3MycsXG4gICAgZm9udFNpemU6IDEwLFxuICB9LFxuICBtZXNzYWdlOiB7fSxcbn07XG4vL1xuZXhwb3J0IGZ1bmN0aW9uIE1lc3NhZ2UocHJvcHMpIHtcbiAgY29uc3QgeyBtZXNzYWdlIH0gPSBwcm9wcztcbiAgY29uc3QgeyBmbG9hdCwgdXNlcm5hbWUgfSA9IG1lc3NhZ2U7XG4gIGNvbnN0IFtkYXlzLCBzZXREYXlzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbaG91cnMsIHNldEhvdXJzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbbWludXRlcywgc2V0TWludXRlc10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW3NlY29uZHMsIHNldFNlY29uZHNdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XG4gIGZ1bmN0aW9uIGNvbnZlcnRNUyhtcykge1xuICAgIHZhciBkLCBoLCBtLCBzO1xuICAgIHMgPSBNYXRoLmZsb29yKG1zIC8gMTAwMCk7XG4gICAgbSA9IE1hdGguZmxvb3IocyAvIDYwKTtcbiAgICBzID0gcyAlIDYwO1xuICAgIGggPSBNYXRoLmZsb29yKG0gLyA2MCk7XG4gICAgbSA9IG0gJSA2MDtcbiAgICBkID0gTWF0aC5mbG9vcihoIC8gMjQpO1xuICAgIGggPSBoICUgMjQ7XG4gICAgc2V0RGF5cyhkKTtcbiAgICBzZXRIb3VycyhoKTtcbiAgICBzZXRNaW51dGVzKG0pO1xuICAgIHNldFNlY29uZHMocyk7XG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnZlcnRNUyhEYXRlLm5vdygpIC0gbWVzc2FnZS50aW1lc3RhbXApO1xuICAgIH0sIDApO1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGNvbnZlcnRNUyhEYXRlLm5vdygpIC0gbWVzc2FnZS50aW1lc3RhbXApO1xuICAgIH0sIDYwMDAwKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBtYXJnaW5Cb3R0b206IDMgfX0+XG4gICAgICA8ZGl2IHN0eWxlPXt7IC4uLnN0eWxlLnJvb3QsIGZsb2F0IH19PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJtZXNzYWdlXCJcbiAgICAgICAgICBzdHlsZT17c3R5bGUubWVzc2FnZX1cbiAgICAgICAgICBjbGFzc05hbWU9e2BtZXNzYWdlLWZvbnQtJHtkZXZpY2V9LXNpemVgfVxuICAgICAgICA+XG4gICAgICAgICAge21lc3NhZ2UgJiYgbWVzc2FnZS50ZXh0fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGUubG9nfT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZS51c2VybmFtZX0+e3VzZXJuYW1lICYmIHVzZXJuYW1lfTo8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge21pbnV0ZXMgPT09IDAgJiYgPGRpdj5Ob3c8L2Rpdj59XG4gICAgICAgICAgICB7aG91cnMgPT09IDAgJiYgbWludXRlcyA+IDAgJiYgPGRpdj57bWludXRlc30gbWludXRlcyBhZ28gPC9kaXY+fVxuICAgICAgICAgICAge2hvdXJzID4gMCAmJiBkYXlzID09PSAwICYmIChcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICB7aG91cnN9IGhvdXJzIHttaW51dGVzfSBtaW51dGVzIGFnb3snICd9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtkYXlzIDw9IDEwICYmIGRheXMgPiAxICYmIDxkaXY+e2RheXN9IGRheXMgYWdvPC9kaXY+fVxuICAgICAgICAgICAge2RheXMgPiAxMCAmJiBuZXcgRGF0ZShtZXNzYWdlLnRpbWVzdGFtcCl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsic3R5bGUiLCJyb290IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJtaW5IZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ1c2VybmFtZSIsIm1hcmdpblJpZ2h0IiwibG9nIiwiY29sb3IiLCJmb250U2l6ZSIsIm1lc3NhZ2UiLCJNZXNzYWdlIiwicHJvcHMiLCJmbG9hdCIsImRheXMiLCJzZXREYXlzIiwidXNlU3RhdGUiLCJob3VycyIsInNldEhvdXJzIiwibWludXRlcyIsInNldE1pbnV0ZXMiLCJzZWNvbmRzIiwic2V0U2Vjb25kcyIsImRldmljZSIsInVzZU1lZGlhUXVlcnkiLCJjb252ZXJ0TVMiLCJtcyIsImQiLCJoIiwibSIsInMiLCJNYXRoIiwiZmxvb3IiLCJ1c2VFZmZlY3QiLCJzZXRUaW1lb3V0IiwiRGF0ZSIsIm5vdyIsInRpbWVzdGFtcCIsInNldEludGVydmFsIiwid2lkdGgiLCJtYXJnaW5Cb3R0b20iLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE1BQU1BLEtBQUssR0FBRztBQUNaQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsV0FBVyxFQUFFLFNBRFQ7QUFFSkMsSUFBQUEsV0FBVyxFQUFFLE9BRlQ7QUFHSkMsSUFBQUEsV0FBVyxFQUFFLENBSFQ7QUFJSkMsSUFBQUEsWUFBWSxFQUFFLENBSlY7QUFLSkMsSUFBQUEsT0FBTyxFQUFFLENBTEw7QUFNSkMsSUFBQUEsT0FBTyxFQUFFLE1BTkw7QUFPSkMsSUFBQUEsYUFBYSxFQUFFLFFBUFg7QUFRSkMsSUFBQUEsY0FBYyxFQUFFLGVBUlo7QUFTSkMsSUFBQUEsU0FBUyxFQUFFLEVBVFA7QUFVSkMsSUFBQUEsZUFBZSxFQUFFO0FBVmIsR0FETTtBQWFaQyxFQUFBQSxRQUFRLEVBQUU7QUFBRUMsSUFBQUEsV0FBVyxFQUFFO0FBQWYsR0FiRTtBQWNaQyxFQUFBQSxHQUFHLEVBQUU7QUFDSFAsSUFBQUEsT0FBTyxFQUFFLE1BRE47QUFFSFEsSUFBQUEsS0FBSyxFQUFFLFNBRko7QUFHSEMsSUFBQUEsUUFBUSxFQUFFO0FBSFAsR0FkTztBQW1CWkMsRUFBQUEsT0FBTyxFQUFFO0FBbkJHLENBQWQ7O0FBc0JPLFNBQVNDLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQzdCLFFBQU07QUFBRUYsSUFBQUE7QUFBRixNQUFjRSxLQUFwQjtBQUNBLFFBQU07QUFBRUMsSUFBQUEs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
