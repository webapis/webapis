import { h, _ as _extends, L as List, a as ListItem, M, m, p, s } from './index-05201b22.js';

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  const {
    id,
    type = 'text'
  } = props;
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props, {
    "data-testid": id,
    type: type
  })));
}

function Hangout({
  hangouts,
  onSearch,
  onSelect
}) {
  return h("div", null, h(TextInput, {
    type: "search",
    onChange: onSearch
  }), h(List, null, hangouts && hangouts.map(g => {
    debugger;
    return h(ListItem, {
      onClick: onSelect
    }, g.username);
  })));
}

const actionTypes = {
  SET_SOCKET: 'SET_SOCKET',
  LOAD_HANGOUTS: 'LOAD_HANGOUTS',
  LOAD_MESSAGES: 'LOAD_MESSAGES',
  FILTER_HANGOUT: 'FILTER_HANGOUT',
  SELECTED_HANGOUT: 'SELECTED_HANGOUT',
  HANGOUT_STATE_CHANGED: 'HANGOUT_STATE_CHANGED',
  INVITE_STARTED: 'INVITE_STARTED',
  INVITE_SUCCESS: 'INVITE_SUCCESS',
  INVITE_FAILED: 'INVITE_FAILED',
  ACCEPT_STARTED: 'ACCEPT_STARTED',
  ACCEPT_SUCCESS: 'ACCEPT_SUCCESS',
  ACCEPT_FAILED: 'ACCEPT_FAILED',
  BLOCK_STARTED: 'BLOCK_STARTED',
  BLOCK_SUCCESS: 'BLOCK_SUCCESS',
  BLOCK_FAILED: 'BLOCK_FAILED',
  UNBLOCK_STARTED: 'UNBLOCK_STARTED',
  UNBLOCK_SUCCESS: 'UNBLOCK_SUCCESS',
  UNBLOCK_FAILED: 'UNBLOCK_FAILED',
  FETCH_STARTED: 'FETCH_STARTED',
  FETCH_SUCCESS: 'FETCH_SUCCESS',
  FETCH_FAILED: 'FETCH_FAILED',
  SEND_MSG_STARTED: 'SEND_MSG_STARTED',
  SEND_MSG_SUCCESS: 'SEND_MSG_SUCCESS',
  SEND_MSG_FAILED: 'SEND_MSG_FAILED',
  ONLINE_STATE_CHANGED: 'ONLINE_STATE_CHANGED'
};

const initState = {
  hangouts: [],
  hangout: null,
  socket: null,
  messages: []
};
function reducer(state, action) {
  switch (action.type) {
    case actionTypes.SET_SOCKET:
      return { ...state,
        socket: action.socket
      };

    case actionTypes.SELECTED_HANGOUT:
      return { ...state,
        hangout: state.hangouts.find(g => g.username === action.username)
      };

    default:
      return state;
  }
}

function initWSocket({
  url,
  dispatch
}) {
  dispatch({
    type: actionTypes.SET_SOCKET,
    socket: new WebSocket(url)
  });
}

const HangoutContext = M();
function HangoutsProvider(props) {
  const {
    socketUrl
  } = props;
  const [state, dispatch] = m(reducer, initState);
  p(() => {
    initWSocket({
      url: socketUrl,
      dispatch
    });
  }, []);
  const value = s(() => [state, dispatch], [state]);
  return h(HangoutContext.Provider, _extends({
    value: value
  }, props));
}

function index () {
  return h(HangoutsProvider, {
    socketUrl: "ws://localhost:3000/hangouts"
  }, h(Hangout, null));
}

export default index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
