import { e as useAuthContext, f as useFormContext, t as useUserName, d as useAuthRouteContext, a as useMediaQuery, p, w as getTokenFromUrl, h, g as validationTypes, i as valueChanged, x as changePassword } from './index-23ecf83f.js';
import { I as Input, F as Form, P as Paper, G as Grid } from './Grid-64899628.js';
import { B as Button } from './Button-27509646.js';
import './style-ca6ba9d1.js';

function ChangePassword() {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    token
  } = useUserName();
  const [authRoute, setAuthRoute] = useAuthRouteContext();
  const {
    device
  } = useMediaQuery();
  const {
    password,
    confirm,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var urltoken = url.searchParams.get('token');

    if (urltoken) {
      dispatch(getTokenFromUrl({
        token: urltoken
      }));
    }
  }, []);
  p(() => {
    if (state.authFeedback) {
      setAuthRoute('/authfeedback');
    }
  }, [state.authFeedback]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  function handleChangePass() {
    dispatch(changePassword({
      dispatch,
      state,
      token,
      formDispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Change Password",
    error: error
  }, h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: handleChangePass,
    title: "Change"
  }))));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtMWQxZjNhNDkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0NoYW5nZVBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQgeyB1c2VBdXRoUm91dGVDb250ZXh0IH0gZnJvbSAnLi9hdXRoLXJvdXRlLWNvbnRleHQnO1xyXG5pbXBvcnQgeyB1c2VVc2VyTmFtZSB9IGZyb20gJy4vdXNlVXNlck5hbWUnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDaGFuZ2VQYXNzd29yZCgpIHtcclxuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdXNlQXV0aENvbnRleHQoKTtcclxuICBjb25zdCB7IGRpc3BhdGNoOiBmb3JtRGlzcGF0Y2ggfSA9IHVzZUZvcm1Db250ZXh0KCk7XHJcbiAgY29uc3QgeyB0b2tlbiB9ID0gdXNlVXNlck5hbWUoKTtcclxuICBjb25zdCBbYXV0aFJvdXRlLCBzZXRBdXRoUm91dGVdID0gdXNlQXV0aFJvdXRlQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGV2aWNlIH0gPSB1c2VNZWRpYVF1ZXJ5KCk7XHJcblxyXG4gIGNvbnN0IHsgcGFzc3dvcmQsIGNvbmZpcm0sIGVycm9yIH0gPSBzdGF0ZTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxldCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuICAgIHZhciB1cmx0b2tlbiA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCd0b2tlbicpO1xyXG5cclxuICAgIGlmICh1cmx0b2tlbikge1xyXG4gICAgICBkaXNwYXRjaChhY3Rpb25zLmdldFRva2VuRnJvbVVybCh7IHRva2VuOiB1cmx0b2tlbiB9KSk7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKHN0YXRlLmF1dGhGZWVkYmFjaykge1xyXG4gICAgICBzZXRBdXRoUm91dGUoJy9hdXRoZmVlZGJhY2snKTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUuYXV0aEZlZWRiYWNrXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VQYXNzKCkge1xyXG4gICAgZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMuY2hhbmdlUGFzc3dvcmQoe1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgICAgIHN0YXRlLFxyXG4gICAgICAgIHRva2VuLFxyXG4gICAgICAgIGZvcm1EaXNwYXRjaCxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPEZvcm0gZm9ybVRpdGxlPSdDaGFuZ2UgUGFzc3dvcmQnIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICB0eXBlPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgaWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0VudGVyIG5ldyBwYXNzd29yZCdcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbdmFsaWRhdGlvblR5cGVzLlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2NvbmZpcm19XHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0nY29uZmlybSdcclxuICAgICAgICAgICAgbmFtZT0nY29uZmlybSdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0NvbmZpcm0gbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBpZD0nY2hhbmdlLXBhc3MtYnRuJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nY2hhbmdlLXBhc3MtYnRuJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDaGFuZ2VQYXNzfVxyXG4gICAgICAgICAgICB0aXRsZT0nQ2hhbmdlJ1xyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiQ2hhbmdlUGFzc3dvcmQiLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlQXV0aENvbnRleHQiLCJmb3JtRGlzcGF0Y2giLCJ1c2VGb3JtQ29udGV4dCIsInRva2VuIiwidXNlVXNlck5hbWUiLCJhdXRoUm91dGUiLCJzZXRBdXRoUm91dGUiLCJ1c2VBdXRoUm91dGVDb250ZXh0IiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsInBhc3N3b3JkIiwiY29uZmlybSIsImVycm9yIiwidXNlRWZmZWN0IiwidXJsIiwiVVJMIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidXJsdG9rZW4iLCJzZWFyY2hQYXJhbXMiLCJnZXQiLCJhY3Rpb25zIiwiYXV0aEZlZWRiYWNrIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsInByb3BOYW1lIiwiaGFuZGxlQ2hhbmdlUGFzcyIsInZhbGlkYXRpb25UeXBlcyIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIiwiUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7O0FBZWUsU0FBU0EsY0FBVCxHQUEwQjtBQUN2QyxRQUFNO0FBQUVDLElBQUFBLEtBQUY7QUFBU0Ms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
