import { v, A as useWSocketContext, e as useAuthContext, u as useContactsContext, b as useRouteContext, E as useAppContext, p, h, U, F as Route, L } from './index-59182f33.js';

const messageType = {
  INVITE: 'INVITE',
  ACCEPT: 'ACCEPT',
  DECLINE: 'DECLINE',
  BLOCK: 'BLOCK',
  UNBLOCK: 'UNBLOCK',
  MESSAGE: 'MESSAGE'
};
function useWsocketChat({
  username,
  target
}) {
  const [message, setMessage] = v('');
  const {
    socket
  } = useWSocketContext();

  function onInvite() {
    let msg = {
      message,
      type: messageType.INVITE,
      username,
      target
    };
    debugger;
    socket.send(JSON.stringify(msg));
  }

  function onAccept() {
    let msg = {
      message,
      type: messageType.ACCEPT,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onDecline() {
    let msg = {
      type: messageType.DECLINE,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onBlock() {
    let msg = {
      type: messageType.BLOCK,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onUnblock() {
    let msg = {
      type: messageType.UNBLOCK,
      username,
      target
    };
    socket.send({
      message: JSON.stringify(msg)
    });
  }

  function onChange(e) {
    const {
      value
    } = e.target;
    setMessage(value);
  }

  function sendMessage() {
    try {
      let msg = {
        type: messageType.MESSAGE,
        username,
        target,
        message
      };
      let strMgs = JSON.stringify(msg);
      debugger;
      socket.send(JSON.stringify(strMgs));
    } catch (error) {
      debugger;
    }
  }

  return {
    onInvite,
    onAccept,
    onDecline,
    onBlock,
    onUnblock,
    onChange,
    message,
    sendMessage
  };
}

const Contacts = L(() => import('./Contacts-99338d65.js'));
const Block = L(() => import('./Block-43608326.js'));
const Blocked = L(() => import('./Blocked-19b4a24e.js'));
const Chat = L(() => import('./Chat-1e504759.js'));
const Configure = L(() => import('./Configure-f463024c.js'));
const Invite = L(() => import('./Invite-6805da94.js'));
const Invitee = L(() => import('./Invitee-6c5f6924.js'));
const Inviter = L(() => import('./Inviter-6d64a436.js'));
function PeerToPeerMobile() {
  const authContext = useAuthContext();
  const [state, dispatch] = useContactsContext();
  const [route, setRoute] = useRouteContext();
  const {
    contact
  } = state;
  const {
    username
  } = authContext.state;
  const {
    accept_inv_img
  } = useAppContext();
  const {
    onInvite,
    onAccept,
    onBlock,
    onUnblock,
    onDecline,
    onChange,
    message,
    sendMessage
  } = useWsocketChat({
    username,
    target: contact && contact.username
  });
  p(() => {
    if (contact) {
      setRoute(`/${contact.state}`);
    }
  }, [contact]);

  function onSetting() {
    setRoute('/cofigure');
  }

  return h("div", {
    style: {
      height: '85vh'
    }
  }, h(Route, {
    path: "/contacts"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Contacts, null))), h(Route, {
    path: "/block"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Block, {
    contact: contact,
    onBlock: onBlock,
    setRoute: setRoute
  }))), h(Route, {
    path: "/blocked"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Blocked, {
    contact: contact,
    onUnblock: onUnblock,
    setRoute: setRoute
  }))), h(Route, {
    path: "/chat"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Chat, {
    contact: contact,
    onSetting: onSetting,
    onChange: onChange,
    message: message,
    sendMessage: sendMessage
  }))), h(Route, {
    path: "/cofigure"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Configure, {
    contact: contact
  }))), h(Route, {
    path: "/invite"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Invite, {
    contact: contact,
    onInvite: onInvite,
    setRoute: setRoute,
    onChange: onChange,
    message: message
  }))), h(Route, {
    path: "/invitee"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Invitee, {
    contact: contact
  }))), h(Route, {
    path: "/inviter"
  }, h(U, {
    fallback: h("div", null, "loading...")
  }, h(Inviter, {
    accept_inv_img: accept_inv_img,
    contact: contact,
    onAccept: onAccept,
    onDecline: onDecline,
    setRoute: setRoute
  }))));
}

export default PeerToPeerMobile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
