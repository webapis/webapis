import { u as useAppContext, h } from './index-2780fa73.js';
import { B as Button, v as validationTypes, I as Input, F as Form, s as signup, a as valueChanged } from './actions-6d7d0647.js';

function Signup() {
  const {
    form,
    auth
  } = useAppContext();
  const {
    username,
    password,
    email
  } = auth.state;

  function handleSignup() {
    auth.dispatch(signup({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  return h("div", {
    "data-testid": "signupform",
    className: "auth-form"
  }, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleSignup,
    id: "signup-btn",
    title: "Signup"
  })));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLTcxMTkwNmVjLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XG5pbXBvcnQgRm9ybSBmcm9tICcuLi9mb3JtL0Zvcm0nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XG5pbXBvcnQgdmFsaWRhdGlvblR5cGVzIGZyb20gJy4uL2Zvcm0vdmFsaWRhdGlvblR5cGVzJztcbmltcG9ydCB7IHVzZUFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAtY29udGV4dCc7XG5cbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpZ251cCgpIHtcbiAgY29uc3QgeyBmb3JtLCBhdXRoIH0gPSB1c2VBcHBDb250ZXh0KCk7XG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbCB9ID0gYXV0aC5zdGF0ZTtcblxuICBmdW5jdGlvbiBoYW5kbGVTaWdudXAoKSB7XG4gICAgYXV0aC5kaXNwYXRjaChcbiAgICAgIGFjdGlvbnMuc2lnbnVwKHtcbiAgICAgICAgZGlzcGF0Y2g6IGF1dGguZGlzcGF0Y2gsXG4gICAgICAgIHN0YXRlOiBhdXRoLnN0YXRlLFxuICAgICAgICBmb3JtRGlzcGF0Y2g6IGZvcm0uZGlzcGF0Y2gsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcbiAgICBhdXRoLmRpc3BhdGNoKFxuICAgICAgYWN0aW9ucy52YWx1ZUNoYW5nZWQoe1xuICAgICAgICBwcm9wTmFtZTogbmFtZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRpc3BhdGNoOiBhdXRoLmRpc3BhdGNoLFxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9J3NpZ251cGZvcm0nIGNsYXNzTmFtZT0nYXV0aC1mb3JtJz5cbiAgICAgIDxGb3JtIGZvcm1UaXRsZT0nU2lnbiB1cCc+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIHR5cGU9J3RleHQnXG4gICAgICAgICAgaWQ9J3VzZXJuYW1lJ1xuICAgICAgICAgIG5hbWU9J3VzZXJuYW1lJ1xuICAgICAgICAgIHBsYWNlaG9sZGVyPSd1c2VybmFtZSdcbiAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTixcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9UQUtFTixcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgICA8SW5wdXRcbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIHZhbHVlPXtlbWFpbH1cbiAgICAgICAgICBwbGFjZWhvbGRlcj0nZW1haWwnXG4gICAgICAgICAgdHlwZT0nZW1haWwnXG4gICAgICAgICAgaWQ9J2VtYWlsJ1xuICAgICAgICAgIG5hbWU9J2VtYWlsJ1xuICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlJFR0lTVEVSRURfRU1BSUwsXG4gICAgICAgICAgXX1cbiAgICAgICAgLz5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9J3Bhc3N3b3JkJ1xuICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xuICAgICAgICAgIGlkPSdwYXNzd29yZCdcbiAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcbiAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT05dfVxuICAgICAgICAvPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPSdidG4nXG4gICAgICAgICAgdHlwZT0nYnV0dG9uJ1xuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNpZ251cH1cbiAgICAgICAgICBpZD0nc2lnbnVwLWJ0bidcbiAgICAgICAgICB0aXRsZT0nU2lnbnVwJ1xuICAgICAgICAvPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlNpZ251cCIsImZvcm0iLCJhdXRoIiwidXNlQXBwQ29udGV4dCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsInN0YXRlIiwiaGFuZGxlU2lnbnVwIiwiZGlzcGF0Y2giLCJhY3Rpb25zIiwiZm9ybURpc3BhdGNoIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsInByb3BOYW1lIiwidmFsaWRhdGlvblR5cGVzIiwiVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04iLCJVU0VSTkFNRV9UQUtFTiIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiUkVHSVNURVJFRF9FTUFJTCIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7QUFTZSxTQUFTQSxNQUFULEdBQWtCO0FBQy9CLFFBQU07QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQTtBQUFSLE1BQWlCQyxhQUFhLEVBQXBDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBLFFBQVo7QUFBc0JDLElBQUFBO0FBQXRCLE1BQWdDSixJQUFJLENBQUNLLEtBQTNDOztBQUVBLFdBQVNDLFlBQVQsR0FBd0I7QUFDdEJOLElBQUFBLElBQUksQ0FBQ08sUUFBTCxDQUNFQyxNQUFBLENBQWU7QUFDYkQsTUFBQUEsUUFBUSxFQUFFUCxJQUFJLENBQUNPLFFBREY7QUFFYkYsTUFBQUEsS0FBSyxFQUFFTCxJQUFJLENBQUNLLEtBRkM7QUFHYkksTUFBQUEsWUFBWSxFQUFFVixJQUFJLENBQUNRO0FBSE4sS0FBZixDQURGO0FBT0Q7O0FBQ0QsV0FBU0csWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQWQsSUFBQUEsSUFBSSxDQUFDTyxRQUFMLENBQ0VDLFlBQUEsQ0FBcUI7QUFDbkJPLE1BQUFBLFFBQVEsRUFBRUgsSUFEUztBQUVuQkMsTUFBQUEsS0FGbUI7QUFHbkJOLE1BQUFBLFFBQVEsRUFBRVAsSUFBSSxDQUFDTyxRQUhJO0FBSW5CRixNQUFBQSxLQUFLLEVBQUVMLElBQUksQ0FBQ0s7QUFKTyxLQUFyQixDQURGO0FBUUQ7O0FBQ0QsU0FDRTtBQUFLLG1CQUFZLFlBQWpCO0FBQThCLElBQUEsU0FBUyxFQUFDO0FBQXhDLEtBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUgsUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFUSxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsTUFIUDtBQUlFLElBQUEsRUFBRSxFQUFDLFVBSkw7QUFLRSxJQUFBLElBQUksRUFBQyxVQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMsVUFOZDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZNLGVBQWUsQ0FBQ0MsMEJBREQsRUFFZkQsZUFBZSxDQUFDRSxjQUZEO0FBUG5CLElBREYsRUFhRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRVIsWUFEWjtBQUVFLElBQUEsS0FBSyxFQUFFTixLQUZUO0FBR0UsSUFBQSxXQUFXLEVBQUMsT0FIZDtBQUlFLElBQUEsSUFBSSxFQUFDLE9BSlA7QUFLRSxJQUFBLEVBQUUsRUFBQyxPQUxMO0FBTUUsSUFBQSxJQUFJLEVBQUMsT0FOUDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZZLGVBQWUsQ0FBQ0csdUJBREQsRUFFZkgsZUFBZSxDQUFDSSxnQkFGRDtBQVBuQixJQWJGLEVBeUJFLEVBQUMsS0FBRDtBQUNFLElBQUEsUUFBUSxFQUFFVixZQURaO0FBRUUsSUFBQSxLQUFLLEVBQUVQLFFBRlQ7QUFHRSxJQUFBLFdBQVcsRUFBQyxVQUhkO0FBSUUsSUFBQSxJQUFJLEVBQUMsVUFKUDtBQUtFLElBQUEsRUFBRSxFQUFDLFVBTEw7QUFNRSxJQUFBLElBQUksRUFBQyxVQU5QO0FBT0UsSUFBQSxlQUFlLEVBQUUsQ0FBQ2EsZUFBZSxDQUFDSywwQkFBakI7QUFQbkIsSUF6QkYsRUFrQ0UsRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRWYsWUFIWDtBQUlFLElBQUEsRUFBRSxFQUFDLFlBSkw7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBbENGLENBREYsQ0FERjtBQThDRDs7OzsifQ==
