import { b as useAppContext, a as useMediaQuery, h } from './index-5b7d45bd.js';
import { B as Button, v as validationTypes, I as Input, F as Form, P as Paper, G as Grid, s as signup, a as valueChanged } from './actions-007c8d75.js';
import './style-bb4bc937.js';

function Signup() {
  const {
    form,
    auth
  } = useAppContext();
  const {
    device
  } = useMediaQuery();
  const {
    username,
    password,
    email
  } = auth.state;

  function handleSignup() {
    auth.dispatch(signup({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleSignup,
    id: "signup-btn",
    title: "Signup"
  }))));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLWYwOGNlMDdiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XHJcbmltcG9ydCB7IHVzZUFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAtY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4uL2xheW91dC9HcmlkJztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyB1c2VNZWRpYVF1ZXJ5IH0gZnJvbSAnLi4vbGF5b3V0L3VzZU1lZGlhUXVlcnknO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWdudXAoKSB7XHJcbiAgY29uc3QgeyBmb3JtLCBhdXRoIH0gPSB1c2VBcHBDb250ZXh0KCk7XHJcbiAgY29uc3QgeyBkZXZpY2UgfSA9IHVzZU1lZGlhUXVlcnkoKTtcclxuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwgfSA9IGF1dGguc3RhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVNpZ251cCgpIHtcclxuICAgIGF1dGguZGlzcGF0Y2goXHJcbiAgICAgIGFjdGlvbnMuc2lnbnVwKHtcclxuICAgICAgICBkaXNwYXRjaDogYXV0aC5kaXNwYXRjaCxcclxuICAgICAgICBzdGF0ZTogYXV0aC5zdGF0ZSxcclxuICAgICAgICBmb3JtRGlzcGF0Y2g6IGZvcm0uZGlzcGF0Y2gsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XHJcbiAgICBhdXRoLmRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2g6IGF1dGguZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGU6IGF1dGguc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPEdyaWQgd2lkdGg9e2RldmljZSA9PT0gJ3Bob25lJyA/IDEwMCA6IDI1fT5cclxuICAgICAgPFBhcGVyPlxyXG4gICAgICAgIDxGb3JtIGZvcm1UaXRsZT0nU2lnbiB1cCc+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgICBpZD0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIG5hbWU9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0ndXNlcm5hbWUnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5VU0VSTkFNRV9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfVEFLRU4sXHJcbiAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J2VtYWlsJ1xyXG4gICAgICAgICAgICB0eXBlPSdlbWFpbCdcclxuICAgICAgICAgICAgaWQ9J2VtYWlsJ1xyXG4gICAgICAgICAgICBuYW1lPSdlbWFpbCdcclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OLFxyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5SRUdJU1RFUkVEX0VNQUlMLFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIGlkPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgbmFtZT0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W3ZhbGlkYXRpb25UeXBlcy5QQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTl19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2J0bidcclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTaWdudXB9XHJcbiAgICAgICAgICAgIGlkPSdzaWdudXAtYnRuJ1xyXG4gICAgICAgICAgICB0aXRsZT0nU2lnbnVwJ1xyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L0Zvcm0+XHJcbiAgICAgIDwvUGFwZXI+XHJcbiAgICA8L0dyaWQ+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiU2lnbnVwIiwiZm9ybSIsImF1dGgiLCJ1c2VBcHBDb250ZXh0IiwiZGV2aWNlIiwidXNlTWVkaWFRdWVyeSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsInN0YXRlIiwiaGFuZGxlU2lnbnVwIiwiZGlzcGF0Y2giLCJhY3Rpb25zIiwiZm9ybURpc3BhdGNoIiwiaGFuZGxlQ2hhbmdlIiwiZSIsIm5hbWUiLCJ2YWx1ZSIsInRhcmdldCIsInByb3BOYW1lIiwidmFsaWRhdGlvblR5cGVzIiwiVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04iLCJVU0VSTkFNRV9UQUtFTiIsIkVNQUlMX0ZPUk1BVF9WQUxJREFUSU9OIiwiUkVHSVNURVJFRF9FTUFJTCIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7O0FBV2UsU0FBU0EsTUFBVCxHQUFrQjtBQUMvQixRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUE7QUFBUixNQUFpQkMsYUFBYSxFQUFwQztBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBLFFBQVo7QUFBc0JDLElBQUFBO0FBQXRCLE1BQWdDTixJQUFJLENBQUNPLEtBQTNDOztBQUVBLFdBQVNDLFlBQVQsR0FBd0I7QUFDdEJSLElBQUFBLElBQUksQ0FBQ1MsUUFBTCxDQUNFQyxNQUFBLENBQWU7QUFDYkQsTUFBQUEsUUFBUSxFQUFFVCxJQUFJLENBQUNTLFFBREY7QUFFYkYsTUFBQUEsS0FBSyxFQUFFUCxJQUFJLENBQUNPLEtBRkM7QUFHYkksTUFBQUEsWUFBWSxFQUFFWixJQUFJLENBQUNVO0FBSE4sS0FBZixDQURGO0FBT0Q7O0FBQ0QsV0FBU0csWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0JGLENBQUMsQ0FBQ0csTUFBMUI7QUFDQWhCLElBQUFBLElBQUksQ0FBQ1MsUUFBTCxDQUNFQyxZQUFBLENBQXFCO0FBQ25CTyxNQUFBQSxRQUFRLEVBQUVILElBRFM7QUFFbkJDLE1BQUFBLEtBRm1CO0FBR25CTixNQUFBQSxRQUFRLEVBQUVULElBQUksQ0FBQ1MsUUFISTtBQUluQkYsTUFBQUEsS0FBSyxFQUFFUCxJQUFJLENBQUNPO0FBSk8sS0FBckIsQ0FERjtBQVFEOztBQUNELFNBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVMLE1BQU0sS0FBSyxPQUFYLEdBQXFCLEdBQXJCLEdBQTJCO0FBQXhDLEtBQ0UsRUFBQyxLQUFELFFBQ0UsRUFBQyxJQUFEO0FBQU0sSUFBQSxTQUFTLEVBQUM7QUFBaEIsS0FDRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLEtBQUssRUFBRUUsUUFEVDtBQUVFLElBQUEsUUFBUSxFQUFFUSxZQUZaO0FBR0UsSUFBQSxJQUFJLEVBQUMsTUFIUDtBQUlFLElBQUEsRUFBRSxFQUFDLFVBSkw7QUFLRSxJQUFBLElBQUksRUFBQyxVQUxQO0FBTUUsSUFBQSxXQUFXLEVBQUMsVUFOZDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZNLGVBQWUsQ0FBQ0MsMEJBREQsRUFFZkQsZUFBZSxDQUFDRSxjQUZEO0FBUG5CLElBREYsRUFhRSxFQUFDLEtBQUQ7QUFDRSxJQUFBLFFBQVEsRUFBRVIsWUFEWjtBQUVFLElBQUEsS0FBSyxFQUFFTixLQUZUO0FBR0UsSUFBQSxXQUFXLEVBQUMsT0FIZDtBQUlFLElBQUEsSUFBSSxFQUFDLE9BSlA7QUFLRSxJQUFBLEVBQUUsRUFBQyxPQUxMO0FBTUUsSUFBQSxJQUFJLEVBQUMsT0FOUDtBQU9FLElBQUEsZUFBZSxFQUFFLENBQ2ZZLGVBQWUsQ0FBQ0csdUJBREQsRUFFZkgsZUFBZSxDQUFDSSxnQkFGRDtBQVBuQixJQWJGLEVBeUJFLEVBQUMsS0FBRDtBQUNFLElBQUEsUUFBUSxFQUFFVixZQURaO0FBRUUsSUFBQSxLQUFLLEVBQUVQLFFBRlQ7QUFHRSxJQUFBLFdBQVcsRUFBQyxVQUhkO0FBSUUsSUFBQSxJQUFJLEVBQUMsVUFKUDtBQUtFLElBQUEsRUFBRSxFQUFDLFVBTEw7QUFNRSxJQUFBLElBQUksRUFBQyxVQU5QO0FBT0UsSUFBQSxlQUFlLEVBQUUsQ0FBQ2EsZUFBZSxDQUFDSywwQkFBakI7QUFQbkIsSUF6QkYsRUFrQ0UsRUFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUMsS0FEWjtBQUVFLElBQUEsSUFBSSxFQUFDLFFBRlA7QUFHRSxJQUFBLE9BQU8sRUFBRWYsWUFIWDtBQUlFLElBQUEsRUFBRSxFQUFDLFlBSkw7QUFLRSxJQUFBLEtBQUssRUFBQztBQUxSLElBbENGLENBREYsQ0FERixDQURGO0FBZ0REOzs7OyJ9
