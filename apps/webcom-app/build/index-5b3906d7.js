import { u as useWSocketContext, a as useAppRoute, l, b as actionTypes, c as useAuthContext, d as useHangoutContext, s as selectHangout, e as selectUser, f as searchHangouts, g as filterHangouts, h as fetchHangout, i as changeMessageText, j as saveMessage, k as h, F as FeatureRoute, M, O } from './index-7d9d8e16.js';

function updateLocalHangouts({
  hangout,
  username
}) {
  const key = `${username}-hangouts`;
  const hangouts = JSON.parse(localStorage.getItem(key));

  if (hangouts) {
    const hangoutExists = hangouts.find(g => g.username === hangout.username);

    if (hangoutExists) {
      const updatedHangout = hangouts.map(g => {
        if (g.username === hangout.username) {
          return hangout;
        } else {
          return g;
        }
      });
      localStorage.setItem(key, JSON.stringify(updatedHangout));
    } else {
      localStorage.setItem(key, JSON.stringify([hangouts, hangout]));
    }
  } else {
    localStorage.setItem(key, JSON.stringify([hangout]));
  }
}

const hangoutStates = {
  INVITER: 'INVITER',
  ACCEPTER: 'ACCEPTER',
  DECLINER: 'DECLINER',
  BLOCKER: 'BLOCKER',
  UNBLOCKER: 'UNBLOCKER',
  MESSANGER: 'MESSANGER',
  // acknowlegement
  INVITED: 'INVITED',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  BLOCKED: 'BLOCKED',
  UNBLOCKED: 'UNBLOCKED',
  MESSAGED: 'MESSAGED'
};

function useSocket({
  dispatch,
  username
}) {
  const socketContext = useWSocketContext();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    socket
  } = socketContext[0];

  function handleRoute({
    hangout
  }) {
    switch (hangout.state) {
      case hangoutStates.INVITED:
      case hangoutStates.UNBLOCKED:
      case hangoutStates.DECLINED:
      case hangoutStates.BLOCKED:
      case hangoutStates.ACCEPTED:
        onAppRoute({
          featureRoute: `/${hangout.state}`,
          route: '/hangouts'
        });
        break;
    }
  }

  l(() => {
    if (socket && username) {
      socket.onmessage = message => {
        debugger;
        const hangout = JSON.parse(message.data);
        updateLocalHangouts({
          hangout,
          username
        });
        handleRoute({
          hangout
        });
        dispatch({
          type: actionTypes.HANGOUT_RECIEVED,
          hangout
        });
      };

      socket.onclose = () => {};

      socket.onerror = error => {};

      socket.onopen = () => {};
    }
  }, [socket, username]);
  return null;
}

function useHangouts() {
  const socketContext = useWSocketContext();
  const {
    socket
  } = socketContext[0];
  const authContext = useAuthContext();
  const {
    username
  } = authContext.state;
  const [state, dispatch] = useHangoutContext();
  const {
    hangout,
    hangouts,
    search,
    users,
    messageText,
    messages
  } = state;
  const handleSocket = useSocket({
    dispatch,
    hangout,
    username
  });

  function onSelectHangout(e) {
    const username = e.target.id;
    selectHangout({
      dispatch,
      username
    });
  }

  function onSelectUser(e) {
    const uname = e.target.id;
    const user = users.find(u => u.username === uname);
    selectUser({
      dispatch,
      user,
      username
    });
  }

  function onSearch(e) {
    searchHangouts({
      search: e.target.value,
      dispatch
    });
  }

  function onStartSearch(e) {
    if (hangouts && hangouts.length > 0) {
      filterHangouts({
        dispatch
      });
    }

    fetchHangout({
      dispatch,
      search,
      username
    });
  }

  function onMessageText(e) {
    const text = e.target.value;
    changeMessageText({
      dispatch,
      text
    });
  }

  function onHangout(e) {
    const command = e.target.id;
    const {
      username,
      email
    } = hangout;
    let message = null;

    if (messageText) {
      message = {
        text: messageText,
        timestamp: Date.now()
      };
      saveMessage({
        dispatch,
        hangout,
        message,
        target: username,
        username: authContext.state.username
      });
    }

    const updatedHangout = {
      username,
      email,
      message
    };
    socket.send(JSON.stringify({ ...updatedHangout,
      command
    }));
    updateLocalHangouts({
      hangout,
      username,
      devivered: 'pending'
    });
  }

  return {
    onMessageText,
    messageText,
    onStartSearch,
    onSearch,
    search,
    onSelectHangout,
    onSelectUser,
    hangout,
    hangouts,
    users,
    username,
    messages,
    onHangout
  };
}

const Hangouts = O(() => import('./Hangout-468c2904.js'));
const Block = O(() => import('./Block-e961ddf5.js'));
const Blocked = O(() => import('./Blocked-5bb13354.js'));
const Configure = O(() => import('./Configure-a2efabe1.js'));
const Hangchat = O(() => import('./Hangchat-44f051bd.js'));
const Invite = O(() => import('./Invite-bd97584d.js'));
const Invitee = O(() => import('./Invitee-491b8d03.js'));
const Inviter = O(() => import('./Inviter-6023423f.js'));
const UnReadHangouts = O(() => import('./UnReadHangouts-4b4c07f5.js'));
function Mobile() {
  const {
    hangout,
    hangouts,
    onHangout,
    onSelectHangout,
    onSelectUser,
    onSearch,
    users,
    search,
    onStartSearch,
    onMessageText,
    messageText,
    username,
    messages
  } = useHangouts();
  return h("div", {
    style: {
      height: '85vh'
    }
  }, h(FeatureRoute, {
    path: "/hangouts"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Hangouts, {
    users: users,
    search: search,
    hangouts: hangouts,
    onSelectHangout: onSelectHangout,
    onSelectUser: onSelectUser,
    onSearch: onSearch,
    onStartSearch: onStartSearch
  }))), h(FeatureRoute, {
    path: "/BLOCK"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Block, {
    hangout: hangout,
    onBlock: onHangout
  }))), h(FeatureRoute, {
    path: "/BLOCKED"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Blocked, {
    hangout: hangout,
    onUnblock: onHangout
  }))), h(FeatureRoute, {
    path: "/configure"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Configure, {
    hangout: hangout
  }))), h(FeatureRoute, {
    paths: ["/ACCEPTED", "/ACCEPTER", "/MESSANGER", "/MESSAGED"]
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Hangchat, {
    onMessageText: onMessageText,
    onMessage: onHangout,
    messages: messages,
    username: username
  }))), h(FeatureRoute, {
    path: "/INVITE"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Invite, {
    hangout: hangout,
    onInvite: onHangout,
    onMessageText: onMessageText,
    messageText: messageText
  }))), h(FeatureRoute, {
    path: "/INVITED"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Invitee, {
    hangout: hangout
  }))), h(FeatureRoute, {
    path: "/INVITER"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(Inviter, {
    hangout: hangout,
    onAccept: onHangout
  }))), h(FeatureRoute, {
    path: "/UNREAD"
  }, h(M, {
    fallback: h("div", null, "Loading...")
  }, h(UnReadHangouts, null))));
}

function index () {
  return h(Mobile, null);
}

export default index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
