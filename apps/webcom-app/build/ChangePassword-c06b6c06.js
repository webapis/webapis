import { c as useAuthContext, d as useFormContext, k as useUserName, a as useAppRoute, b as useMediaQuery, p, l as getTokenFromUrl, h, v as validationTypes, e as valueChanged } from './index-58f1b195.js';
import { P as Paper, F as Form, I as Input, G as Grid } from './Grid-2301840b.js';
import { B as Button } from './Button-27a43db7.js';
import './style-632926cc.js';

function ChangePassword({
  changePassword
}) {
  const {
    state,
    dispatch
  } = useAuthContext();
  const {
    dispatch: formDispatch
  } = useFormContext();
  const {
    token
  } = useUserName();
  const {
    onAppRoute
  } = useAppRoute();
  const {
    device
  } = useMediaQuery();
  const {
    password,
    confirm,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var urltoken = url.searchParams.get('token');

    if (urltoken) {
      dispatch(getTokenFromUrl({
        token: urltoken
      }));
    }
  }, []);
  p(() => {
    if (state.authFeedback) {
      onAppRoute({
        featureRoute: '/authfeedback',
        route: '/auth'
      });
    }
  }, [state.authFeedback]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Change Password",
    error: error
  }, h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: changePassword,
    title: "Change"
  }))));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlUGFzc3dvcmQtYzA2YjZjMDYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9hdXRoL0NoYW5nZVBhc3N3b3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xyXG5pbXBvcnQgJy4vY3NzL3N0eWxlLmNzcyc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9mb3JtL0lucHV0JztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9mb3JtL0J1dHRvbic7XHJcbmltcG9ydCB2YWxpZGF0aW9uVHlwZXMgZnJvbSAnLi4vZm9ybS92YWxpZGF0aW9uVHlwZXMnO1xyXG5pbXBvcnQgeyB1c2VBdXRoQ29udGV4dCB9IGZyb20gJy4vYXV0aC1jb250ZXh0JztcclxuaW1wb3J0IHsgdXNlRm9ybUNvbnRleHQgfSBmcm9tICcuLi9mb3JtL2Zvcm0tY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSB9IGZyb20gJy4uL2xheW91dC91c2VNZWRpYVF1ZXJ5JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi4vbGF5b3V0L0dyaWQnO1xyXG5pbXBvcnQge3VzZUFwcFJvdXRlfSBmcm9tICcuLi9hcHAtcm91dGUvQXBwUm91dGVQcm92aWRlcidcclxuaW1wb3J0IHsgdXNlVXNlck5hbWUgfSBmcm9tICcuL3VzZVVzZXJOYW1lJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2hhbmdlUGFzc3dvcmQoe2NoYW5nZVBhc3N3b3JkfSkge1xyXG4gIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSB1c2VBdXRoQ29udGV4dCgpO1xyXG4gIGNvbnN0IHsgZGlzcGF0Y2g6IGZvcm1EaXNwYXRjaCB9ID0gdXNlRm9ybUNvbnRleHQoKTtcclxuICBjb25zdCB7IHRva2VuIH0gPSB1c2VVc2VyTmFtZSgpO1xyXG4gIGNvbnN0IHtvbkFwcFJvdXRlfSA9IHVzZUFwcFJvdXRlKCk7XHJcbiAgY29uc3QgeyBkZXZpY2UgfSA9IHVzZU1lZGlhUXVlcnkoKTtcclxuXHJcbiAgY29uc3QgeyBwYXNzd29yZCwgY29uZmlybSwgZXJyb3IgfSA9IHN0YXRlO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgbGV0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG4gICAgdmFyIHVybHRva2VuID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Rva2VuJyk7XHJcblxyXG4gICAgaWYgKHVybHRva2VuKSB7XHJcbiAgICAgIGRpc3BhdGNoKGFjdGlvbnMuZ2V0VG9rZW5Gcm9tVXJsKHsgdG9rZW46IHVybHRva2VuIH0pKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoc3RhdGUuYXV0aEZlZWRiYWNrKSB7XHJcbiAgICAgIG9uQXBwUm91dGUoe2ZlYXR1cmVSb3V0ZTogJy9hdXRoZmVlZGJhY2snLHJvdXRlOicvYXV0aCd9KTtcclxuICAgIH1cclxuICB9LCBbc3RhdGUuYXV0aEZlZWRiYWNrXSk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBlLnRhcmdldDtcclxuICAgIGRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnZhbHVlQ2hhbmdlZCh7XHJcbiAgICAgICAgcHJvcE5hbWU6IG5hbWUsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuIFxyXG4gIHJldHVybiAoXHJcbiAgICA8R3JpZCB3aWR0aD17ZGV2aWNlID09PSAncGhvbmUnID8gMTAwIDogMjV9PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPEZvcm0gZm9ybVRpdGxlPSdDaGFuZ2UgUGFzc3dvcmQnIGVycm9yPXtlcnJvcn0+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICB0eXBlPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgaWQ9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0VudGVyIG5ldyBwYXNzd29yZCdcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzPXtbdmFsaWRhdGlvblR5cGVzLlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgdmFsdWU9e2NvbmZpcm19XHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0nY29uZmlybSdcclxuICAgICAgICAgICAgbmFtZT0nY29uZmlybSdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J0NvbmZpcm0gbmV3IHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBpZD0nY2hhbmdlLXBhc3MtYnRuJ1xyXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD0nY2hhbmdlLXBhc3MtYnRuJ1xyXG4gICAgICAgICAgICBvbkNsaWNrPXtjaGFuZ2VQYXNzd29yZH1cclxuICAgICAgICAgICAgdGl0bGU9J0NoYW5nZSdcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Gb3JtPlxyXG4gICAgICA8L1BhcGVyPlxyXG4gICAgPC9HcmlkPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNoYW5nZVBhc3N3b3JkIiwiY2hhbmdlUGFzc3dvcmQiLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlQXV0aENvbnRleHQiLCJmb3JtRGlzcGF0Y2giLCJ1c2VGb3JtQ29udGV4dCIsInRva2VuIiwidXNlVXNlck5hbWUiLCJvbkFwcFJvdXRlIiwidXNlQXBwUm91dGUiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwicGFzc3dvcmQiLCJjb25maXJtIiwiZXJyb3IiLCJ1c2VFZmZlY3QiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ1cmx0b2tlbiIsInNlYXJjaFBhcmFtcyIsImdldCIsImFjdGlvbnMiLCJhdXRoRmVlZGJhY2siLCJmZWF0dXJlUm91dGUiLCJyb3V0ZSIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlBBU1NXT1JEX0ZPUk1BVF9WQUxJREFUSU9OIiwiUEFTU1dPUkRTX01BVENIX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7O0FBZWUsU0FBU0EsY0FBVCxDQUF3QjtBQUFDQyxFQUFBQTtBQUFELENBQXhCLEVBQTBDO0FBQ3ZELFFBQU07QUFBRUMsSUFBQUEsS0FBRjtBQUFTQyxJQUFBQTtBQUFULE1BQXNCQyxjQUFjLEVBQTFDO0FBQ0EsUUFBTTtBQUFFRCxJQUFBQSxRQUFRLEVBQUVFO0FBQVosTUFBNkJDLGNBQWMsRUFBakQ7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBWUMsV0FBVyxFQUE3QjtBQUNBLFFBQU07QUFBQ0Ms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
