import { j as useUserName, u as useRouteContext, a as useMediaQuery, b as useAppContext, p, h, v as validationTypes, c as valueChanged, k as changePassword } from './index-5af3fea3.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-e6e66893.js';
import './style-a9286d51.js';

function ChangePassword() {
  const {
    userName
  } = useUserName();
  const [route, setRoute] = useRouteContext();
  const {
    device
  } = useMediaQuery();
  const {
    form,
    auth
  } = useAppContext();
  const {
    state,
    dispatch
  } = auth;
  const {
    password,
    confirm,
    current,
    emailorusername,
    token,
    error
  } = state;
  p(() => {
    let url = new URL(window.location.href);
    var token = url.searchParams.get('token');
  }, []);
  p(() => {
    if (auth.state.token) {
      setRoute('/');
    }
  }, [auth.state.token]);

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    dispatch(valueChanged({
      propName: name,
      value,
      dispatch,
      state
    }));
  }

  function handleChangePass() {
    dispatch(changePassword({
      dispatch,
      state,
      formDispatch: form.dispatch
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Change Password",
    error: error
  }, !userName && h(Input, {
    value: emailorusername,
    type: "text",
    id: "emailorusername",
    name: "emailorusername",
    placeholder: "Enter email or username",
    onChange: handleChange,
    validationTypes: [validationTypes.USERNAME_OR_EMAIL_FORMAT_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), !userName && h(Input, {
    value: current,
    type: "password",
    id: "current",
    name: "current",
    onChange: handleChange,
    placeholder: "Enter current password",
    validationTypes: [validationTypes.EMPTY_STRING_VALIDATION, validationTypes.INVALID_CREDENTIALS]
  }), h(Input, {
    value: password,
    type: "password",
    id: "password",
    name: "password",
    placeholder: "Enter new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Input, {
    value: confirm,
    type: "password",
    id: "confirm",
    name: "confirm",
    placeholder: "Confirm new password",
    onChange: handleChange,
    validationTypes: [validationTypes.PASSWORDS_MATCH_VALIDATION]
  }), h(Button, {
    type: "button",
    id: "change-pass-btn",
    "data-testid": "change-pass-btn",
    onClick: handleChangePass,
    title: "Change"
  }))));
}

export default ChangePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
