import { h, _ as _extends, m, p, L as ListItem, a as List, v } from './index-00e5b76b.js';
import { P as Paper } from './Paper-ef50dd4c.js';

var actionTypes = {
  FETCH_CONTACTS_STARTED: 'FETCH_CONTACTS_STARTED',
  FETCH_CONTACTS_SUCCESS: 'FETCH_CONTACTS_SUCCESS',
  FETCH_CONTACTS_FAILED: 'FETCH_CONTACTS_FAILED'
};

async function fetchContacts({
  dispatch
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_STARTED
    });
    const response = await fetch('http://localhost:3000/contacts/find');
    const {
      contacts
    } = await response.json();
    dispatch({
      type: actionTypes.FETCH_CONTACTS_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_FAILED,
      error
    });
  }
}

const initState = {
  loading: false,
  contacts: [],
  error: null
};
function contactReducer(state, action) {
  switch (action.type) {
    case actionTypes.FETCH_CONTACTS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.FETCH_CONTACTS_SUCCESS:
      return { ...state,
        loading: false,
        contacts: action.contacts
      };

    case actionTypes.FETCH_CONTACTS_FAILED:
      return { ...state,
        loading: false,
        error: action.error
      };

    default:
      return state;
  }
}

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props)));
}

const style$1 = {
  width: 56,
  height: 56,
  backgroundColor: 'yellow',
  borderRadius: '50%',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
};
function Fab({
  children
}) {
  return h("div", null, h("div", {
    style: style$1
  }, children));
}

function AddIcon() {
  return h("svg", {
    height: "24",
    viewBox: "0 0 24 24",
    width: "24"
  }, h("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), h("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }));
}

function Contacts() {
  const [state, dispatch] = m(contactReducer, initState);
  const {
    contacts
  } = state;

  function getContacts() {
    fetchContacts({
      dispatch
    });
  }

  p(() => {
    getContacts();
  }, []);
  return h("div", {
    style: {
      display: 'flex'
    }
  }, h(Paper, null, h(NewConversation, null), h(List, null, contacts.length > 0 && contacts.map(c => {
    return h(ListItem, null, c.username);
  }))));
}

function NewConversation() {
  const [newConversation, setNewConversation] = v(false);

  function handleNewConversation() {
    setNewConversation(true);
  }

  return h(List, null, newConversation ? h(TextInput, {
    placeholder: "Enter username or email"
  }) : h(ListItem, {
    onClick: handleNewConversation
  }, h(Fab, null, h(AddIcon, null)), h("div", null, "New Conversation")));
}

export default Contacts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
