import { u as useRouteContext, b as useAppContext, a as useMediaQuery, p, h, v as validationTypes, o as signup, c as valueChanged } from './index-0fed73a4.js';
import { B as Button, I as Input, F as Form, P as Paper, G as Grid } from './Grid-e4874c3e.js';
import './style-413205b0.js';

function Signup() {
  const [route, setRoute] = useRouteContext();
  const {
    form,
    auth
  } = useAppContext();
  const {
    device
  } = useMediaQuery();
  const {
    username,
    password,
    email
  } = auth.state;
  p(() => {
    if (auth.state.token) {
      setRoute('/');
    }
  }, [auth.state.token]);

  function handleSignup() {
    auth.dispatch(signup({
      dispatch: auth.dispatch,
      state: auth.state,
      formDispatch: form.dispatch
    }));
  }

  function handleChange(e) {
    const {
      name,
      value
    } = e.target;
    auth.dispatch(valueChanged({
      propName: name,
      value,
      dispatch: auth.dispatch,
      state: auth.state
    }));
  }

  return h(Grid, {
    width: device === 'phone' ? 100 : 25
  }, h(Paper, null, h(Form, {
    formTitle: "Sign up"
  }, h(Input, {
    value: username,
    onChange: handleChange,
    type: "text",
    id: "username",
    name: "username",
    placeholder: "username",
    validationTypes: [validationTypes.USERNAME_FORMAT_VALIDATION, validationTypes.USERNAME_TAKEN]
  }), h(Input, {
    onChange: handleChange,
    value: email,
    placeholder: "email",
    type: "email",
    id: "email",
    name: "email",
    validationTypes: [validationTypes.EMAIL_FORMAT_VALIDATION, validationTypes.REGISTERED_EMAIL]
  }), h(Input, {
    onChange: handleChange,
    value: password,
    placeholder: "password",
    type: "password",
    id: "password",
    name: "password",
    validationTypes: [validationTypes.PASSWORD_FORMAT_VALIDATION]
  }), h(Button, {
    className: "btn",
    type: "button",
    onClick: handleSignup,
    id: "signup-btn",
    title: "Signup"
  }))));
}

export default Signup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbnVwLWQxYzZjMmU0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQvYXV0aC9TaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XHJcbmltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0IEZvcm0gZnJvbSAnLi4vZm9ybS9Gb3JtJztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2Zvcm0vSW5wdXQnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2Zvcm0vQnV0dG9uJztcclxuaW1wb3J0IHZhbGlkYXRpb25UeXBlcyBmcm9tICcuLi9mb3JtL3ZhbGlkYXRpb25UeXBlcyc7XHJcbmltcG9ydCB7IHVzZUFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAtY29udGV4dCc7XHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4uL2xheW91dC9HcmlkJztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyB1c2VNZWRpYVF1ZXJ5IH0gZnJvbSAnLi4vbGF5b3V0L3VzZU1lZGlhUXVlcnknO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZUNvbnRleHQgfSBmcm9tICcuLi9yb3V0ZS9yb3V0ZXInO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWdudXAoKSB7XHJcbiAgY29uc3QgW3JvdXRlLCBzZXRSb3V0ZV0gPSB1c2VSb3V0ZUNvbnRleHQoKTtcclxuICBjb25zdCB7IGZvcm0sIGF1dGggfSA9IHVzZUFwcENvbnRleHQoKTtcclxuICBjb25zdCB7IGRldmljZSB9ID0gdXNlTWVkaWFRdWVyeSgpO1xyXG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBlbWFpbCB9ID0gYXV0aC5zdGF0ZTtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGF1dGguc3RhdGUudG9rZW4pIHtcclxuICAgICAgc2V0Um91dGUoJy8nKTtcclxuICAgIH1cclxuICB9LCBbYXV0aC5zdGF0ZS50b2tlbl0pO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVTaWdudXAoKSB7XHJcbiAgICBhdXRoLmRpc3BhdGNoKFxyXG4gICAgICBhY3Rpb25zLnNpZ251cCh7XHJcbiAgICAgICAgZGlzcGF0Y2g6IGF1dGguZGlzcGF0Y2gsXHJcbiAgICAgICAgc3RhdGU6IGF1dGguc3RhdGUsXHJcbiAgICAgICAgZm9ybURpc3BhdGNoOiBmb3JtLmRpc3BhdGNoLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGUudGFyZ2V0O1xyXG4gICAgYXV0aC5kaXNwYXRjaChcclxuICAgICAgYWN0aW9ucy52YWx1ZUNoYW5nZWQoe1xyXG4gICAgICAgIHByb3BOYW1lOiBuYW1lLFxyXG4gICAgICAgIHZhbHVlLFxyXG4gICAgICAgIGRpc3BhdGNoOiBhdXRoLmRpc3BhdGNoLFxyXG4gICAgICAgIHN0YXRlOiBhdXRoLnN0YXRlLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxHcmlkIHdpZHRoPXtkZXZpY2UgPT09ICdwaG9uZScgPyAxMDAgOiAyNX0+XHJcbiAgICAgIDxQYXBlcj5cclxuICAgICAgICA8Rm9ybSBmb3JtVGl0bGU9J1NpZ24gdXAnPlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdHlwZT0ndGV4dCdcclxuICAgICAgICAgICAgaWQ9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICBuYW1lPSd1c2VybmFtZSdcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9J3VzZXJuYW1lJ1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1tcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuVVNFUk5BTUVfRk9STUFUX1ZBTElEQVRJT04sXHJcbiAgICAgICAgICAgICAgdmFsaWRhdGlvblR5cGVzLlVTRVJOQU1FX1RBS0VOLFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdlbWFpbCdcclxuICAgICAgICAgICAgdHlwZT0nZW1haWwnXHJcbiAgICAgICAgICAgIGlkPSdlbWFpbCdcclxuICAgICAgICAgICAgbmFtZT0nZW1haWwnXHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcz17W1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlcy5FTUFJTF9GT1JNQVRfVkFMSURBVElPTixcclxuICAgICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXMuUkVHSVNURVJFRF9FTUFJTCxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICBpZD0ncGFzc3dvcmQnXHJcbiAgICAgICAgICAgIG5hbWU9J3Bhc3N3b3JkJ1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uVHlwZXM9e1t2YWxpZGF0aW9uVHlwZXMuUEFTU1dPUkRfRk9STUFUX1ZBTElEQVRJT05dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgY2xhc3NOYW1lPSdidG4nXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2lnbnVwfVxyXG4gICAgICAgICAgICBpZD0nc2lnbnVwLWJ0bidcclxuICAgICAgICAgICAgdGl0bGU9J1NpZ251cCdcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Gb3JtPlxyXG4gICAgICA8L1BhcGVyPlxyXG4gICAgPC9HcmlkPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlNpZ251cCIsInJvdXRlIiwic2V0Um91dGUiLCJ1c2VSb3V0ZUNvbnRleHQiLCJmb3JtIiwiYXV0aCIsInVzZUFwcENvbnRleHQiLCJkZXZpY2UiLCJ1c2VNZWRpYVF1ZXJ5IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImVtYWlsIiwic3RhdGUiLCJ1c2VFZmZlY3QiLCJ0b2tlbiIsImhhbmRsZVNpZ251cCIsImRpc3BhdGNoIiwiYWN0aW9ucyIsImZvcm1EaXNwYXRjaCIsImhhbmRsZUNoYW5nZSIsImUiLCJuYW1lIiwidmFsdWUiLCJ0YXJnZXQiLCJwcm9wTmFtZSIsInZhbGlkYXRpb25UeXBlcyIsIlVTRVJOQU1FX0ZPUk1BVF9WQUxJREFUSU9OIiwiVVNFUk5BTUVfVEFLRU4iLCJFTUFJTF9GT1JNQVRfVkFMSURBVElPTiIsIlJFR0lTVEVSRURfRU1BSUwiLCJQQVNTV09SRF9GT1JNQVRfVkFMSURBVElPTiJdLCJtYXBwaW5ncyI6Ijs7OztBQWFlLFNBQVNBLE1BQVQsR0FBa0I7QUFDL0IsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JDLGVBQWUsRUFBekM7QUFDQSxRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUE7QUFBUixNQUFpQkMsYUFBYSxFQUFwQztBQUNBLFFBQU07QUFBRUMsSUFBQUE7QUFBRixNQUFhQyxhQUFhLEVBQWhDO0FBQ0EsUUFBTTtBQUFF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
