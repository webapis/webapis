import { h, _ as _extends, m, p, L as ListItem, a as List, v } from './index-0090201e.js';
import { P as Paper } from './Paper-5b6bf487.js';

var actionTypes = {
  FETCH_CONTACTS_STARTED: 'FETCH_CONTACTS_STARTED',
  FETCH_CONTACTS_SUCCESS: 'FETCH_CONTACTS_SUCCESS',
  FETCH_CONTACTS_FAILED: 'FETCH_CONTACTS_FAILED'
};

async function fetchContacts({
  dispatch
}) {
  try {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_STARTED
    });
    const response = await fetch('http://localhost:3000/contacts/find');
    const {
      contacts
    } = await response.json();
    dispatch({
      type: actionTypes.FETCH_CONTACTS_SUCCESS,
      contacts
    });
  } catch (error) {
    dispatch({
      type: actionTypes.FETCH_CONTACTS_FAILED,
      error
    });
  }
}

const initState = {
  loading: false,
  contacts: [],
  error: null
};
function contactReducer(state, action) {
  switch (action.type) {
    case actionTypes.FETCH_CONTACTS_STARTED:
      return { ...state,
        loading: true
      };

    case actionTypes.FETCH_CONTACTS_SUCCESS:
      return { ...state,
        loading: false,
        contacts: action.contacts
      };

    case actionTypes.FETCH_CONTACTS_FAILED:
      return { ...state,
        loading: false,
        error: action.error
      };

    default:
      return state;
  }
}

const style = {
  padding: 8,
  marginLeft: 16,
  marginRight: 16,
  marginTop: 8,
  marginBottom: 8,
  boxSizing: 'border-box',
  flex: 1
};
function TextInput(props) {
  return h("div", {
    style: {
      display: 'flex',
      width: '100%'
    }
  }, h("input", _extends({
    style: style
  }, props)));
}

const style$1 = {
  width: 56,
  height: 56,
  backgroundColor: 'yellow',
  borderRadius: '50%',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
};
function Fab({
  children
}) {
  return h("div", null, h("div", {
    style: style$1
  }, children));
}

function AddIcon() {
  return h("svg", {
    height: "24",
    viewBox: "0 0 24 24",
    width: "24"
  }, h("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), h("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }));
}

function Contacts() {
  const [state, dispatch] = m(contactReducer, initState);
  const {
    contacts
  } = state;

  function getContacts() {
    fetchContacts({
      dispatch
    });
  }

  p(() => {
    getContacts();
  }, []);
  return h("div", {
    style: {
      display: 'flex'
    }
  }, h(Paper, null, h(NewConversation, null), h(List, null, contacts.length > 0 && contacts.map(c => {
    return h(ListItem, {
      id: c.username
    }, c.username);
  }))));
}

function NewConversation() {
  const [newConversation, setNewConversation] = v(false);

  function handleNewConversation() {
    setNewConversation(true);
  }

  return h(List, null, newConversation ? h(TextInput, {
    placeholder: "Enter username or email"
  }) : h(ListItem, {
    onClick: handleNewConversation,
    id: "conversation"
  }, h(Fab, null, h(AddIcon, null)), h("div", null, "New Conversation")));
}

export default Contacts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdHMtMjUwZWFmN2EuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9jaGF0L2NvbnRhY3RzL2FjdGlvblR5cGVzLmpzIiwiLi4vLi4vLi4vY2xpZW50L2NoYXQvY29udGFjdHMvYWN0aW9ucy5qcyIsIi4uLy4uLy4uL2NsaWVudC9jaGF0L2NvbnRhY3RzL2NvbnRhY3RzUmVkdWNlci5qcyIsIi4uLy4uLy4uL2NsaWVudC9sYXlvdXQvVGV4dElucHV0LmpzIiwiLi4vLi4vLi4vY2xpZW50L2xheW91dC9GYWIuanMiLCIuLi8uLi8uLi9jbGllbnQvbGF5b3V0L2ljb25zL0FkZEljb24uanMiLCIuLi8uLi8uLi9jbGllbnQvY2hhdC9jb250YWN0cy9Db250YWN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XHJcbiAgRkVUQ0hfQ09OVEFDVFNfU1RBUlRFRDogJ0ZFVENIX0NPTlRBQ1RTX1NUQVJURUQnLFxyXG4gIEZFVENIX0NPTlRBQ1RTX1NVQ0NFU1M6ICdGRVRDSF9DT05UQUNUU19TVUNDRVNTJyxcclxuICBGRVRDSF9DT05UQUNUU19GQUlMRUQ6ICdGRVRDSF9DT05UQUNUU19GQUlMRUQnLFxyXG59O1xyXG4iLCJpbXBvcnQgYWN0aW9uVHlwZXMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaENvbnRhY3RzKHsgZGlzcGF0Y2ggfSkge1xyXG4gIHRyeSB7XHJcbiAgICBkaXNwYXRjaCh7IHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX0NPTlRBQ1RTX1NUQVJURUQgfSk7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvY29udGFjdHMvZmluZCcpO1xyXG5cclxuICAgIGNvbnN0IHtjb250YWN0c30gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9DT05UQUNUU19TVUNDRVNTLCBjb250YWN0cyB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9DT05UQUNUU19GQUlMRUQsIGVycm9yIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgYWN0aW9uVHlwZXMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XHJcbmV4cG9ydCBjb25zdCBpbml0U3RhdGUgPSB7XHJcbiAgbG9hZGluZzogZmFsc2UsXHJcbiAgY29udGFjdHM6IFtdLFxyXG4gIGVycm9yOiBudWxsLFxyXG59O1xyXG5leHBvcnQgZnVuY3Rpb24gY29udGFjdFJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgYWN0aW9uVHlwZXMuRkVUQ0hfQ09OVEFDVFNfU1RBUlRFRDpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IHRydWUgfTtcclxuICAgIGNhc2UgYWN0aW9uVHlwZXMuRkVUQ0hfQ09OVEFDVFNfU1VDQ0VTUzpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IGZhbHNlLCBjb250YWN0czogYWN0aW9uLmNvbnRhY3RzIH07XHJcbiAgICBjYXNlIGFjdGlvblR5cGVzLkZFVENIX0NPTlRBQ1RTX0ZBSUxFRDpcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogYWN0aW9uLmVycm9yIH07XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5cclxuY29uc3Qgc3R5bGUgPSB7XHJcbiAgcGFkZGluZzogOCxcclxuICBtYXJnaW5MZWZ0OiAxNixcclxuICBtYXJnaW5SaWdodDogMTYsXHJcbiAgbWFyZ2luVG9wOiA4LFxyXG4gIG1hcmdpbkJvdHRvbTogOCxcclxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICBmbGV4OiAxLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRleHRJbnB1dChwcm9wcykge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4Jywgd2lkdGg6ICcxMDAlJyB9fT5cclxuICAgICAgPGlucHV0IHN0eWxlPXtzdHlsZX0gey4uLnByb3BzfSAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcclxuXHJcbmNvbnN0IHN0eWxlID0ge1xyXG4gIHdpZHRoOiA1NixcclxuICBoZWlnaHQ6IDU2LFxyXG4gIGJhY2tncm91bmRDb2xvcjogJ3llbGxvdycsXHJcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcclxuICBkaXNwbGF5OiAnZmxleCcsXHJcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEZhYih7IGNoaWxkcmVuIH0pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPGRpdiBzdHlsZT17c3R5bGV9PntjaGlsZHJlbn08L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCc7XHJcbmV4cG9ydCAgZnVuY3Rpb24gQWRkSWNvbigpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPHN2Z1xyXG4gICAgICBoZWlnaHQ9JzI0J1xyXG4gICAgICB2aWV3Qm94PScwIDAgMjQgMjQnXHJcbiAgICAgIHdpZHRoPScyNCdcclxuICAgID5cclxuICAgICAgPHBhdGggZD0nTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnonIC8+XHJcbiAgICAgIDxwYXRoIGQ9J00wIDBoMjR2MjRIMHonIGZpbGw9J25vbmUnIC8+XHJcbiAgICA8L3N2Zz5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IHsgZmV0Y2hDb250YWN0cyB9IGZyb20gJy4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IGNvbnRhY3RSZWR1Y2VyLCBpbml0U3RhdGUgfSBmcm9tICcuL2NvbnRhY3RzUmVkdWNlcic7XHJcbmltcG9ydCB7IExpc3QsIExpc3RJdGVtIH0gZnJvbSAnLi4vLi4vbGF5b3V0L05hdkxpc3QnO1xyXG5pbXBvcnQgeyBUZXh0SW5wdXQgfSBmcm9tICcuLi8uLi9sYXlvdXQvVGV4dElucHV0JztcclxuaW1wb3J0IHsgUGFwZXIgfSBmcm9tICcuLi8uLi9sYXlvdXQvUGFwZXInO1xyXG5pbXBvcnQgeyBGYWIgfSBmcm9tICcuLi8uLi9sYXlvdXQvRmFiJztcclxuaW1wb3J0IHsgQWRkSWNvbiB9IGZyb20gJy4uLy4uL2xheW91dC9pY29ucy9BZGRJY29uJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udGFjdHMoKSB7XHJcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKGNvbnRhY3RSZWR1Y2VyLCBpbml0U3RhdGUpO1xyXG4gIGNvbnN0IHsgY29udGFjdHMgfSA9IHN0YXRlO1xyXG5cclxuICBmdW5jdGlvbiBnZXRDb250YWN0cygpIHtcclxuICAgIGZldGNoQ29udGFjdHMoeyBkaXNwYXRjaCB9KTtcclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBnZXRDb250YWN0cygpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxyXG4gICAgICA8UGFwZXI+XHJcbiAgICAgICAgPE5ld0NvbnZlcnNhdGlvbiAvPlxyXG4gICAgICAgIDxMaXN0PlxyXG4gICAgICAgICAge2NvbnRhY3RzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgY29udGFjdHMubWFwKChjKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIDxMaXN0SXRlbSBpZD17Yy51c2VybmFtZX0+e2MudXNlcm5hbWV9PC9MaXN0SXRlbT47XHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgIDwvTGlzdD5cclxuICAgICAgPC9QYXBlcj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5ld0NvbnZlcnNhdGlvbigpIHtcclxuICBjb25zdCBbbmV3Q29udmVyc2F0aW9uLCBzZXROZXdDb252ZXJzYXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVOZXdDb252ZXJzYXRpb24oKSB7XHJcbiAgICBzZXROZXdDb252ZXJzYXRpb24odHJ1ZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPExpc3Q+XHJcbiAgICAgIHtuZXdDb252ZXJzYXRpb24gPyAoXHJcbiAgICAgICAgPFRleHRJbnB1dCBwbGFjZWhvbGRlcj0nRW50ZXIgdXNlcm5hbWUgb3IgZW1haWwnIC8+XHJcbiAgICAgICkgOiAoXHJcbiAgICAgICAgPExpc3RJdGVtIG9uQ2xpY2s9e2hhbmRsZU5ld0NvbnZlcnNhdGlvbn0gaWQ9J2NvbnZlcnNhdGlvbic+XHJcbiAgICAgICAgICA8RmFiPlxyXG4gICAgICAgICAgICA8QWRkSWNvbiAvPlxyXG4gICAgICAgICAgPC9GYWI+XHJcbiAgICAgICAgICA8ZGl2Pk5ldyBDb252ZXJzYXRpb248L2Rpdj5cclxuICAgICAgICA8L0xpc3RJdGVtPlxyXG4gICAgICApfVxyXG4gICAgPC9MaXN0PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkZFVENIX0NPTlRBQ1RTX1NUQVJURUQiLCJGRVRDSF9DT05UQUNUU19TVUNDRVNTIiwiRkVUQ0hfQ09OVEFDVFNfRkFJTEVEIiwiZmV0Y2hDb250YWN0cyIsImRpc3BhdGNoIiwidHlwZSIsImFjdGlvblR5cGVzIiwicmVzcG9uc2UiLCJmZXRjaCIsImNvbnRhY3RzIiwianNvbiIsImVycm9yIiwiaW5pdFN0YXRlIiwibG9hZGluZyIsImNvbnRhY3RSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJzdHlsZSIsInBhZGRpbmciLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3hTaXppbmciLCJmbGV4IiwiVGV4dElucHV0IiwicHJvcHMiLCJkaXNwbGF5Iiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJGYWIiLCJjaGlsZHJlbiIsIkFkZEljb24iLCJDb250YWN0cyIsInVzZVJlZHVjZXIiLCJnZXRDb250YWN0cyIsInVzZUVmZmVjdCIsImxlbmd0aCIsIm1hcCIsImMiLCJ1c2VybmFtZSIsIk5ld0NvbnZlcnNhdGlvbiIsIm5ld0NvbnZlcnNhdGlvbiIsInNldE5ld0NvbnZlcnNhdGlvbiIsInVzZVN0YXRlIiwiaGFuZGxlTmV3Q29udmVyc2F0aW9uIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxrQkFBZTtBQUNiQSxFQUFBQSxzQkFBc0IsRUFBRSx3QkFEWDtBQUViQyxFQUFBQSxzQkFBc0IsRUFBRSx3QkFGWDtBQUdiQyxFQUFBQSxxQkFBcUIsRUFBRTtBQUhWLENBQWY7O0FDQ08sZUFBZUMsYUFBZixDQUE2QjtBQUFFQyxFQUFBQTtBQUFGLENBQTdCLEVBQTJDO0FBQ2hELE1BQUk7QUFDRkEsSUFBQUEsUUFBUSxDQUFDO0FBQUVDLE1BQUFBLElBQUksRUFBRUMsV0FBVyxDQUFDTjtBQUFwQixLQUFELENBQVI7QUFDQSxVQUFNTyxRQUFRLEdBQUcsTUFBTUMsS0FBSyxDQUFDLHFDQUFELENBQTVCO0FBRUEsVUFBTTtBQUFDQyxNQUFBQTtBQUFELFFBQWEsTUFBTUYsUUFBUSxDQUFDRyxJQUFULEVBQXpCO0FB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
