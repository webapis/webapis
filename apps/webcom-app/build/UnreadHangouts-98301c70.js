import { j as v, p, h, w as List, x as ListItem } from './index-263a7d0c.js';

function reducerUnreadhangouts({
  unreadhangouts
}) {
  return unreadhangouts.reduce((accumulator, current, index) => {
    if (index === 0) {
      return accumulator = [{ ...current,
        messageCount: 1
      }];
    } else {
      const obj = accumulator.find(a => a.username === current.username && current.state === 'MESSANGER');

      if (obj) {
        const index = accumulator.findIndex(a => a.username === current.username); //if current exist inside accumilator map it to that object

        accumulator.splice(index, 1, { ...obj,
          messageCount: ++obj.messageCount
        });
      } else {
        //if current exist inside accumilator map it to that object
        accumulator.push({ ...current,
          messageCount: 1
        });
      }
    }

    return accumulator;
  }, []);
}

function UnreadHangouts({
  unreadhangouts,
  onSelectUnread,
  onRemoveUnread
}) {
  const [items, setItems] = v([]);
  p(() => {
    if (unreadhangouts) {
      const reduced = reducerUnreadhangouts({
        unreadhangouts
      });
      setItems(reduced);
    }
  }, [unreadhangouts]);
  return h("div", {
    "data-testid": "unreadhangouts",
    style: {
      paddingTop: 68
    }
  }, h(List, null, items && items.length > 0 && items.map(u => {
    return h("div", {
      style: {
        display: 'flex'
      }
    }, h(ListItem, {
      onClick: onSelectUnread,
      id: u.username,
      style: {
        flex: 5
      }
    }, u.username, " messages: ", u.messageCount), h(ListItem, {
      onClick: onRemoveUnread,
      id: u.username,
      style: {
        color: 'red'
      }
    }, "x"));
  })));
}

export default UnreadHangouts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5yZWFkSGFuZ291dHMtOTgzMDFjNzAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9zdGF0ZS9yZWR1Y2VVbnJlYWRoYW5nb3V0cy5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9VbnJlYWRIYW5nb3V0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVkdWNlclVucmVhZGhhbmdvdXRzKHt1bnJlYWRoYW5nb3V0c30pe1xuICAgIHJldHVybiB1bnJlYWRoYW5nb3V0cy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50LCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gKGFjY3VtdWxhdG9yID0gW3sgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH1dKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBvYmogPSBhY2N1bXVsYXRvci5maW5kKFxuICAgICAgICAgICAgKGEpID0+IGEudXNlcm5hbWUgPT09IGN1cnJlbnQudXNlcm5hbWUgJiYgY3VycmVudC5zdGF0ZSA9PT0gJ01FU1NBTkdFUidcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWNjdW11bGF0b3IuZmluZEluZGV4KFxuICAgICAgICAgICAgICAoYSkgPT4gYS51c2VybmFtZSA9PT0gY3VycmVudC51c2VybmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vaWYgY3VycmVudCBleGlzdCBpbnNpZGUgYWNjdW1pbGF0b3IgbWFwIGl0IHRvIHRoYXQgb2JqZWN0XG4gICAgICAgICAgICBhY2N1bXVsYXRvci5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgICAgICAgLi4ub2JqLFxuICAgICAgICAgICAgICBtZXNzYWdlQ291bnQ6ICsrb2JqLm1lc3NhZ2VDb3VudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2lmIGN1cnJlbnQgZXhpc3QgaW5zaWRlIGFjY3VtaWxhdG9yIG1hcCBpdCB0byB0aGF0IG9iamVjdFxuICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaCh7IC4uLmN1cnJlbnQsIG1lc3NhZ2VDb3VudDogMSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfSwgW10pO1xufSIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XG5pbXBvcnQgeyBMaXN0LCBMaXN0SXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGlzdCc7XG5pbXBvcnQge3JlZHVjZXJVbnJlYWRoYW5nb3V0c30gZnJvbSAnLi4vaGFuZ291dHMvc3RhdGUvcmVkdWNlVW5yZWFkaGFuZ291dHMnXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVbnJlYWRIYW5nb3V0cyh7IHVucmVhZGhhbmdvdXRzLG9uU2VsZWN0VW5yZWFkLG9uUmVtb3ZlVW5yZWFkIH0pIHtcblxuICBjb25zdCBbaXRlbXMsc2V0SXRlbXNdID11c2VTdGF0ZShbXSlcbnVzZUVmZmVjdCgoKT0+e1xuaWYodW5yZWFkaGFuZ291dHMpe1xuXG4gIGNvbnN0IHJlZHVjZWQgPXJlZHVjZXJVbnJlYWRoYW5nb3V0cyh7dW5yZWFkaGFuZ291dHN9KVxuIFxuICBzZXRJdGVtcyhyZWR1Y2VkKVxufVxuXG59LFt1bnJlYWRoYW5nb3V0c10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGRhdGEtdGVzdGlkPSd1bnJlYWRoYW5nb3V0cycgc3R5bGU9e3twYWRkaW5nVG9wOjY4fX0+XG4gICAgICA8TGlzdD5cbiAgICAgICAge2l0ZW1zICYmXG4gICAgICAgICAgaXRlbXMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgIGl0ZW1zLm1hcCgodSkgPT4ge1xuICAgICAgIFxuICAgICAgICAgIHJldHVybiAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6J2ZsZXgnfX0+XG4gICAgICAgICAgICA8TGlzdEl0ZW0gb25DbGljaz17b25TZWxlY3RVbnJlYWR9IGlkPXt1LnVzZXJuYW1lfSBzdHlsZT17e2ZsZXg6NX19Pnt1LnVzZXJuYW1lfSBtZXNzYWdlczoge3UubWVzc2FnZUNvdW50fTwvTGlzdEl0ZW0+XG4gICAgICAgICAgICA8TGlzdEl0ZW0gb25DbGljaz17b25SZW1vdmVVbnJlYWR9IGlkPXt1LnVzZXJuYW1lfSBzdHlsZT17e2NvbG9yOidyZWQnfX0+eDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB9KX1cbiAgICAgIDwvTGlzdD5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJyZWR1Y2VyVW5yZWFkaGFuZ291dHMiLCJ1bnJlYWRoYW5nb3V0cyIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY3VycmVudCIsImluZGV4IiwibWVzc2FnZUNvdW50Iiwib2JqIiwiZmluZCIsImEiLCJ1c2VybmFtZSIsInN0YXRlIiwiZmluZEluZGV4Iiwic3BsaWNlIiwicHVzaCIsIlVucmVhZEhhbmdvdXRzIiwib25TZWxlY3RVbnJlYWQiLCJvblJlbW92ZVVucmVhZCIsIml0ZW1zIiwic2V0SXRlbXMiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInJlZHVjZWQiLCJwYWRkaW5nVG9wIiwibGVuZ3RoIiwibWFwIiwidSIsImRpc3BsYXkiLCJmbGV4IiwiY29sb3IiXSwibWFwcGluZ3MiOiI7O0FBQU8sU0FBU0EscUJBQVQsQ0FBK0I7QUFBQ0MsRUFBQUE7QUFBRCxDQUEvQixFQUFnRDtBQUNuRCxTQUFPQSxjQUFjLENBQUNDLE1BQWYsQ0FBc0IsQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLEVBQXVCQyxLQUF2QixLQUFpQztBQUMxRCxRQUFJQSxLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNmLGFBQVFGLFdBQVcsR0FBRyxD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
