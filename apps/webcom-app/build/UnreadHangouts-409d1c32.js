import { j as v, p, h, n as List, o as ListItem } from './index-06a92474.js';

function reducerUnreadhangouts({
  unreadhangouts
}) {
  return unreadhangouts.reduce((accumulator, current, index) => {
    if (index === 0) {
      return accumulator = [{ ...current,
        messageCount: 1
      }];
    } else {
      const obj = accumulator.find(a => a.username === current.username && current.state === 'MESSANGER');

      if (obj) {
        const index = accumulator.findIndex(a => a.username === current.username); //if current exist inside accumilator map it to that object

        accumulator.splice(index, 1, { ...obj,
          messageCount: ++obj.messageCount
        });
      } else {
        //if current exist inside accumilator map it to that object
        accumulator.push({ ...current,
          messageCount: 1
        });
      }
    }

    return accumulator;
  }, []);
}

function UnreadHangouts({
  unreadhangouts,
  onSelectUnread,
  onRemoveUnread
}) {
  const [items, setItems] = v([]);
  p(() => {
    if (unreadhangouts) {
      const reduced = reducerUnreadhangouts({
        unreadhangouts
      });
      setItems(reduced);
    }
  }, [unreadhangouts]);
  return h("div", {
    "data-testid": "unreadhangouts",
    style: {
      paddingTop: 68
    }
  }, h(List, null, items && items.length > 0 && items.map(u => {
    return h("div", {
      style: {
        display: 'flex'
      }
    }, h(ListItem, {
      onClick: onSelectUnread,
      id: u.username,
      style: {
        flex: 5
      },
      "data-testid": `${u.username}-select`
    }, u.username, " messages: ", u.messageCount), h(ListItem, {
      onClick: onRemoveUnread,
      id: u.username,
      style: {
        color: 'red'
      },
      "data-testid": `${u.username}-remove`
    }, "x"));
  })));
}

export default UnreadHangouts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5yZWFkSGFuZ291dHMtNDA5ZDFjMzIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9zdGF0ZS9yZWR1Y2VVbnJlYWRoYW5nb3V0cy5qcyIsIi4uLy4uLy4uL2NsaWVudC9oYW5nb3V0cy9VbnJlYWRIYW5nb3V0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVkdWNlclVucmVhZGhhbmdvdXRzKHt1bnJlYWRoYW5nb3V0c30pe1xyXG4gICAgcmV0dXJuIHVucmVhZGhhbmdvdXRzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gKGFjY3VtdWxhdG9yID0gW3sgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH1dKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3Qgb2JqID0gYWNjdW11bGF0b3IuZmluZChcclxuICAgICAgICAgICAgKGEpID0+IGEudXNlcm5hbWUgPT09IGN1cnJlbnQudXNlcm5hbWUgJiYgY3VycmVudC5zdGF0ZSA9PT0gJ01FU1NBTkdFUidcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWNjdW11bGF0b3IuZmluZEluZGV4KFxyXG4gICAgICAgICAgICAgIChhKSA9PiBhLnVzZXJuYW1lID09PSBjdXJyZW50LnVzZXJuYW1lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIC8vaWYgY3VycmVudCBleGlzdCBpbnNpZGUgYWNjdW1pbGF0b3IgbWFwIGl0IHRvIHRoYXQgb2JqZWN0XHJcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yLnNwbGljZShpbmRleCwgMSwge1xyXG4gICAgICAgICAgICAgIC4uLm9iaixcclxuICAgICAgICAgICAgICBtZXNzYWdlQ291bnQ6ICsrb2JqLm1lc3NhZ2VDb3VudCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL2lmIGN1cnJlbnQgZXhpc3QgaW5zaWRlIGFjY3VtaWxhdG9yIG1hcCBpdCB0byB0aGF0IG9iamVjdFxyXG4gICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKHsgLi4uY3VycmVudCwgbWVzc2FnZUNvdW50OiAxIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XHJcbiAgICAgIH0sIFtdKTtcclxufSIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncHJlYWN0L2hvb2tzJztcclxuaW1wb3J0IExpc3QseyBMaXN0SXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGlzdCc7XHJcbmltcG9ydCB7cmVkdWNlclVucmVhZGhhbmdvdXRzfSBmcm9tICcuLi9oYW5nb3V0cy9zdGF0ZS9yZWR1Y2VVbnJlYWRoYW5nb3V0cydcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVW5yZWFkSGFuZ291dHMoeyB1bnJlYWRoYW5nb3V0cyxvblNlbGVjdFVucmVhZCxvblJlbW92ZVVucmVhZCB9KSB7XHJcblxyXG4gIGNvbnN0IFtpdGVtcyxzZXRJdGVtc10gPXVzZVN0YXRlKFtdKVxyXG51c2VFZmZlY3QoKCk9PntcclxuaWYodW5yZWFkaGFuZ291dHMpe1xyXG5cclxuICBjb25zdCByZWR1Y2VkID1yZWR1Y2VyVW5yZWFkaGFuZ291dHMoe3VucmVhZGhhbmdvdXRzfSlcclxuIFxyXG4gIHNldEl0ZW1zKHJlZHVjZWQpXHJcbn1cclxuXHJcbn0sW3VucmVhZGhhbmdvdXRzXSlcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9J3VucmVhZGhhbmdvdXRzJyBzdHlsZT17e3BhZGRpbmdUb3A6Njh9fT5cclxuICAgICAgPExpc3Q+XHJcbiAgICAgICAge2l0ZW1zICYmXHJcbiAgICAgICAgICBpdGVtcy5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICBpdGVtcy5tYXAoKHUpID0+IHtcclxuICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTonZmxleCd9fT5cclxuICAgICAgICAgICAgPExpc3RJdGVtIG9uQ2xpY2s9e29uU2VsZWN0VW5yZWFkfSBpZD17dS51c2VybmFtZX0gc3R5bGU9e3tmbGV4OjV9fSBkYXRhLXRlc3RpZD17YCR7dS51c2VybmFtZX0tc2VsZWN0YH0+e3UudXNlcm5hbWV9IG1lc3NhZ2VzOiB7dS5tZXNzYWdlQ291bnR9PC9MaXN0SXRlbT5cclxuICAgICAgICAgICAgPExpc3RJdGVtIG9uQ2xpY2s9e29uUmVtb3ZlVW5yZWFkfSBpZD17dS51c2VybmFtZX0gc3R5bGU9e3tjb2xvcjoncmVkJ319IGRhdGEtdGVzdGlkPXtgJHt1LnVzZXJuYW1lfS1yZW1vdmVgfT54PC9MaXN0SXRlbT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgPC9MaXN0PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsicmVkdWNlclVucmVhZGhhbmdvdXRzIiwidW5yZWFkaGFuZ291dHMiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImN1cnJlbnQiLCJpbmRleCIsIm1lc3NhZ2VDb3VudCIsIm9iaiIsImZpbmQiLCJhIiwidXNlcm5hbWUiLCJzdGF0ZSIsImZpbmRJbmRleCIsInNwbGljZSIsInB1c2giLCJVbnJlYWRIYW5nb3V0cyIsIm9uU2VsZWN0VW5yZWFkIiwib25SZW1vdmVVbnJlYWQiLCJpdGVtcyIsInNldEl0ZW1zIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJyZWR1Y2VkIiwicGFkZGluZ1RvcCIsImxlbmd0aCIsIm1hcCIsInUiLCJkaXNwbGF5IiwiZmxleCIsImNvbG9yIl0sIm1hcHBpbmdz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
